{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/json/summary.json","path":"json/summary.json","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/RocketMQ使用场景之可靠性优先Case.md","hash":"87604ce5357be14d29b422124c6b0ccb73dfaea7","modified":1578573386087},{"_id":"source/_posts/RocketMQ使用场景之吞吐量优先Case.md","hash":"87c5124e4ad7829e3a1295e97d5ca97d61890faa","modified":1578573421430},{"_id":"source/_posts/RocketMQ角色详解之Consumer.md","hash":"8895851dce179fa767bb467c5e99c3cd48160ab5","modified":1578625261797},{"_id":"source/_posts/RocketMQ概述.md","hash":"402c4cd7ba2ec122f76e719e971764c0616998fe","modified":1578572671846},{"_id":"source/_posts/RocketMQ的环境搭建与相关配置.md","hash":"49457d785c9f13086f229577137b2851e6cf943f","modified":1578573105578},{"_id":"source/_posts/RocketMQ角色详解之Producer.md","hash":"2cbb5de2152e9ba1dd8dae6d13f31f43713ee774","modified":1578573233377},{"_id":"source/_posts/RocketMQ角色详解之Broker.md","hash":"5357bb0c4eb0511d3010ba6fbd76d31fdc20309c","modified":1578573342504},{"_id":"source/_posts/RocketMQ角色详解之NameServer.md","hash":"1128b293fb4624458dd39e956294fa39b1eafeb4","modified":1578573301632},{"_id":"themes/cactus/_config.yml","hash":"02dc7f2f9294d63d90e552714662b7b203893557","modified":1578565960628},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1577675857450},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1577675857450},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1577675857450},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1577675857451},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1577675857460},{"_id":"source/_posts/RocketMQ概述/rocketmq.jpeg","hash":"6cd1456532eec6f5c578ef86fb090e6312419948","modified":1578572685030},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1577675857451},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1577675857451},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1577675857451},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1577675857451},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1577675857451},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1577675857451},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1577675857452},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1577675857452},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1577675857452},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1577675857452},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1577675857452},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1577675857453},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1577675857453},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1577675857453},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1577675857454},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1577675857455},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1577675857458},{"_id":"themes/cactus/layout/index.ejs","hash":"1fd8aad25b2893a26b4483b91a341907e55c16be","modified":1577675857458},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1577675857458},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1577675857459},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1577675857459},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1577675857460},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1577675857461},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1577675857461},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1577675857461},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"137d3039f61cae8ae9219eb6771dd367304f9ec3","modified":1577675857458},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1577675857458},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1577675857458},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1577675857462},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1577675857462},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1577675857471},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1577675857473},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1577675857473},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1577675857473},{"_id":"themes/cactus/source/css/style.styl","hash":"18b22cfdc7457d81db7694aef5850cc36ff87a77","modified":1577675857474},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1577675857475},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1577675857477},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1577675857474},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1577675857474},{"_id":"themes/cactus/source/json/summary.json","hash":"0a1edbdbb9f1b381a50978478db7997b7c7c439f","modified":1578624515153},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1577675857477},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1577675857457},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1577675857457},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1577675857457},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1577675857457},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1577675857462},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1577675857461},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1577675857461},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1577675857471},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"519af79eb34ee922b48e6c19aa8f4856e3f76486","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1577675857473},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1577675857473},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1577675857473},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1577675857477},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1577675857516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1577675857516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1577675857518},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1577675857518},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1577675857519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1577675857520},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1577675857521},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1577675857521},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1577675857523},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1577675857523},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1577675857525},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1577675857525},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1577675857525},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1577675857476},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1577675857494},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1577675857515},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1577675857517},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1577675857516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1577675857517},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1577675857519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1577675857519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1577675857520},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1577675857521},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1577675857522},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1577675857523},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1577675857524},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1577675857525},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1577675857473},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1577675857473},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1577675857485},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1577675857485},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1577675857486},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1577675857486},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1577675857494},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1577675857494},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1577675857478},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1577675857484},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1577675857484},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1577675857493},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1577675857483},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1577675857493},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1577675857487},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1577675857492},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1577675857479},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1577675857485},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1577675857510},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1577675857504},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1577675857511},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1577675857514},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1577675857513},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1577675857506},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1577675857508},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1577675857507},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1577675857514},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1577675857512},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1577675857512},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1577675857502},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1577675857482},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1577675857491}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"RocketMQ使用场景之可靠性优先Case","date":"2020-01-09T12:36:15.000Z","_content":"### 一、顺序消息的实现\n**1.全局顺序消息**\n要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，\n然后 Producer 和 Consumer 的并发设置也要是1。 \n在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue \n（使用 MessageQueueSelector类）\n\n**2.部分顺序消息**\n在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理\n(使用 MessageListenerOrderly类)\n具体实现方式：\n\n```java\n在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,\n消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，\n这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，\n但不同 Consumer Queue 的消息可以并发处理 。\n```\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_3\");\n\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.subscribe(\"TopicTest\", \"TagA || TagC || TagD\");\n\n        consumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                context.setAutoCommit(false);\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 3) == 0) {\n                    return ConsumeOrderlyStatus.ROLLBACK;\n                } else if ((this.consumeTimes.get() % 4) == 0) {\n                    return ConsumeOrderlyStatus.COMMIT;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n}\n```\n\n### 二、消息重复问题\n消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是： \nProducer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。\n\n**解决办法：**\n\n 1. 保证消费逻辑的幕等性(多次调用和一次调用效果相同)\n 2. 维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）\n\n\n### 三、消息优先级\n**RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。**\n\n**情景1：**\n同一Topic下某一消息需要被及时处理，可另外开辟topic\n**情景2：**\n\n```java\n一个订单处理系统，接收从 100家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;\n订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 1 万单 。 \n如果这 100 个快递门店中某几个门店订单量大增，\n比如门店一接了个大客户，一个上午就发出 2万单消息请求，\n这样其他的 99 家门店可能被迫等待门店一的 2 万单处理完，\n也就是两天后订单才能被处理，显然很不公平 。\n```\n解决：\n```java\n创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 100 个，\nProducer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 \nDefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 \nMessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 \nMessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。\n```\n\n**情景3：**\n\n```java\n一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 \nTypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; \nTypeB处于第二优先级; \nTypeC 处于第三 优先级 。 \n```\n解决：\n\n```java\n对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，\n如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，\n自主控制 Messag巳Queue 的遍历，以及消息的读取;\n```\n\n### 四、各种故障对消息队列的影响\n故障清单：\n\n```\n1) Broker正常关闭，启动;\n2) Broker异常 Crash，然后启动;\n3) OS Crash，重启;\n4 )机器断电，但能马上恢复供电;\n5 )磁盘损坏;\n6) CPU、 主板、内存等关键设备损坏 。\n```\n分析：\n\n```java\n1 ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 \n若重启过程中有持续运行的 Consumer, Master机器出故障后， \nConsumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 \n当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器\n若有持续运行的 Producer，一台Master 出故障后，\nProducer只能向 Topic下其他的 Master机器发送消息，\n如果Producer采用同步发送方式，不会有消息丢失 。\n\n2、3、4）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，\n如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 1 种情况相同的效果 。\n\n5、6 ）情况属于硬件故障 ，发生第 5、6 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 5 或 6 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。\n```\n\n常规思路：\n\n```java\n总的来说，当设置成:\n1 )多 Master，每个 Master 带有 Slave; \n2 )主从之间设置成 SYNC_MASTER; \n3 ) Producer 用同步方式写;\n4 )刷盘策略设置成 SYNC FLUSH。\n就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。\n```\n","source":"_posts/RocketMQ使用场景之可靠性优先Case.md","raw":"---\ntitle: RocketMQ使用场景之可靠性优先Case\ndate: 2020-01-09 20:36:15\ntags:\n---\n### 一、顺序消息的实现\n**1.全局顺序消息**\n要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，\n然后 Producer 和 Consumer 的并发设置也要是1。 \n在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue \n（使用 MessageQueueSelector类）\n\n**2.部分顺序消息**\n在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理\n(使用 MessageListenerOrderly类)\n具体实现方式：\n\n```java\n在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,\n消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，\n这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，\n但不同 Consumer Queue 的消息可以并发处理 。\n```\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_3\");\n\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.subscribe(\"TopicTest\", \"TagA || TagC || TagD\");\n\n        consumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                context.setAutoCommit(false);\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 3) == 0) {\n                    return ConsumeOrderlyStatus.ROLLBACK;\n                } else if ((this.consumeTimes.get() % 4) == 0) {\n                    return ConsumeOrderlyStatus.COMMIT;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n}\n```\n\n### 二、消息重复问题\n消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是： \nProducer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。\n\n**解决办法：**\n\n 1. 保证消费逻辑的幕等性(多次调用和一次调用效果相同)\n 2. 维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）\n\n\n### 三、消息优先级\n**RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。**\n\n**情景1：**\n同一Topic下某一消息需要被及时处理，可另外开辟topic\n**情景2：**\n\n```java\n一个订单处理系统，接收从 100家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;\n订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 1 万单 。 \n如果这 100 个快递门店中某几个门店订单量大增，\n比如门店一接了个大客户，一个上午就发出 2万单消息请求，\n这样其他的 99 家门店可能被迫等待门店一的 2 万单处理完，\n也就是两天后订单才能被处理，显然很不公平 。\n```\n解决：\n```java\n创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 100 个，\nProducer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 \nDefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 \nMessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 \nMessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。\n```\n\n**情景3：**\n\n```java\n一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 \nTypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; \nTypeB处于第二优先级; \nTypeC 处于第三 优先级 。 \n```\n解决：\n\n```java\n对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，\n如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，\n自主控制 Messag巳Queue 的遍历，以及消息的读取;\n```\n\n### 四、各种故障对消息队列的影响\n故障清单：\n\n```\n1) Broker正常关闭，启动;\n2) Broker异常 Crash，然后启动;\n3) OS Crash，重启;\n4 )机器断电，但能马上恢复供电;\n5 )磁盘损坏;\n6) CPU、 主板、内存等关键设备损坏 。\n```\n分析：\n\n```java\n1 ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 \n若重启过程中有持续运行的 Consumer, Master机器出故障后， \nConsumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 \n当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器\n若有持续运行的 Producer，一台Master 出故障后，\nProducer只能向 Topic下其他的 Master机器发送消息，\n如果Producer采用同步发送方式，不会有消息丢失 。\n\n2、3、4）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，\n如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 1 种情况相同的效果 。\n\n5、6 ）情况属于硬件故障 ，发生第 5、6 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 5 或 6 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。\n```\n\n常规思路：\n\n```java\n总的来说，当设置成:\n1 )多 Master，每个 Master 带有 Slave; \n2 )主从之间设置成 SYNC_MASTER; \n3 ) Producer 用同步方式写;\n4 )刷盘策略设置成 SYNC FLUSH。\n就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。\n```\n","slug":"RocketMQ使用场景之可靠性优先Case","published":1,"updated":"2020-01-09T12:36:26.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot5k00004lz0cb6xeu72","content":"<h3 id=\"一、顺序消息的实现\"><a href=\"#一、顺序消息的实现\" class=\"headerlink\" title=\"一、顺序消息的实现\"></a>一、顺序消息的实现</h3><p><strong>1.全局顺序消息</strong><br>要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，<br>然后 Producer 和 Consumer 的并发设置也要是1。<br>在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue<br>（使用 MessageQueueSelector类）</p>\n<p><strong>2.部分顺序消息</strong><br>在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理<br>(使用 MessageListenerOrderly类)<br>具体实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,</span><br><span class=\"line\">消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，</span><br><span class=\"line\">这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，</span><br><span class=\"line\">但不同 Consumer Queue 的消息可以并发处理 。</span><br></pre></td></tr></table></figure>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"TagA || TagC || TagD\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerOrderly() &#123;</span><br><span class=\"line\">            AtomicLong consumeTimes = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeOrderlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                context.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.consumeTimes.incrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">2</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">3</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.ROLLBACK;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">4</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.COMMIT;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">5</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    context.setSuspendCurrentQueueTimeMillis(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、消息重复问题\"><a href=\"#二、消息重复问题\" class=\"headerlink\" title=\"二、消息重复问题\"></a>二、消息重复问题</h3><p>消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是：<br>Producer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。</p>\n<p><strong>解决办法：</strong></p>\n<ol>\n<li>保证消费逻辑的幕等性(多次调用和一次调用效果相同)</li>\n<li>维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）</li>\n</ol>\n<h3 id=\"三、消息优先级\"><a href=\"#三、消息优先级\" class=\"headerlink\" title=\"三、消息优先级\"></a>三、消息优先级</h3><p><strong>RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。</strong></p>\n<p><strong>情景1：</strong><br>同一Topic下某一消息需要被及时处理，可另外开辟topic<br><strong>情景2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个订单处理系统，接收从 <span class=\"number\">100</span>家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;</span><br><span class=\"line\">订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 <span class=\"number\">1</span> 万单 。 </span><br><span class=\"line\">如果这 <span class=\"number\">100</span> 个快递门店中某几个门店订单量大增，</span><br><span class=\"line\">比如门店一接了个大客户，一个上午就发出 <span class=\"number\">2</span>万单消息请求，</span><br><span class=\"line\">这样其他的 <span class=\"number\">99</span> 家门店可能被迫等待门店一的 <span class=\"number\">2</span> 万单处理完，</span><br><span class=\"line\">也就是两天后订单才能被处理，显然很不公平 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 <span class=\"number\">100</span> 个，</span><br><span class=\"line\">Producer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 </span><br><span class=\"line\">DefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 </span><br><span class=\"line\">MessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 </span><br><span class=\"line\">MessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。</span><br></pre></td></tr></table></figure>\n\n<p><strong>情景3：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 </span><br><span class=\"line\">TypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; </span><br><span class=\"line\">TypeB处于第二优先级; </span><br><span class=\"line\">TypeC 处于第三 优先级 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，</span><br><span class=\"line\">如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，</span><br><span class=\"line\">自主控制 Messag巳Queue 的遍历，以及消息的读取;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、各种故障对消息队列的影响\"><a href=\"#四、各种故障对消息队列的影响\" class=\"headerlink\" title=\"四、各种故障对消息队列的影响\"></a>四、各种故障对消息队列的影响</h3><p>故障清单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) Broker正常关闭，启动;</span><br><span class=\"line\">2) Broker异常 Crash，然后启动;</span><br><span class=\"line\">3) OS Crash，重启;</span><br><span class=\"line\">4 )机器断电，但能马上恢复供电;</span><br><span class=\"line\">5 )磁盘损坏;</span><br><span class=\"line\">6) CPU、 主板、内存等关键设备损坏 。</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 </span><br><span class=\"line\">若重启过程中有持续运行的 Consumer, Master机器出故障后， </span><br><span class=\"line\">Consumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 </span><br><span class=\"line\">当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器</span><br><span class=\"line\">若有持续运行的 Producer，一台Master 出故障后，</span><br><span class=\"line\">Producer只能向 Topic下其他的 Master机器发送消息，</span><br><span class=\"line\">如果Producer采用同步发送方式，不会有消息丢失 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">3</span>、<span class=\"number\">4</span>）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，</span><br><span class=\"line\">如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 <span class=\"number\">1</span> 种情况相同的效果 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、<span class=\"number\">6</span> ）情况属于硬件故障 ，发生第 <span class=\"number\">5</span>、<span class=\"number\">6</span> 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 <span class=\"number\">5</span> 或 <span class=\"number\">6</span> 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。</span><br></pre></td></tr></table></figure>\n\n<p>常规思路：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总的来说，当设置成:</span><br><span class=\"line\"><span class=\"number\">1</span> )多 Master，每个 Master 带有 Slave; </span><br><span class=\"line\"><span class=\"number\">2</span> )主从之间设置成 SYNC_MASTER; </span><br><span class=\"line\"><span class=\"number\">3</span> ) Producer 用同步方式写;</span><br><span class=\"line\"><span class=\"number\">4</span> )刷盘策略设置成 SYNC FLUSH。</span><br><span class=\"line\">就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、顺序消息的实现\"><a href=\"#一、顺序消息的实现\" class=\"headerlink\" title=\"一、顺序消息的实现\"></a>一、顺序消息的实现</h3><p><strong>1.全局顺序消息</strong><br>要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，<br>然后 Producer 和 Consumer 的并发设置也要是1。<br>在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue<br>（使用 MessageQueueSelector类）</p>\n<p><strong>2.部分顺序消息</strong><br>在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理<br>(使用 MessageListenerOrderly类)<br>具体实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,</span><br><span class=\"line\">消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，</span><br><span class=\"line\">这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，</span><br><span class=\"line\">但不同 Consumer Queue 的消息可以并发处理 。</span><br></pre></td></tr></table></figure>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"TagA || TagC || TagD\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerOrderly() &#123;</span><br><span class=\"line\">            AtomicLong consumeTimes = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeOrderlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                context.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.consumeTimes.incrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">2</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">3</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.ROLLBACK;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">4</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.COMMIT;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">5</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    context.setSuspendCurrentQueueTimeMillis(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、消息重复问题\"><a href=\"#二、消息重复问题\" class=\"headerlink\" title=\"二、消息重复问题\"></a>二、消息重复问题</h3><p>消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是：<br>Producer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。</p>\n<p><strong>解决办法：</strong></p>\n<ol>\n<li>保证消费逻辑的幕等性(多次调用和一次调用效果相同)</li>\n<li>维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）</li>\n</ol>\n<h3 id=\"三、消息优先级\"><a href=\"#三、消息优先级\" class=\"headerlink\" title=\"三、消息优先级\"></a>三、消息优先级</h3><p><strong>RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。</strong></p>\n<p><strong>情景1：</strong><br>同一Topic下某一消息需要被及时处理，可另外开辟topic<br><strong>情景2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个订单处理系统，接收从 <span class=\"number\">100</span>家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;</span><br><span class=\"line\">订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 <span class=\"number\">1</span> 万单 。 </span><br><span class=\"line\">如果这 <span class=\"number\">100</span> 个快递门店中某几个门店订单量大增，</span><br><span class=\"line\">比如门店一接了个大客户，一个上午就发出 <span class=\"number\">2</span>万单消息请求，</span><br><span class=\"line\">这样其他的 <span class=\"number\">99</span> 家门店可能被迫等待门店一的 <span class=\"number\">2</span> 万单处理完，</span><br><span class=\"line\">也就是两天后订单才能被处理，显然很不公平 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 <span class=\"number\">100</span> 个，</span><br><span class=\"line\">Producer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 </span><br><span class=\"line\">DefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 </span><br><span class=\"line\">MessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 </span><br><span class=\"line\">MessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。</span><br></pre></td></tr></table></figure>\n\n<p><strong>情景3：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 </span><br><span class=\"line\">TypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; </span><br><span class=\"line\">TypeB处于第二优先级; </span><br><span class=\"line\">TypeC 处于第三 优先级 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，</span><br><span class=\"line\">如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，</span><br><span class=\"line\">自主控制 Messag巳Queue 的遍历，以及消息的读取;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、各种故障对消息队列的影响\"><a href=\"#四、各种故障对消息队列的影响\" class=\"headerlink\" title=\"四、各种故障对消息队列的影响\"></a>四、各种故障对消息队列的影响</h3><p>故障清单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) Broker正常关闭，启动;</span><br><span class=\"line\">2) Broker异常 Crash，然后启动;</span><br><span class=\"line\">3) OS Crash，重启;</span><br><span class=\"line\">4 )机器断电，但能马上恢复供电;</span><br><span class=\"line\">5 )磁盘损坏;</span><br><span class=\"line\">6) CPU、 主板、内存等关键设备损坏 。</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 </span><br><span class=\"line\">若重启过程中有持续运行的 Consumer, Master机器出故障后， </span><br><span class=\"line\">Consumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 </span><br><span class=\"line\">当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器</span><br><span class=\"line\">若有持续运行的 Producer，一台Master 出故障后，</span><br><span class=\"line\">Producer只能向 Topic下其他的 Master机器发送消息，</span><br><span class=\"line\">如果Producer采用同步发送方式，不会有消息丢失 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">3</span>、<span class=\"number\">4</span>）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，</span><br><span class=\"line\">如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 <span class=\"number\">1</span> 种情况相同的效果 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、<span class=\"number\">6</span> ）情况属于硬件故障 ，发生第 <span class=\"number\">5</span>、<span class=\"number\">6</span> 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 <span class=\"number\">5</span> 或 <span class=\"number\">6</span> 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。</span><br></pre></td></tr></table></figure>\n\n<p>常规思路：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总的来说，当设置成:</span><br><span class=\"line\"><span class=\"number\">1</span> )多 Master，每个 Master 带有 Slave; </span><br><span class=\"line\"><span class=\"number\">2</span> )主从之间设置成 SYNC_MASTER; </span><br><span class=\"line\"><span class=\"number\">3</span> ) Producer 用同步方式写;</span><br><span class=\"line\"><span class=\"number\">4</span> )刷盘策略设置成 SYNC FLUSH。</span><br><span class=\"line\">就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。</span><br></pre></td></tr></table></figure>\n"},{"title":"RocketMQ使用场景之吞吐量优先Case","date":"2020-01-09T12:36:45.000Z","_content":"\n### 一、Broker端进行消息过滤，提高吞吐量\n**在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。**\n\n##### 过滤方式：\n**方式1：**\n通过tag 和 key 进行过滤(在创建Message时设置）\nTag和 Key的主要差别是使用场景不同 \nTag用在 Consumer的代码中，用来进行服务端消息过滤\nKey 主要用于通过命令行查询消息 。\n\n**方式2：**\n通过sql表达式的方式进行过滤\n\nSqlProducer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class SqlProducer {\n\n    public static void main(String[] args) {\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        for (int i = 0; i < 10; i++) {\n            try {\n                String tag;\n                int div = i % 3;\n                if (div == 0) {\n                    tag = \"TagA\";\n                } else if (div == 1) {\n                    tag = \"TagB\";\n                } else {\n                    tag = \"TagC\";\n                }\n                Message msg = new Message(\"TopicTest\",\n                    tag,\n                    (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET)\n                );\n                msg.putUserProperty(\"a\", String.valueOf(i));\n\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            } catch (Exception e) {\n                e.printStackTrace();\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        }\n        producer.shutdown();\n    }\n}\n```\n\nSqlConsumer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.MessageSelector;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class SqlConsumer {\n\n    public static void main(String[] args) {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_4\");\n        try {\n            consumer.subscribe(\"TopicTest\",\n                MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\" +\n                    \"and (a is not null and a between 0  3)\"));\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        try {\n            consumer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n\n```\n\n**方式3：**\nFilter Server方式过滤\n\nproducer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.start();\n\n        try {\n            for (int i = 0; i < 6000000; i++) {\n                Message msg = new Message(\"TopicFilter7\",\n                    \"TagA\",\n                    \"OrderID001\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n\n                msg.putUserProperty(\"SequenceId\", String.valueOf(i));\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        producer.shutdown();\n    }\n}\n\n```\nconsumer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException, IOException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ConsumerGroupNamecc4\");\n\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        File classFile = new File(classLoader.getResource(\"MessageFilterImpl.java\").getFile());\n\n        String filterCode = MixAll.file2String(classFile);\n        consumer.subscribe(\"TopicTest\", \"org.apache.rocketmq.example.filter.MessageFilterImpl\",\n            filterCode);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n\n### 二、提高Consumer处理能力\n**1.提高消费并行度**\n方式1：增加consumer实例\n方式2：提高单个 Consumer 实例中的并行处理的线程数\n（修改 consumeThreadMin 和 consumeThreadMax)\n\n**2.批量方式进行消费**\n设置 Consumer 的 consumeMessageBatchMaxSize \n这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表\n\n**注意：**\nbroker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加\n该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条\n\n**3.检测延时情况，跳过非重要消息**\nConsumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积\n这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度\n\n### 三、Consumer负载均衡\n**DefaultMQPushConsumer的负载均衡：**\n负载均衡过程不需要使用者操心，客户端程序会自动处理\n每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace\n\n**注意：**\n负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)\n负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。\n3m2c: 2 1\n3m4c: 1 1 1 0\n可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。\n\n**DefaultMQPullConsumer 的负载均衡：**\n**1.通过registerMessageQueueListener 函数**\nregisterMessageQueueListener函数在有新的Consumer加入或退出时被触发。 \n\n**2.通过MQPullConsumerScheduleService类**\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.consumer.MQPullConsumer;\nimport org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.consumer.PullTaskCallback;\nimport org.apache.rocketmq.client.consumer.PullTaskContext;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\npublic class PullScheduleService {\n\n    public static void main(String[] args) throws MQClientException {\n        final MQPullConsumerScheduleService scheduleService = new MQPullConsumerScheduleService(\"GroupName1\");\n\n        scheduleService.setMessageModel(MessageModel.CLUSTERING);\n        scheduleService.registerPullTaskCallback(\"TopicTest\", new PullTaskCallback() {\n\n            @Override\n            public void doPullTask(MessageQueue mq, PullTaskContext context) {\n                MQPullConsumer consumer = context.getPullConsumer();\n                try {\n\n                    long offset = consumer.fetchConsumeOffset(mq, false);\n                    if (offset < 0)\n                        offset = 0;\n\n                    PullResult pullResult = consumer.pull(mq, \"*\", offset, 32);\n                    System.out.printf(\"%s%n\", offset + \"\\t\" + mq + \"\\t\" + pullResult);\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());\n\n                    context.setPullNextDelayTimeMillis(100);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        scheduleService.start();\n    }\n}\n```\n\n### 四、提高Producer发送速度\n**途径1：**\n增加Producer并发量，使用多个Producer实例同时发送\n\n**注意：**\n不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。\n\n**途径2：**\n可靠性要求不高的场景下，可以采用OneWay方式发送。\n单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，\n即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。\n\n具体参考代码如下：\n\n```java\npublic class OnewayProducer {\n    public static void main(String[] args) throws Exception{\n        //Instantiate with a producer group name.\n        DefaultMQProducer producer = new DefaultMQProducer(\"example_group_name\");\n        //Launch the instance.\n        producer.start();\n        for (int i = 0; i < 100; i++) {\n            //Create a message instance, specifying topic, tag and message body.\n            Message msg = new Message(\"TopicTest\" /* Topic */,\n                    \"TagA\" /* Tag */,\n                    (\"Hello RocketMQ \" +\n                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            //Call send message to deliver message to one of brokers.\n            producer.sendOneway(msg);\n\n        }\n        //Shut down once the producer instance is not longer in use.\n        producer.shutdown();\n    }\n}\n```\n","source":"_posts/RocketMQ使用场景之吞吐量优先Case.md","raw":"---\ntitle: RocketMQ使用场景之吞吐量优先Case\ndate: 2020-01-09 20:36:45\ntags:\n---\n\n### 一、Broker端进行消息过滤，提高吞吐量\n**在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。**\n\n##### 过滤方式：\n**方式1：**\n通过tag 和 key 进行过滤(在创建Message时设置）\nTag和 Key的主要差别是使用场景不同 \nTag用在 Consumer的代码中，用来进行服务端消息过滤\nKey 主要用于通过命令行查询消息 。\n\n**方式2：**\n通过sql表达式的方式进行过滤\n\nSqlProducer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class SqlProducer {\n\n    public static void main(String[] args) {\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        for (int i = 0; i < 10; i++) {\n            try {\n                String tag;\n                int div = i % 3;\n                if (div == 0) {\n                    tag = \"TagA\";\n                } else if (div == 1) {\n                    tag = \"TagB\";\n                } else {\n                    tag = \"TagC\";\n                }\n                Message msg = new Message(\"TopicTest\",\n                    tag,\n                    (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET)\n                );\n                msg.putUserProperty(\"a\", String.valueOf(i));\n\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            } catch (Exception e) {\n                e.printStackTrace();\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        }\n        producer.shutdown();\n    }\n}\n```\n\nSqlConsumer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.MessageSelector;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class SqlConsumer {\n\n    public static void main(String[] args) {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_4\");\n        try {\n            consumer.subscribe(\"TopicTest\",\n                MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\" +\n                    \"and (a is not null and a between 0  3)\"));\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        try {\n            consumer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n\n```\n\n**方式3：**\nFilter Server方式过滤\n\nproducer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.start();\n\n        try {\n            for (int i = 0; i < 6000000; i++) {\n                Message msg = new Message(\"TopicFilter7\",\n                    \"TagA\",\n                    \"OrderID001\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n\n                msg.putUserProperty(\"SequenceId\", String.valueOf(i));\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        producer.shutdown();\n    }\n}\n\n```\nconsumer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException, IOException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ConsumerGroupNamecc4\");\n\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        File classFile = new File(classLoader.getResource(\"MessageFilterImpl.java\").getFile());\n\n        String filterCode = MixAll.file2String(classFile);\n        consumer.subscribe(\"TopicTest\", \"org.apache.rocketmq.example.filter.MessageFilterImpl\",\n            filterCode);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n\n### 二、提高Consumer处理能力\n**1.提高消费并行度**\n方式1：增加consumer实例\n方式2：提高单个 Consumer 实例中的并行处理的线程数\n（修改 consumeThreadMin 和 consumeThreadMax)\n\n**2.批量方式进行消费**\n设置 Consumer 的 consumeMessageBatchMaxSize \n这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表\n\n**注意：**\nbroker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加\n该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条\n\n**3.检测延时情况，跳过非重要消息**\nConsumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积\n这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度\n\n### 三、Consumer负载均衡\n**DefaultMQPushConsumer的负载均衡：**\n负载均衡过程不需要使用者操心，客户端程序会自动处理\n每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace\n\n**注意：**\n负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)\n负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。\n3m2c: 2 1\n3m4c: 1 1 1 0\n可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。\n\n**DefaultMQPullConsumer 的负载均衡：**\n**1.通过registerMessageQueueListener 函数**\nregisterMessageQueueListener函数在有新的Consumer加入或退出时被触发。 \n\n**2.通过MQPullConsumerScheduleService类**\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.consumer.MQPullConsumer;\nimport org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.consumer.PullTaskCallback;\nimport org.apache.rocketmq.client.consumer.PullTaskContext;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\npublic class PullScheduleService {\n\n    public static void main(String[] args) throws MQClientException {\n        final MQPullConsumerScheduleService scheduleService = new MQPullConsumerScheduleService(\"GroupName1\");\n\n        scheduleService.setMessageModel(MessageModel.CLUSTERING);\n        scheduleService.registerPullTaskCallback(\"TopicTest\", new PullTaskCallback() {\n\n            @Override\n            public void doPullTask(MessageQueue mq, PullTaskContext context) {\n                MQPullConsumer consumer = context.getPullConsumer();\n                try {\n\n                    long offset = consumer.fetchConsumeOffset(mq, false);\n                    if (offset < 0)\n                        offset = 0;\n\n                    PullResult pullResult = consumer.pull(mq, \"*\", offset, 32);\n                    System.out.printf(\"%s%n\", offset + \"\\t\" + mq + \"\\t\" + pullResult);\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());\n\n                    context.setPullNextDelayTimeMillis(100);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        scheduleService.start();\n    }\n}\n```\n\n### 四、提高Producer发送速度\n**途径1：**\n增加Producer并发量，使用多个Producer实例同时发送\n\n**注意：**\n不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。\n\n**途径2：**\n可靠性要求不高的场景下，可以采用OneWay方式发送。\n单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，\n即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。\n\n具体参考代码如下：\n\n```java\npublic class OnewayProducer {\n    public static void main(String[] args) throws Exception{\n        //Instantiate with a producer group name.\n        DefaultMQProducer producer = new DefaultMQProducer(\"example_group_name\");\n        //Launch the instance.\n        producer.start();\n        for (int i = 0; i < 100; i++) {\n            //Create a message instance, specifying topic, tag and message body.\n            Message msg = new Message(\"TopicTest\" /* Topic */,\n                    \"TagA\" /* Tag */,\n                    (\"Hello RocketMQ \" +\n                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            //Call send message to deliver message to one of brokers.\n            producer.sendOneway(msg);\n\n        }\n        //Shut down once the producer instance is not longer in use.\n        producer.shutdown();\n    }\n}\n```\n","slug":"RocketMQ使用场景之吞吐量优先Case","published":1,"updated":"2020-01-09T12:37:01.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot6x00014lz0gwu2137c","content":"<h3 id=\"一、Broker端进行消息过滤，提高吞吐量\"><a href=\"#一、Broker端进行消息过滤，提高吞吐量\" class=\"headerlink\" title=\"一、Broker端进行消息过滤，提高吞吐量\"></a>一、Broker端进行消息过滤，提高吞吐量</h3><p><strong>在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。</strong></p>\n<h5 id=\"过滤方式：\"><a href=\"#过滤方式：\" class=\"headerlink\" title=\"过滤方式：\"></a>过滤方式：</h5><p><strong>方式1：</strong><br>通过tag 和 key 进行过滤(在创建Message时设置）<br>Tag和 Key的主要差别是使用场景不同<br>Tag用在 Consumer的代码中，用来进行服务端消息过滤<br>Key 主要用于通过命令行查询消息 。</p>\n<p><strong>方式2：</strong><br>通过sql表达式的方式进行过滤</p>\n<p>SqlProducer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String tag;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> div = i % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (div == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagA\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (div == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagB\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagC\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                    tag,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class=\"line\">                );</span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"a\"</span>, String.valueOf(i));</span><br><span class=\"line\"></span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SqlConsumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MessageSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_4\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                MessageSelector.bySql(<span class=\"string\">\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"and (a is not null and a between 0  3)\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式3：</strong><br>Filter Server方式过滤</p>\n<p>producer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6000000</span>; i++) &#123;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicFilter7\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID001\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\"></span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"SequenceId\"</span>, String.valueOf(i));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>consumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.MixAll;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException, IOException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupNamecc4\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        File classFile = <span class=\"keyword\">new</span> File(classLoader.getResource(<span class=\"string\">\"MessageFilterImpl.java\"</span>).getFile());</span><br><span class=\"line\"></span><br><span class=\"line\">        String filterCode = MixAll.file2String(classFile);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"org.apache.rocketmq.example.filter.MessageFilterImpl\"</span>,</span><br><span class=\"line\">            filterCode);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"二、提高Consumer处理能力\"><a href=\"#二、提高Consumer处理能力\" class=\"headerlink\" title=\"二、提高Consumer处理能力\"></a>二、提高Consumer处理能力</h3><p><strong>1.提高消费并行度</strong><br>方式1：增加consumer实例<br>方式2：提高单个 Consumer 实例中的并行处理的线程数<br>（修改 consumeThreadMin 和 consumeThreadMax)</p>\n<p><strong>2.批量方式进行消费</strong><br>设置 Consumer 的 consumeMessageBatchMaxSize<br>这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表</p>\n<p><strong>注意：</strong><br>broker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加<br>该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条</p>\n<p><strong>3.检测延时情况，跳过非重要消息</strong><br>Consumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积<br>这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度</p>\n<h3 id=\"三、Consumer负载均衡\"><a href=\"#三、Consumer负载均衡\" class=\"headerlink\" title=\"三、Consumer负载均衡\"></a>三、Consumer负载均衡</h3><p><strong>DefaultMQPushConsumer的负载均衡：</strong><br>负载均衡过程不需要使用者操心，客户端程序会自动处理<br>每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace</p>\n<p><strong>注意：</strong><br>负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)<br>负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。<br>3m2c: 2 1<br>3m4c: 1 1 1 0<br>可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。</p>\n<p><strong>DefaultMQPullConsumer 的负载均衡：</strong><br><strong>1.通过registerMessageQueueListener 函数</strong><br>registerMessageQueueListener函数在有新的Consumer加入或退出时被触发。 </p>\n<p><strong>2.通过MQPullConsumerScheduleService类</strong><br>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullScheduleService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> MQPullConsumerScheduleService scheduleService = <span class=\"keyword\">new</span> MQPullConsumerScheduleService(<span class=\"string\">\"GroupName1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\">        scheduleService.registerPullTaskCallback(<span class=\"string\">\"TopicTest\"</span>, <span class=\"keyword\">new</span> PullTaskCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPullTask</span><span class=\"params\">(MessageQueue mq, PullTaskContext context)</span> </span>&#123;</span><br><span class=\"line\">                MQPullConsumer consumer = context.getPullConsumer();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> offset = consumer.fetchConsumeOffset(mq, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        offset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    PullResult pullResult = consumer.pull(mq, <span class=\"string\">\"*\"</span>, offset, <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, offset + <span class=\"string\">\"\\t\"</span> + mq + <span class=\"string\">\"\\t\"</span> + pullResult);</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\"></span><br><span class=\"line\">                    context.setPullNextDelayTimeMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、提高Producer发送速度\"><a href=\"#四、提高Producer发送速度\" class=\"headerlink\" title=\"四、提高Producer发送速度\"></a>四、提高Producer发送速度</h3><p><strong>途径1：</strong><br>增加Producer并发量，使用多个Producer实例同时发送</p>\n<p><strong>注意：</strong><br>不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。</p>\n<p><strong>途径2：</strong><br>可靠性要求不高的场景下，可以采用OneWay方式发送。<br>单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，<br>即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。</p>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnewayProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Instantiate with a producer group name.</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"example_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Launch the instance.</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class=\"line\">            Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> +</span><br><span class=\"line\">                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">//Call send message to deliver message to one of brokers.</span></span><br><span class=\"line\">            producer.sendOneway(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Shut down once the producer instance is not longer in use.</span></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Broker端进行消息过滤，提高吞吐量\"><a href=\"#一、Broker端进行消息过滤，提高吞吐量\" class=\"headerlink\" title=\"一、Broker端进行消息过滤，提高吞吐量\"></a>一、Broker端进行消息过滤，提高吞吐量</h3><p><strong>在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。</strong></p>\n<h5 id=\"过滤方式：\"><a href=\"#过滤方式：\" class=\"headerlink\" title=\"过滤方式：\"></a>过滤方式：</h5><p><strong>方式1：</strong><br>通过tag 和 key 进行过滤(在创建Message时设置）<br>Tag和 Key的主要差别是使用场景不同<br>Tag用在 Consumer的代码中，用来进行服务端消息过滤<br>Key 主要用于通过命令行查询消息 。</p>\n<p><strong>方式2：</strong><br>通过sql表达式的方式进行过滤</p>\n<p>SqlProducer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String tag;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> div = i % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (div == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagA\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (div == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagB\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagC\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                    tag,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class=\"line\">                );</span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"a\"</span>, String.valueOf(i));</span><br><span class=\"line\"></span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SqlConsumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MessageSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_4\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                MessageSelector.bySql(<span class=\"string\">\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"and (a is not null and a between 0  3)\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式3：</strong><br>Filter Server方式过滤</p>\n<p>producer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6000000</span>; i++) &#123;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicFilter7\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID001\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\"></span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"SequenceId\"</span>, String.valueOf(i));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>consumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.MixAll;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException, IOException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupNamecc4\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        File classFile = <span class=\"keyword\">new</span> File(classLoader.getResource(<span class=\"string\">\"MessageFilterImpl.java\"</span>).getFile());</span><br><span class=\"line\"></span><br><span class=\"line\">        String filterCode = MixAll.file2String(classFile);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"org.apache.rocketmq.example.filter.MessageFilterImpl\"</span>,</span><br><span class=\"line\">            filterCode);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"二、提高Consumer处理能力\"><a href=\"#二、提高Consumer处理能力\" class=\"headerlink\" title=\"二、提高Consumer处理能力\"></a>二、提高Consumer处理能力</h3><p><strong>1.提高消费并行度</strong><br>方式1：增加consumer实例<br>方式2：提高单个 Consumer 实例中的并行处理的线程数<br>（修改 consumeThreadMin 和 consumeThreadMax)</p>\n<p><strong>2.批量方式进行消费</strong><br>设置 Consumer 的 consumeMessageBatchMaxSize<br>这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表</p>\n<p><strong>注意：</strong><br>broker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加<br>该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条</p>\n<p><strong>3.检测延时情况，跳过非重要消息</strong><br>Consumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积<br>这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度</p>\n<h3 id=\"三、Consumer负载均衡\"><a href=\"#三、Consumer负载均衡\" class=\"headerlink\" title=\"三、Consumer负载均衡\"></a>三、Consumer负载均衡</h3><p><strong>DefaultMQPushConsumer的负载均衡：</strong><br>负载均衡过程不需要使用者操心，客户端程序会自动处理<br>每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace</p>\n<p><strong>注意：</strong><br>负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)<br>负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。<br>3m2c: 2 1<br>3m4c: 1 1 1 0<br>可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。</p>\n<p><strong>DefaultMQPullConsumer 的负载均衡：</strong><br><strong>1.通过registerMessageQueueListener 函数</strong><br>registerMessageQueueListener函数在有新的Consumer加入或退出时被触发。 </p>\n<p><strong>2.通过MQPullConsumerScheduleService类</strong><br>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullScheduleService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> MQPullConsumerScheduleService scheduleService = <span class=\"keyword\">new</span> MQPullConsumerScheduleService(<span class=\"string\">\"GroupName1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\">        scheduleService.registerPullTaskCallback(<span class=\"string\">\"TopicTest\"</span>, <span class=\"keyword\">new</span> PullTaskCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPullTask</span><span class=\"params\">(MessageQueue mq, PullTaskContext context)</span> </span>&#123;</span><br><span class=\"line\">                MQPullConsumer consumer = context.getPullConsumer();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> offset = consumer.fetchConsumeOffset(mq, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        offset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    PullResult pullResult = consumer.pull(mq, <span class=\"string\">\"*\"</span>, offset, <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, offset + <span class=\"string\">\"\\t\"</span> + mq + <span class=\"string\">\"\\t\"</span> + pullResult);</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\"></span><br><span class=\"line\">                    context.setPullNextDelayTimeMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、提高Producer发送速度\"><a href=\"#四、提高Producer发送速度\" class=\"headerlink\" title=\"四、提高Producer发送速度\"></a>四、提高Producer发送速度</h3><p><strong>途径1：</strong><br>增加Producer并发量，使用多个Producer实例同时发送</p>\n<p><strong>注意：</strong><br>不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。</p>\n<p><strong>途径2：</strong><br>可靠性要求不高的场景下，可以采用OneWay方式发送。<br>单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，<br>即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。</p>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnewayProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Instantiate with a producer group name.</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"example_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Launch the instance.</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class=\"line\">            Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> +</span><br><span class=\"line\">                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">//Call send message to deliver message to one of brokers.</span></span><br><span class=\"line\">            producer.sendOneway(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Shut down once the producer instance is not longer in use.</span></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"RocketMQ角色详解之Consumer","date":"2020-01-09T12:33:45.000Z","_content":"### 一、常用Consumer类\n- DefaultMQPushConsumer\n- DefaultMQPullConsumer\n\n**二者的区别：**\nDefaultMQPushConsumer：\n系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高\nDefaultMQPullConsumer：\n读取操作中的大部分功能由使用者自主控制 ，灵活性更高。\n\n两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。\n\n\n### 二、DefaultMQPushConsumer的使用\n##### 主要参数的设置：\n- ConsumerGroupName\n- NameServer地址及端口号\n- Topic\n\n**ConsumerGroupName**\n\n通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用\n\nMessageModel = Clustering时，\n在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。\n\nMessageModel = Broadcasting时，\n同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。\n\n**NameServer地址及端口号**\n可以填写多个 ，用分号隔开，用以消除单点故障\n如 “ip1:port;ip2:port;ip3 :port” \n\n**Topic**\nTopic名称用来标识消息类型， 需要提前创建。\n如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。\n\n**参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息**\n##### 详细代码如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class PushConsumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_JODIE_1\");\n        consumer.subscribe(\"Jodie_topic_1023\", \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setConsumeTimestamp(\"20170422221800\");\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n### DefaultMQPullConsumer的使用\nDefaultMQPullConsumer对消息队列的主要处理流程如下：\n\n 1. 获取Message Queue并遍历\n 2. 维护Offsetstore\n 3. 根据不同消息状态做不同的处理\n\n具体代码参考如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\npublic class PullConsumer {\n    private static final Map<MessageQueue, Long> OFFSE_TABLE = new HashMap<MessageQueue, Long>();\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(\"please_rename_unique_group_name_5\");\n\n        consumer.start();\n\n        Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(\"TopicTest1\");\n        for (MessageQueue mq : mqs) {\n            System.out.printf(\"Consume from the queue: %s%n\", mq);\n            SINGLE_MQ:\n            while (true) {\n                try {\n                    PullResult pullResult =\n                        consumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);\n                    System.out.printf(\"%s%n\", pullResult);\n                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                            break SINGLE_MQ;\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        consumer.shutdown();\n    }\n\n    private static long getMessageQueueOffset(MessageQueue mq) {\n        Long offset = OFFSE_TABLE.get(mq);\n        if (offset != null)\n            return offset;\n\n        return 0;\n    }\n\n    private static void putMessageQueueOffset(MessageQueue mq, long offset) {\n        OFFSE_TABLE.put(mq, offset);\n    }\n\n}\n```\n","source":"_posts/RocketMQ角色详解之Consumer.md","raw":"---\ntitle: RocketMQ角色详解之Consumer\ndate: 2020-01-09 20:33:45\ntags:\n---\n### 一、常用Consumer类\n- DefaultMQPushConsumer\n- DefaultMQPullConsumer\n\n**二者的区别：**\nDefaultMQPushConsumer：\n系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高\nDefaultMQPullConsumer：\n读取操作中的大部分功能由使用者自主控制 ，灵活性更高。\n\n两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。\n\n\n### 二、DefaultMQPushConsumer的使用\n##### 主要参数的设置：\n- ConsumerGroupName\n- NameServer地址及端口号\n- Topic\n\n**ConsumerGroupName**\n\n通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用\n\nMessageModel = Clustering时，\n在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。\n\nMessageModel = Broadcasting时，\n同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。\n\n**NameServer地址及端口号**\n可以填写多个 ，用分号隔开，用以消除单点故障\n如 “ip1:port;ip2:port;ip3 :port” \n\n**Topic**\nTopic名称用来标识消息类型， 需要提前创建。\n如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。\n\n**参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息**\n##### 详细代码如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class PushConsumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_JODIE_1\");\n        consumer.subscribe(\"Jodie_topic_1023\", \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setConsumeTimestamp(\"20170422221800\");\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n### DefaultMQPullConsumer的使用\nDefaultMQPullConsumer对消息队列的主要处理流程如下：\n\n 1. 获取Message Queue并遍历\n 2. 维护Offsetstore\n 3. 根据不同消息状态做不同的处理\n\n具体代码参考如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\npublic class PullConsumer {\n    private static final Map<MessageQueue, Long> OFFSE_TABLE = new HashMap<MessageQueue, Long>();\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(\"please_rename_unique_group_name_5\");\n\n        consumer.start();\n\n        Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(\"TopicTest1\");\n        for (MessageQueue mq : mqs) {\n            System.out.printf(\"Consume from the queue: %s%n\", mq);\n            SINGLE_MQ:\n            while (true) {\n                try {\n                    PullResult pullResult =\n                        consumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);\n                    System.out.printf(\"%s%n\", pullResult);\n                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                            break SINGLE_MQ;\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        consumer.shutdown();\n    }\n\n    private static long getMessageQueueOffset(MessageQueue mq) {\n        Long offset = OFFSE_TABLE.get(mq);\n        if (offset != null)\n            return offset;\n\n        return 0;\n    }\n\n    private static void putMessageQueueOffset(MessageQueue mq, long offset) {\n        OFFSE_TABLE.put(mq, offset);\n    }\n\n}\n```\n","slug":"RocketMQ角色详解之Consumer","published":1,"updated":"2020-01-10T03:01:01.797Z","_id":"ck57kot6y00024lz0cu9g1ngf","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、常用Consumer类\"><a href=\"#一、常用Consumer类\" class=\"headerlink\" title=\"一、常用Consumer类\"></a>一、常用Consumer类</h3><ul>\n<li>DefaultMQPushConsumer</li>\n<li>DefaultMQPullConsumer</li>\n</ul>\n<p><strong>二者的区别：</strong><br>DefaultMQPushConsumer：<br>系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高<br>DefaultMQPullConsumer：<br>读取操作中的大部分功能由使用者自主控制 ，灵活性更高。</p>\n<p>两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。</p>\n<h3 id=\"二、DefaultMQPushConsumer的使用\"><a href=\"#二、DefaultMQPushConsumer的使用\" class=\"headerlink\" title=\"二、DefaultMQPushConsumer的使用\"></a>二、DefaultMQPushConsumer的使用</h3><h5 id=\"主要参数的设置：\"><a href=\"#主要参数的设置：\" class=\"headerlink\" title=\"主要参数的设置：\"></a>主要参数的设置：</h5><ul>\n<li>ConsumerGroupName</li>\n<li>NameServer地址及端口号</li>\n<li>Topic</li>\n</ul>\n<p><strong>ConsumerGroupName</strong></p>\n<p>通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用</p>\n<p>MessageModel = Clustering时，<br>在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。</p>\n<p>MessageModel = Broadcasting时，<br>同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。</p>\n<p><strong>NameServer地址及端口号</strong><br>可以填写多个 ，用分号隔开，用以消除单点故障<br>如 “ip1:port;ip2:port;ip3 :port” </p>\n<p><strong>Topic</strong><br>Topic名称用来标识消息类型， 需要提前创建。<br>如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。</p>\n<p><strong>参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息</strong></p>\n<h5 id=\"详细代码如下：\"><a href=\"#详细代码如下：\" class=\"headerlink\" title=\"详细代码如下：\"></a>详细代码如下：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PushConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"CID_JODIE_1\"</span>);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"Jodie_topic_1023\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">        consumer.setConsumeTimestamp(<span class=\"string\">\"20170422221800\"</span>);</span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefaultMQPullConsumer的使用\"><a href=\"#DefaultMQPullConsumer的使用\" class=\"headerlink\" title=\"DefaultMQPullConsumer的使用\"></a>DefaultMQPullConsumer的使用</h3><p>DefaultMQPullConsumer对消息队列的主要处理流程如下：</p>\n<ol>\n<li>获取Message Queue并遍历</li>\n<li>维护Offsetstore</li>\n<li>根据不同消息状态做不同的处理</li>\n</ol>\n<p>具体代码参考如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;MessageQueue, Long&gt; OFFSE_TABLE = <span class=\"keyword\">new</span> HashMap&lt;MessageQueue, Long&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPullConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPullConsumer(<span class=\"string\">\"please_rename_unique_group_name_5\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class=\"string\">\"TopicTest1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MessageQueue mq : mqs) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"Consume from the queue: %s%n\"</span>, mq);</span><br><span class=\"line\">            SINGLE_MQ:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    PullResult pullResult =</span><br><span class=\"line\">                        consumer.pullBlockIfNotFound(mq, <span class=\"keyword\">null</span>, getMessageQueueOffset(mq), <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, pullResult);</span><br><span class=\"line\">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span> SINGLE_MQ;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMessageQueueOffset</span><span class=\"params\">(MessageQueue mq)</span> </span>&#123;</span><br><span class=\"line\">        Long offset = OFFSE_TABLE.get(mq);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putMessageQueueOffset</span><span class=\"params\">(MessageQueue mq, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        OFFSE_TABLE.put(mq, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、常用Consumer类\"><a href=\"#一、常用Consumer类\" class=\"headerlink\" title=\"一、常用Consumer类\"></a>一、常用Consumer类</h3><ul>\n<li>DefaultMQPushConsumer</li>\n<li>DefaultMQPullConsumer</li>\n</ul>\n<p><strong>二者的区别：</strong><br>DefaultMQPushConsumer：<br>系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高<br>DefaultMQPullConsumer：<br>读取操作中的大部分功能由使用者自主控制 ，灵活性更高。</p>\n<p>两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。</p>\n<h3 id=\"二、DefaultMQPushConsumer的使用\"><a href=\"#二、DefaultMQPushConsumer的使用\" class=\"headerlink\" title=\"二、DefaultMQPushConsumer的使用\"></a>二、DefaultMQPushConsumer的使用</h3><h5 id=\"主要参数的设置：\"><a href=\"#主要参数的设置：\" class=\"headerlink\" title=\"主要参数的设置：\"></a>主要参数的设置：</h5><ul>\n<li>ConsumerGroupName</li>\n<li>NameServer地址及端口号</li>\n<li>Topic</li>\n</ul>\n<p><strong>ConsumerGroupName</strong></p>\n<p>通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用</p>\n<p>MessageModel = Clustering时，<br>在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。</p>\n<p>MessageModel = Broadcasting时，<br>同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。</p>\n<p><strong>NameServer地址及端口号</strong><br>可以填写多个 ，用分号隔开，用以消除单点故障<br>如 “ip1:port;ip2:port;ip3 :port” </p>\n<p><strong>Topic</strong><br>Topic名称用来标识消息类型， 需要提前创建。<br>如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。</p>\n<p><strong>参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息</strong></p>\n<h5 id=\"详细代码如下：\"><a href=\"#详细代码如下：\" class=\"headerlink\" title=\"详细代码如下：\"></a>详细代码如下：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PushConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"CID_JODIE_1\"</span>);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"Jodie_topic_1023\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">        consumer.setConsumeTimestamp(<span class=\"string\">\"20170422221800\"</span>);</span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefaultMQPullConsumer的使用\"><a href=\"#DefaultMQPullConsumer的使用\" class=\"headerlink\" title=\"DefaultMQPullConsumer的使用\"></a>DefaultMQPullConsumer的使用</h3><p>DefaultMQPullConsumer对消息队列的主要处理流程如下：</p>\n<ol>\n<li>获取Message Queue并遍历</li>\n<li>维护Offsetstore</li>\n<li>根据不同消息状态做不同的处理</li>\n</ol>\n<p>具体代码参考如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;MessageQueue, Long&gt; OFFSE_TABLE = <span class=\"keyword\">new</span> HashMap&lt;MessageQueue, Long&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPullConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPullConsumer(<span class=\"string\">\"please_rename_unique_group_name_5\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class=\"string\">\"TopicTest1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MessageQueue mq : mqs) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"Consume from the queue: %s%n\"</span>, mq);</span><br><span class=\"line\">            SINGLE_MQ:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    PullResult pullResult =</span><br><span class=\"line\">                        consumer.pullBlockIfNotFound(mq, <span class=\"keyword\">null</span>, getMessageQueueOffset(mq), <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, pullResult);</span><br><span class=\"line\">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span> SINGLE_MQ;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMessageQueueOffset</span><span class=\"params\">(MessageQueue mq)</span> </span>&#123;</span><br><span class=\"line\">        Long offset = OFFSE_TABLE.get(mq);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putMessageQueueOffset</span><span class=\"params\">(MessageQueue mq, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        OFFSE_TABLE.put(mq, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"RocketMQ概述","date":"2020-01-09T12:23:31.000Z","_content":"## 一、什么是RocketMQ？\nRocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件\n\n**什么是企业级分布式消息中间件？**\n简单来说就是升级版的消息队列，而且它要满足如下功能\n\n- 消除单点故障\n- 保证消息传输可靠性\n- 可应对大流量冲击\n\n## 二、RocketMQ的功能介绍\n\n 1. 应用解耦\n 2. 流量削峰\n 3. 消息分发\n\n**应用解耦**\n以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。 \n当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。\n\n**流量削峰**\n每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。 \n通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。\n\n**消息分发**\n不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。\n甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n## 三、RocketMQ的前身今世\n- 2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。\n- 2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。\n- 2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。\n- 2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的\n里程碑 ，同时 RocketMQ 进入 Apache 孵化 。\n\n## 四、RocketMQ各部分角色概述\nRocketMQ的角色划分可以分为四类：\n\n- Producer\n- Consumer\n- Broker\n- NameServer\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。 \n现实生活中的邮政系统要正常运行，离不开这四个角色， \n- 发信者（Producer）\n- 收信者（Consumer）\n- 负责暂存 、 传输的邮局（Broker）\n- 负责协调各个地方邮局的管理机构 （NameServer）\n\n启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。\n同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。\n\n**名词补充：**\n- **Topic:**\n一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 \n- **Message Queue:** \n如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。\nTopic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。\n","source":"_posts/RocketMQ概述.md","raw":"---\ntitle: RocketMQ概述\ndate: 2020-01-09 20:23:31\ntags:\n---\n## 一、什么是RocketMQ？\nRocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件\n\n**什么是企业级分布式消息中间件？**\n简单来说就是升级版的消息队列，而且它要满足如下功能\n\n- 消除单点故障\n- 保证消息传输可靠性\n- 可应对大流量冲击\n\n## 二、RocketMQ的功能介绍\n\n 1. 应用解耦\n 2. 流量削峰\n 3. 消息分发\n\n**应用解耦**\n以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。 \n当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。\n\n**流量削峰**\n每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。 \n通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。\n\n**消息分发**\n不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。\n甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n## 三、RocketMQ的前身今世\n- 2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。\n- 2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。\n- 2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。\n- 2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的\n里程碑 ，同时 RocketMQ 进入 Apache 孵化 。\n\n## 四、RocketMQ各部分角色概述\nRocketMQ的角色划分可以分为四类：\n\n- Producer\n- Consumer\n- Broker\n- NameServer\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。 \n现实生活中的邮政系统要正常运行，离不开这四个角色， \n- 发信者（Producer）\n- 收信者（Consumer）\n- 负责暂存 、 传输的邮局（Broker）\n- 负责协调各个地方邮局的管理机构 （NameServer）\n\n启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。\n同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。\n\n**名词补充：**\n- **Topic:**\n一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 \n- **Message Queue:** \n如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。\nTopic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。\n","slug":"RocketMQ概述","published":1,"updated":"2020-01-09T12:24:31.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot6z00034lz0779z2fll","content":"<h2 id=\"一、什么是RocketMQ？\"><a href=\"#一、什么是RocketMQ？\" class=\"headerlink\" title=\"一、什么是RocketMQ？\"></a>一、什么是RocketMQ？</h2><p>RocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件</p>\n<p><strong>什么是企业级分布式消息中间件？</strong><br>简单来说就是升级版的消息队列，而且它要满足如下功能</p>\n<ul>\n<li>消除单点故障</li>\n<li>保证消息传输可靠性</li>\n<li>可应对大流量冲击</li>\n</ul>\n<h2 id=\"二、RocketMQ的功能介绍\"><a href=\"#二、RocketMQ的功能介绍\" class=\"headerlink\" title=\"二、RocketMQ的功能介绍\"></a>二、RocketMQ的功能介绍</h2><ol>\n<li>应用解耦</li>\n<li>流量削峰</li>\n<li>消息分发</li>\n</ol>\n<p><strong>应用解耦</strong><br>以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。<br><img src=\"https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。<br>当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。</p>\n<p><strong>流量削峰</strong><br>每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。<br>通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。</p>\n<p><strong>消息分发</strong><br>不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。<br>甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。<br><img src=\"https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"三、RocketMQ的前身今世\"><a href=\"#三、RocketMQ的前身今世\" class=\"headerlink\" title=\"三、RocketMQ的前身今世\"></a>三、RocketMQ的前身今世</h2><ul>\n<li>2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。</li>\n<li>2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。</li>\n<li>2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。</li>\n<li>2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的<br>里程碑 ，同时 RocketMQ 进入 Apache 孵化 。</li>\n</ul>\n<h2 id=\"四、RocketMQ各部分角色概述\"><a href=\"#四、RocketMQ各部分角色概述\" class=\"headerlink\" title=\"四、RocketMQ各部分角色概述\"></a>四、RocketMQ各部分角色概述</h2><p>RocketMQ的角色划分可以分为四类：</p>\n<ul>\n<li>Producer</li>\n<li>Consumer</li>\n<li>Broker</li>\n<li>NameServer</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。<br>现实生活中的邮政系统要正常运行，离不开这四个角色， </p>\n<ul>\n<li>发信者（Producer）</li>\n<li>收信者（Consumer）</li>\n<li>负责暂存 、 传输的邮局（Broker）</li>\n<li>负责协调各个地方邮局的管理机构 （NameServer）</li>\n</ul>\n<p>启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 </p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。<br>同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。</p>\n<p><strong>名词补充：</strong></p>\n<ul>\n<li><strong>Topic:</strong><br>一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 </li>\n<li><strong>Message Queue:</strong><br>如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。<br>Topic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是RocketMQ？\"><a href=\"#一、什么是RocketMQ？\" class=\"headerlink\" title=\"一、什么是RocketMQ？\"></a>一、什么是RocketMQ？</h2><p>RocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件</p>\n<p><strong>什么是企业级分布式消息中间件？</strong><br>简单来说就是升级版的消息队列，而且它要满足如下功能</p>\n<ul>\n<li>消除单点故障</li>\n<li>保证消息传输可靠性</li>\n<li>可应对大流量冲击</li>\n</ul>\n<h2 id=\"二、RocketMQ的功能介绍\"><a href=\"#二、RocketMQ的功能介绍\" class=\"headerlink\" title=\"二、RocketMQ的功能介绍\"></a>二、RocketMQ的功能介绍</h2><ol>\n<li>应用解耦</li>\n<li>流量削峰</li>\n<li>消息分发</li>\n</ol>\n<p><strong>应用解耦</strong><br>以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。<br><img src=\"https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。<br>当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。</p>\n<p><strong>流量削峰</strong><br>每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。<br>通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。</p>\n<p><strong>消息分发</strong><br>不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。<br>甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。<br><img src=\"https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"三、RocketMQ的前身今世\"><a href=\"#三、RocketMQ的前身今世\" class=\"headerlink\" title=\"三、RocketMQ的前身今世\"></a>三、RocketMQ的前身今世</h2><ul>\n<li>2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。</li>\n<li>2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。</li>\n<li>2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。</li>\n<li>2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的<br>里程碑 ，同时 RocketMQ 进入 Apache 孵化 。</li>\n</ul>\n<h2 id=\"四、RocketMQ各部分角色概述\"><a href=\"#四、RocketMQ各部分角色概述\" class=\"headerlink\" title=\"四、RocketMQ各部分角色概述\"></a>四、RocketMQ各部分角色概述</h2><p>RocketMQ的角色划分可以分为四类：</p>\n<ul>\n<li>Producer</li>\n<li>Consumer</li>\n<li>Broker</li>\n<li>NameServer</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。<br>现实生活中的邮政系统要正常运行，离不开这四个角色， </p>\n<ul>\n<li>发信者（Producer）</li>\n<li>收信者（Consumer）</li>\n<li>负责暂存 、 传输的邮局（Broker）</li>\n<li>负责协调各个地方邮局的管理机构 （NameServer）</li>\n</ul>\n<p>启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 </p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。<br>同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。</p>\n<p><strong>名词补充：</strong></p>\n<ul>\n<li><strong>Topic:</strong><br>一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 </li>\n<li><strong>Message Queue:</strong><br>如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。<br>Topic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。</li>\n</ul>\n"},{"title":"RocketMQ的环境搭建与相关配置","date":"2020-01-09T12:31:25.000Z","_content":"## 一、RocketMQ的下载\n[http://rocketmq.apache.org/dowloading/releases/](http://rocketmq.apache.org/dowloading/releases/)\n\n## 二、RocketMQ环境搭建\n搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里**搭建一个双主 、 双从 、 无单点故障**的高可用 RocketMQ集群 。\n\n#### 材料准备\n两台物理机（这里我采用了两台虚拟机）\n主机地址：\n192.168.223.41 node01\n192.168.223.42 node02\n\n#### 配置步骤\n**1.解压文件**\nunzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin\n\n**2.启动两机器的nameserver**\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n\n**3.broker配置文件**\n\n**双master配置：**\n\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties\n\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-a\n```\n\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n\n**双slave配置：**\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nlistenPort=11011\nstorePathRootDir=/home/rocketmq/store-a\n```\n**4.启动4个broker：**\n命令：nohup sh ./bin/mqbroker –c config_file &\n\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &\n\njps查看效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n**5.查看集群状态**\n可采用图形化界面管理\nhttps://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\n图形化界面配置过程参考：\nhttps://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\n\n\n## 三、相关配置参数介绍\n\n- namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876 \n\tNamerServer 的地址，可以是多个 。 \n- brokerClusterName=DefaultCluster \n\tCluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业\t务 群使用 。 \n-  brokerName=broker- a \n\tBroker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 \n- brokerid=0\n\t一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 \n- fileReservedTime=48 \n\t在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 \n- deleteWhen=04 \n\t与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 \n- brokerRole=SYNC MASTER \n\tbrokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。 \n\t前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步\t复制\n- flushDiskType=ASYNC FLUSH \n\tflushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷 \t盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况\t下，消息写入 page_cache 后就返回成功状态 。 \n- listenPort=l0911\n\tBroker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号， \t避免冲突 。\n- storePathRootDir=/home/rocketmq/store - a \n\t存储消息以及一些配置信息的根目录 。 \n\n## 四、配置过程踩过的一些坑\n**坑1：**\n下载不同版本rocketmq时，要注意其要求的jdk版本\n原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数\n\n**坑2**：\n启动mqnamesev时候报：\t\nJava HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)\n则需要调整rocketMQ的内存\n\n```java\nvim bin/runserver.sh \nJAVA_OPT=\"${JAVA_OPT} -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\" \n```\n-Xms 的值一定要比 -Xmx 要小不让，也会报错：\nInitial heap size set to a larger value than the maximum heap size\n\n启动mqbroker时报，则修改:\n```java\nvim bin/runbroker.sh\nJAVA_OPT=\"${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m\"\n```\n\n\n","source":"_posts/RocketMQ的环境搭建与相关配置.md","raw":"---\ntitle: RocketMQ的环境搭建与相关配置\ndate: 2020-01-09 20:31:25\ntags:\n---\n## 一、RocketMQ的下载\n[http://rocketmq.apache.org/dowloading/releases/](http://rocketmq.apache.org/dowloading/releases/)\n\n## 二、RocketMQ环境搭建\n搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里**搭建一个双主 、 双从 、 无单点故障**的高可用 RocketMQ集群 。\n\n#### 材料准备\n两台物理机（这里我采用了两台虚拟机）\n主机地址：\n192.168.223.41 node01\n192.168.223.42 node02\n\n#### 配置步骤\n**1.解压文件**\nunzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin\n\n**2.启动两机器的nameserver**\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n\n**3.broker配置文件**\n\n**双master配置：**\n\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties\n\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-a\n```\n\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n\n**双slave配置：**\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nlistenPort=11011\nstorePathRootDir=/home/rocketmq/store-a\n```\n**4.启动4个broker：**\n命令：nohup sh ./bin/mqbroker –c config_file &\n\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &\n\njps查看效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n**5.查看集群状态**\n可采用图形化界面管理\nhttps://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\n图形化界面配置过程参考：\nhttps://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\n\n\n## 三、相关配置参数介绍\n\n- namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876 \n\tNamerServer 的地址，可以是多个 。 \n- brokerClusterName=DefaultCluster \n\tCluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业\t务 群使用 。 \n-  brokerName=broker- a \n\tBroker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 \n- brokerid=0\n\t一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 \n- fileReservedTime=48 \n\t在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 \n- deleteWhen=04 \n\t与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 \n- brokerRole=SYNC MASTER \n\tbrokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。 \n\t前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步\t复制\n- flushDiskType=ASYNC FLUSH \n\tflushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷 \t盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况\t下，消息写入 page_cache 后就返回成功状态 。 \n- listenPort=l0911\n\tBroker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号， \t避免冲突 。\n- storePathRootDir=/home/rocketmq/store - a \n\t存储消息以及一些配置信息的根目录 。 \n\n## 四、配置过程踩过的一些坑\n**坑1：**\n下载不同版本rocketmq时，要注意其要求的jdk版本\n原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数\n\n**坑2**：\n启动mqnamesev时候报：\t\nJava HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)\n则需要调整rocketMQ的内存\n\n```java\nvim bin/runserver.sh \nJAVA_OPT=\"${JAVA_OPT} -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\" \n```\n-Xms 的值一定要比 -Xmx 要小不让，也会报错：\nInitial heap size set to a larger value than the maximum heap size\n\n启动mqbroker时报，则修改:\n```java\nvim bin/runbroker.sh\nJAVA_OPT=\"${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m\"\n```\n\n\n","slug":"RocketMQ的环境搭建与相关配置","published":1,"updated":"2020-01-09T12:31:45.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot6z00044lz05pbb9ro0","content":"<h2 id=\"一、RocketMQ的下载\"><a href=\"#一、RocketMQ的下载\" class=\"headerlink\" title=\"一、RocketMQ的下载\"></a>一、RocketMQ的下载</h2><p><a href=\"http://rocketmq.apache.org/dowloading/releases/\" target=\"_blank\" rel=\"noopener\">http://rocketmq.apache.org/dowloading/releases/</a></p>\n<h2 id=\"二、RocketMQ环境搭建\"><a href=\"#二、RocketMQ环境搭建\" class=\"headerlink\" title=\"二、RocketMQ环境搭建\"></a>二、RocketMQ环境搭建</h2><p>搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里<strong>搭建一个双主 、 双从 、 无单点故障</strong>的高可用 RocketMQ集群 。</p>\n<h4 id=\"材料准备\"><a href=\"#材料准备\" class=\"headerlink\" title=\"材料准备\"></a>材料准备</h4><p>两台物理机（这里我采用了两台虚拟机）<br>主机地址：<br>192.168.223.41 node01<br>192.168.223.42 node02</p>\n<h4 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h4><p><strong>1.解压文件</strong><br>unzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin</p>\n<p><strong>2.启动两机器的nameserver</strong><br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;</p>\n<p><strong>3.broker配置文件</strong></p>\n<p><strong>双master配置：</strong></p>\n<p>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n\n<p><strong>双slave配置：</strong><br>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SLAVE</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">11011</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n<p><strong>4.启动4个broker：</strong><br>命令：nohup sh ./bin/mqbroker –c config_file &amp;</p>\n<p>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &amp;<br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &amp;</p>\n<p>jps查看效果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>5.查看集群状态</strong><br>可采用图形化界面管理<br><a href=\"https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console</a><br>图形化界面配置过程参考：<br><a href=\"https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6</a></p>\n<h2 id=\"三、相关配置参数介绍\"><a href=\"#三、相关配置参数介绍\" class=\"headerlink\" title=\"三、相关配置参数介绍\"></a>三、相关配置参数介绍</h2><ul>\n<li>namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876<br>  NamerServer 的地址，可以是多个 。 </li>\n<li>brokerClusterName=DefaultCluster<br>  Cluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业    务 群使用 。 </li>\n<li>brokerName=broker- a<br> Broker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 </li>\n<li>brokerid=0<br>  一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 </li>\n<li>fileReservedTime=48<br>  在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 </li>\n<li>deleteWhen=04<br>  与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 </li>\n<li>brokerRole=SYNC MASTER<br>  brokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。<br>  前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步    复制</li>\n<li>flushDiskType=ASYNC FLUSH<br>  flushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷     盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况    下，消息写入 page_cache 后就返回成功状态 。 </li>\n<li>listenPort=l0911<br>  Broker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号，     避免冲突 。</li>\n<li>storePathRootDir=/home/rocketmq/store - a<br>  存储消息以及一些配置信息的根目录 。 </li>\n</ul>\n<h2 id=\"四、配置过程踩过的一些坑\"><a href=\"#四、配置过程踩过的一些坑\" class=\"headerlink\" title=\"四、配置过程踩过的一些坑\"></a>四、配置过程踩过的一些坑</h2><p><strong>坑1：</strong><br>下载不同版本rocketmq时，要注意其要求的jdk版本<br>原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数</p>\n<p><strong>坑2</strong>：<br>启动mqnamesev时候报：<br>Java HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error=’Cannot allocate memory’ (errno=12)<br>则需要调整rocketMQ的内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runserver.sh </span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\"</span></span><br></pre></td></tr></table></figure>\n<p>-Xms 的值一定要比 -Xmx 要小不让，也会报错：<br>Initial heap size set to a larger value than the maximum heap size</p>\n<p>启动mqbroker时报，则修改:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runbroker.sh</span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m\"</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、RocketMQ的下载\"><a href=\"#一、RocketMQ的下载\" class=\"headerlink\" title=\"一、RocketMQ的下载\"></a>一、RocketMQ的下载</h2><p><a href=\"http://rocketmq.apache.org/dowloading/releases/\" target=\"_blank\" rel=\"noopener\">http://rocketmq.apache.org/dowloading/releases/</a></p>\n<h2 id=\"二、RocketMQ环境搭建\"><a href=\"#二、RocketMQ环境搭建\" class=\"headerlink\" title=\"二、RocketMQ环境搭建\"></a>二、RocketMQ环境搭建</h2><p>搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里<strong>搭建一个双主 、 双从 、 无单点故障</strong>的高可用 RocketMQ集群 。</p>\n<h4 id=\"材料准备\"><a href=\"#材料准备\" class=\"headerlink\" title=\"材料准备\"></a>材料准备</h4><p>两台物理机（这里我采用了两台虚拟机）<br>主机地址：<br>192.168.223.41 node01<br>192.168.223.42 node02</p>\n<h4 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h4><p><strong>1.解压文件</strong><br>unzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin</p>\n<p><strong>2.启动两机器的nameserver</strong><br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;</p>\n<p><strong>3.broker配置文件</strong></p>\n<p><strong>双master配置：</strong></p>\n<p>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n\n<p><strong>双slave配置：</strong><br>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SLAVE</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">11011</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n<p><strong>4.启动4个broker：</strong><br>命令：nohup sh ./bin/mqbroker –c config_file &amp;</p>\n<p>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &amp;<br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &amp;</p>\n<p>jps查看效果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>5.查看集群状态</strong><br>可采用图形化界面管理<br><a href=\"https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console</a><br>图形化界面配置过程参考：<br><a href=\"https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6</a></p>\n<h2 id=\"三、相关配置参数介绍\"><a href=\"#三、相关配置参数介绍\" class=\"headerlink\" title=\"三、相关配置参数介绍\"></a>三、相关配置参数介绍</h2><ul>\n<li>namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876<br>  NamerServer 的地址，可以是多个 。 </li>\n<li>brokerClusterName=DefaultCluster<br>  Cluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业    务 群使用 。 </li>\n<li>brokerName=broker- a<br> Broker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 </li>\n<li>brokerid=0<br>  一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 </li>\n<li>fileReservedTime=48<br>  在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 </li>\n<li>deleteWhen=04<br>  与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 </li>\n<li>brokerRole=SYNC MASTER<br>  brokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。<br>  前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步    复制</li>\n<li>flushDiskType=ASYNC FLUSH<br>  flushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷     盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况    下，消息写入 page_cache 后就返回成功状态 。 </li>\n<li>listenPort=l0911<br>  Broker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号，     避免冲突 。</li>\n<li>storePathRootDir=/home/rocketmq/store - a<br>  存储消息以及一些配置信息的根目录 。 </li>\n</ul>\n<h2 id=\"四、配置过程踩过的一些坑\"><a href=\"#四、配置过程踩过的一些坑\" class=\"headerlink\" title=\"四、配置过程踩过的一些坑\"></a>四、配置过程踩过的一些坑</h2><p><strong>坑1：</strong><br>下载不同版本rocketmq时，要注意其要求的jdk版本<br>原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数</p>\n<p><strong>坑2</strong>：<br>启动mqnamesev时候报：<br>Java HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error=’Cannot allocate memory’ (errno=12)<br>则需要调整rocketMQ的内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runserver.sh </span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\"</span></span><br></pre></td></tr></table></figure>\n<p>-Xms 的值一定要比 -Xmx 要小不让，也会报错：<br>Initial heap size set to a larger value than the maximum heap size</p>\n<p>启动mqbroker时报，则修改:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runbroker.sh</span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m\"</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"RocketMQ角色详解之Producer","date":"2020-01-09T12:33:44.000Z","_content":"### 一、常用Producer类\n最常用的producer类就是DefaultMQProducer，具体使用看下文\n\n### 二、DefaultMQProducer的消息发送步骤\n\n 1. 设置 ProducerGroupName\n 2. 设置 lnstanceName\n 3. 设置发送失败重试次数\n 4. 设置 NameServer 地址\n 5. 组装消息并发送\n\n**具体代码参考如下：**\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.setInstanceName(\"p1\");\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setNamesrvAddr(\"192.128.122.123:9876;192.128.122.124:9876;\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n\n```\n\n### 三、消息发送方式\n**1.同步发送**\nDefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：\n\n    SEND_OK\n    FLUSH_DISK_TIMEOUT\n    FLUSH_SLAVE_TIMEOUT\n    SLAVE_NOT_AVAILABLE\n    需要结合配置的刷盘策略、主从策略来理解其含义\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n```\n**2.异步发送**\nDefaultMQProducer异步发送消息可参考如下代码：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class AsyncProducer {\n    public static void main(\n        String[] args) throws MQClientException, InterruptedException, UnsupportedEncodingException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"Jodie_Daily_test\");\n        producer.start();\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n\n        int messageCount = 100;\n        final CountDownLatch countDownLatch = new CountDownLatch(messageCount);\n        for (int i = 0; i < messageCount; i++) {\n            try {\n                final int index = i;\n                Message msg = new Message(\"Jodie_topic_1023\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d OK %s %n\", index, sendResult.getMsgId());\n                    }\n\n                    @Override\n                    public void onException(Throwable e) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d Exception %s %n\", index, e);\n                        e.printStackTrace();\n                    }\n                });\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        producer.shutdown();\n    }\n}\n```\n**3.延迟发送**\nDefaultMQProducer延迟发送使用方法：\n\n    在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send\n\n注意：\n```java\n延迟发送仅支持预设值的时间长度：1s/5s/1Os/30s/Im/2m/3m/4m/5m/6m/ 7m/8m/9m/1Om/20m/30m/1h/2h\n如setDelayTimeLevel(3)表示延迟 10s\n```\n**4.事务消息发送**\nDefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。\n```java\n场景：\nA 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。\n\nTransactionMQProducer 处理流程是：\n1.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。\n2.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息\n3.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。\n若二次确认未到达RocketMQ，则发起回查请求\n```\n详细参考代码如下：\n\n**TransactionProducer**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.client.producer.TransactionMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class TransactionProducer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        TransactionListener transactionListener = new TransactionListenerImpl();\n        TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r);\n                thread.setName(\"client-transaction-msg-check-thread\");\n                return thread;\n            }\n        });\n\n        producer.setExecutorService(executorService);\n        producer.setTransactionListener(transactionListener);\n        producer.start();\n\n        String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n        for (int i = 0; i < 10; i++) {\n            try {\n                Message msg =\n                    new Message(\"TopicTest1234\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n                System.out.printf(\"%s%n\", sendResult);\n\n                Thread.sleep(10);\n            } catch (MQClientException | UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        for (int i = 0; i < 100000; i++) {\n            Thread.sleep(1000);\n        }\n        producer.shutdown();\n    }\n}\n```\n\n**TransactionListenerImpl**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.producer.LocalTransactionState;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class TransactionListenerImpl implements TransactionListener {\n    private AtomicInteger transactionIndex = new AtomicInteger(0);\n\n    private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\n    @Override\n    public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        int value = transactionIndex.getAndIncrement();\n        int status = value % 3;\n        localTrans.put(msg.getTransactionId(), status);\n        return LocalTransactionState.UNKNOW;\n    }\n\n    @Override\n    public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n        Integer status = localTrans.get(msg.getTransactionId());\n        if (null != status) {\n            switch (status) {\n                case 0:\n                    return LocalTransactionState.UNKNOW;\n                case 1:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n                case 2:\n                    return LocalTransactionState.ROLLBACK_MESSAGE;\n                default:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n            }\n        }\n        return LocalTransactionState.COMMIT_MESSAGE;\n    }\n}\n\n```\n\n### 四、自定义消息发送规则\n**背景：**\n```java\n一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。\n若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector\n```\n**解决思路：**\n```java\n发送消息的时候，将 MessageQueueSelector 的对象作为参数，\n在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。\n\n使用public SendResult send(Message msg, MessageQueueSelector selector, Object arg)函数发送消息\n```\n\n**具体参考代码如下：**\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\n\npublic class Producer {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        try {\n            MQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n            producer.start();\n\n            String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n            for (int i = 0; i < 100; i++) {\n                int orderId = i % 10;\n                Message msg =\n                    new Message(\"TopicTestjjj\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        Integer id = (Integer) arg;\n                        int index = id % mqs.size();\n                        return mqs.get(index);\n                    }\n                }, orderId);\n\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n            producer.shutdown();\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n","source":"_posts/RocketMQ角色详解之Producer.md","raw":"---\ntitle: RocketMQ角色详解之Producer\ndate: 2020-01-09 20:33:44\ntags:\n---\n### 一、常用Producer类\n最常用的producer类就是DefaultMQProducer，具体使用看下文\n\n### 二、DefaultMQProducer的消息发送步骤\n\n 1. 设置 ProducerGroupName\n 2. 设置 lnstanceName\n 3. 设置发送失败重试次数\n 4. 设置 NameServer 地址\n 5. 组装消息并发送\n\n**具体代码参考如下：**\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.setInstanceName(\"p1\");\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setNamesrvAddr(\"192.128.122.123:9876;192.128.122.124:9876;\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n\n```\n\n### 三、消息发送方式\n**1.同步发送**\nDefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：\n\n    SEND_OK\n    FLUSH_DISK_TIMEOUT\n    FLUSH_SLAVE_TIMEOUT\n    SLAVE_NOT_AVAILABLE\n    需要结合配置的刷盘策略、主从策略来理解其含义\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n```\n**2.异步发送**\nDefaultMQProducer异步发送消息可参考如下代码：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class AsyncProducer {\n    public static void main(\n        String[] args) throws MQClientException, InterruptedException, UnsupportedEncodingException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"Jodie_Daily_test\");\n        producer.start();\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n\n        int messageCount = 100;\n        final CountDownLatch countDownLatch = new CountDownLatch(messageCount);\n        for (int i = 0; i < messageCount; i++) {\n            try {\n                final int index = i;\n                Message msg = new Message(\"Jodie_topic_1023\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d OK %s %n\", index, sendResult.getMsgId());\n                    }\n\n                    @Override\n                    public void onException(Throwable e) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d Exception %s %n\", index, e);\n                        e.printStackTrace();\n                    }\n                });\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        producer.shutdown();\n    }\n}\n```\n**3.延迟发送**\nDefaultMQProducer延迟发送使用方法：\n\n    在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send\n\n注意：\n```java\n延迟发送仅支持预设值的时间长度：1s/5s/1Os/30s/Im/2m/3m/4m/5m/6m/ 7m/8m/9m/1Om/20m/30m/1h/2h\n如setDelayTimeLevel(3)表示延迟 10s\n```\n**4.事务消息发送**\nDefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。\n```java\n场景：\nA 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。\n\nTransactionMQProducer 处理流程是：\n1.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。\n2.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息\n3.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。\n若二次确认未到达RocketMQ，则发起回查请求\n```\n详细参考代码如下：\n\n**TransactionProducer**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.client.producer.TransactionMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class TransactionProducer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        TransactionListener transactionListener = new TransactionListenerImpl();\n        TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r);\n                thread.setName(\"client-transaction-msg-check-thread\");\n                return thread;\n            }\n        });\n\n        producer.setExecutorService(executorService);\n        producer.setTransactionListener(transactionListener);\n        producer.start();\n\n        String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n        for (int i = 0; i < 10; i++) {\n            try {\n                Message msg =\n                    new Message(\"TopicTest1234\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n                System.out.printf(\"%s%n\", sendResult);\n\n                Thread.sleep(10);\n            } catch (MQClientException | UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        for (int i = 0; i < 100000; i++) {\n            Thread.sleep(1000);\n        }\n        producer.shutdown();\n    }\n}\n```\n\n**TransactionListenerImpl**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.producer.LocalTransactionState;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class TransactionListenerImpl implements TransactionListener {\n    private AtomicInteger transactionIndex = new AtomicInteger(0);\n\n    private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\n    @Override\n    public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        int value = transactionIndex.getAndIncrement();\n        int status = value % 3;\n        localTrans.put(msg.getTransactionId(), status);\n        return LocalTransactionState.UNKNOW;\n    }\n\n    @Override\n    public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n        Integer status = localTrans.get(msg.getTransactionId());\n        if (null != status) {\n            switch (status) {\n                case 0:\n                    return LocalTransactionState.UNKNOW;\n                case 1:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n                case 2:\n                    return LocalTransactionState.ROLLBACK_MESSAGE;\n                default:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n            }\n        }\n        return LocalTransactionState.COMMIT_MESSAGE;\n    }\n}\n\n```\n\n### 四、自定义消息发送规则\n**背景：**\n```java\n一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。\n若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector\n```\n**解决思路：**\n```java\n发送消息的时候，将 MessageQueueSelector 的对象作为参数，\n在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。\n\n使用public SendResult send(Message msg, MessageQueueSelector selector, Object arg)函数发送消息\n```\n\n**具体参考代码如下：**\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\n\npublic class Producer {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        try {\n            MQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n            producer.start();\n\n            String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n            for (int i = 0; i < 100; i++) {\n                int orderId = i % 10;\n                Message msg =\n                    new Message(\"TopicTestjjj\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        Integer id = (Integer) arg;\n                        int index = id % mqs.size();\n                        return mqs.get(index);\n                    }\n                }, orderId);\n\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n            producer.shutdown();\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n","slug":"RocketMQ角色详解之Producer","published":1,"updated":"2020-01-09T12:33:53.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot7000054lz0dztp6007","content":"<h3 id=\"一、常用Producer类\"><a href=\"#一、常用Producer类\" class=\"headerlink\" title=\"一、常用Producer类\"></a>一、常用Producer类</h3><p>最常用的producer类就是DefaultMQProducer，具体使用看下文</p>\n<h3 id=\"二、DefaultMQProducer的消息发送步骤\"><a href=\"#二、DefaultMQProducer的消息发送步骤\" class=\"headerlink\" title=\"二、DefaultMQProducer的消息发送步骤\"></a>二、DefaultMQProducer的消息发送步骤</h3><ol>\n<li>设置 ProducerGroupName</li>\n<li>设置 lnstanceName</li>\n<li>设置发送失败重试次数</li>\n<li>设置 NameServer 地址</li>\n<li>组装消息并发送</li>\n</ol>\n<p><strong>具体代码参考如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.setInstanceName(<span class=\"string\">\"p1\"</span>);</span><br><span class=\"line\">        producer.setRetryTimesWhenSendFailed(<span class=\"number\">3</span>);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">\"192.128.122.123:9876;192.128.122.124:9876;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、消息发送方式\"><a href=\"#三、消息发送方式\" class=\"headerlink\" title=\"三、消息发送方式\"></a>三、消息发送方式</h3><p><strong>1.同步发送</strong><br>DefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：</p>\n<pre><code>SEND_OK\nFLUSH_DISK_TIMEOUT\nFLUSH_SLAVE_TIMEOUT\nSLAVE_NOT_AVAILABLE\n需要结合配置的刷盘策略、主从策略来理解其含义</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.异步发送</strong><br>DefaultMQProducer异步发送消息可参考如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"Jodie_Daily_test\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        producer.setRetryTimesWhenSendAsyncFailed(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> messageCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(messageCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"Jodie_topic_1023\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                producer.send(msg, <span class=\"keyword\">new</span> SendCallback() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(SendResult sendResult)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d OK %s %n\"</span>, index, sendResult.getMsgId());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d Exception %s %n\"</span>, index, e);</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.延迟发送</strong><br>DefaultMQProducer延迟发送使用方法：</p>\n<pre><code>在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send</code></pre><p>注意：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟发送仅支持预设值的时间长度：<span class=\"number\">1</span>s/<span class=\"number\">5</span>s/<span class=\"number\">1</span>Os/<span class=\"number\">30</span>s/Im/<span class=\"number\">2</span>m/<span class=\"number\">3</span>m/<span class=\"number\">4</span>m/<span class=\"number\">5</span>m/<span class=\"number\">6</span>m/ <span class=\"number\">7</span>m/<span class=\"number\">8</span>m/<span class=\"number\">9</span>m/<span class=\"number\">1</span>Om/<span class=\"number\">20</span>m/<span class=\"number\">30</span>m/<span class=\"number\">1</span>h/<span class=\"number\">2</span>h</span><br><span class=\"line\">如setDelayTimeLevel(<span class=\"number\">3</span>)表示延迟 <span class=\"number\">10</span>s</span><br></pre></td></tr></table></figure>\n<p><strong>4.事务消息发送</strong><br>DefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：</span><br><span class=\"line\">A 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。</span><br><span class=\"line\"></span><br><span class=\"line\">TransactionMQProducer 处理流程是：</span><br><span class=\"line\"><span class=\"number\">1</span>.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。</span><br><span class=\"line\"><span class=\"number\">2</span>.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息</span><br><span class=\"line\"><span class=\"number\">3</span>.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。</span><br><span class=\"line\">若二次确认未到达RocketMQ，则发起回查请求</span><br></pre></td></tr></table></figure>\n<p>详细参考代码如下：</p>\n<p><strong>TransactionProducer</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        TransactionListener transactionListener = <span class=\"keyword\">new</span> TransactionListenerImpl();</span><br><span class=\"line\">        TransactionMQProducer producer = <span class=\"keyword\">new</span> TransactionMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">2000</span>), <span class=\"keyword\">new</span> ThreadFactory() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(r);</span><br><span class=\"line\">                thread.setName(<span class=\"string\">\"client-transaction-msg-check-thread\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.setExecutorService(executorService);</span><br><span class=\"line\">        producer.setTransactionListener(transactionListener);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest1234\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.sendMessageInTransaction(msg, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\"></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>TransactionListenerImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.LocalTransactionState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionListenerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger transactionIndex = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, Integer&gt; localTrans = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">executeLocalTransaction</span><span class=\"params\">(Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = transactionIndex.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> status = value % <span class=\"number\">3</span>;</span><br><span class=\"line\">        localTrans.put(msg.getTransactionId(), status);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">checkLocalTransaction</span><span class=\"params\">(MessageExt msg)</span> </span>&#123;</span><br><span class=\"line\">        Integer status = localTrans.get(msg.getTransactionId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、自定义消息发送规则\"><a href=\"#四、自定义消息发送规则\" class=\"headerlink\" title=\"四、自定义消息发送规则\"></a>四、自定义消息发送规则</h3><p><strong>背景：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。</span><br><span class=\"line\">若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector</span><br></pre></td></tr></table></figure>\n<p><strong>解决思路：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送消息的时候，将 MessageQueueSelector 的对象作为参数，</span><br><span class=\"line\">在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。</span><br><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"function\"><span class=\"keyword\">public</span> SendResult <span class=\"title\">send</span><span class=\"params\">(Message msg, MessageQueueSelector selector, Object arg)</span>函数发送消息</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>具体参考代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            MQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> orderId = i % <span class=\"number\">10</span>;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTestjjj\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg, <span class=\"keyword\">new</span> MessageQueueSelector() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> MessageQueue <span class=\"title\">select</span><span class=\"params\">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">                        Integer id = (Integer) arg;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> index = id % mqs.size();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> mqs.get(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, orderId);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            producer.shutdown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException | RemotingException | MQBrokerException | InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、常用Producer类\"><a href=\"#一、常用Producer类\" class=\"headerlink\" title=\"一、常用Producer类\"></a>一、常用Producer类</h3><p>最常用的producer类就是DefaultMQProducer，具体使用看下文</p>\n<h3 id=\"二、DefaultMQProducer的消息发送步骤\"><a href=\"#二、DefaultMQProducer的消息发送步骤\" class=\"headerlink\" title=\"二、DefaultMQProducer的消息发送步骤\"></a>二、DefaultMQProducer的消息发送步骤</h3><ol>\n<li>设置 ProducerGroupName</li>\n<li>设置 lnstanceName</li>\n<li>设置发送失败重试次数</li>\n<li>设置 NameServer 地址</li>\n<li>组装消息并发送</li>\n</ol>\n<p><strong>具体代码参考如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.setInstanceName(<span class=\"string\">\"p1\"</span>);</span><br><span class=\"line\">        producer.setRetryTimesWhenSendFailed(<span class=\"number\">3</span>);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">\"192.128.122.123:9876;192.128.122.124:9876;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、消息发送方式\"><a href=\"#三、消息发送方式\" class=\"headerlink\" title=\"三、消息发送方式\"></a>三、消息发送方式</h3><p><strong>1.同步发送</strong><br>DefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：</p>\n<pre><code>SEND_OK\nFLUSH_DISK_TIMEOUT\nFLUSH_SLAVE_TIMEOUT\nSLAVE_NOT_AVAILABLE\n需要结合配置的刷盘策略、主从策略来理解其含义</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.异步发送</strong><br>DefaultMQProducer异步发送消息可参考如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"Jodie_Daily_test\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        producer.setRetryTimesWhenSendAsyncFailed(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> messageCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(messageCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"Jodie_topic_1023\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                producer.send(msg, <span class=\"keyword\">new</span> SendCallback() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(SendResult sendResult)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d OK %s %n\"</span>, index, sendResult.getMsgId());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d Exception %s %n\"</span>, index, e);</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.延迟发送</strong><br>DefaultMQProducer延迟发送使用方法：</p>\n<pre><code>在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send</code></pre><p>注意：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟发送仅支持预设值的时间长度：<span class=\"number\">1</span>s/<span class=\"number\">5</span>s/<span class=\"number\">1</span>Os/<span class=\"number\">30</span>s/Im/<span class=\"number\">2</span>m/<span class=\"number\">3</span>m/<span class=\"number\">4</span>m/<span class=\"number\">5</span>m/<span class=\"number\">6</span>m/ <span class=\"number\">7</span>m/<span class=\"number\">8</span>m/<span class=\"number\">9</span>m/<span class=\"number\">1</span>Om/<span class=\"number\">20</span>m/<span class=\"number\">30</span>m/<span class=\"number\">1</span>h/<span class=\"number\">2</span>h</span><br><span class=\"line\">如setDelayTimeLevel(<span class=\"number\">3</span>)表示延迟 <span class=\"number\">10</span>s</span><br></pre></td></tr></table></figure>\n<p><strong>4.事务消息发送</strong><br>DefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：</span><br><span class=\"line\">A 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。</span><br><span class=\"line\"></span><br><span class=\"line\">TransactionMQProducer 处理流程是：</span><br><span class=\"line\"><span class=\"number\">1</span>.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。</span><br><span class=\"line\"><span class=\"number\">2</span>.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息</span><br><span class=\"line\"><span class=\"number\">3</span>.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。</span><br><span class=\"line\">若二次确认未到达RocketMQ，则发起回查请求</span><br></pre></td></tr></table></figure>\n<p>详细参考代码如下：</p>\n<p><strong>TransactionProducer</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        TransactionListener transactionListener = <span class=\"keyword\">new</span> TransactionListenerImpl();</span><br><span class=\"line\">        TransactionMQProducer producer = <span class=\"keyword\">new</span> TransactionMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">2000</span>), <span class=\"keyword\">new</span> ThreadFactory() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(r);</span><br><span class=\"line\">                thread.setName(<span class=\"string\">\"client-transaction-msg-check-thread\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.setExecutorService(executorService);</span><br><span class=\"line\">        producer.setTransactionListener(transactionListener);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest1234\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.sendMessageInTransaction(msg, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\"></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>TransactionListenerImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.LocalTransactionState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionListenerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger transactionIndex = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, Integer&gt; localTrans = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">executeLocalTransaction</span><span class=\"params\">(Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = transactionIndex.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> status = value % <span class=\"number\">3</span>;</span><br><span class=\"line\">        localTrans.put(msg.getTransactionId(), status);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">checkLocalTransaction</span><span class=\"params\">(MessageExt msg)</span> </span>&#123;</span><br><span class=\"line\">        Integer status = localTrans.get(msg.getTransactionId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、自定义消息发送规则\"><a href=\"#四、自定义消息发送规则\" class=\"headerlink\" title=\"四、自定义消息发送规则\"></a>四、自定义消息发送规则</h3><p><strong>背景：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。</span><br><span class=\"line\">若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector</span><br></pre></td></tr></table></figure>\n<p><strong>解决思路：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送消息的时候，将 MessageQueueSelector 的对象作为参数，</span><br><span class=\"line\">在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。</span><br><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"function\"><span class=\"keyword\">public</span> SendResult <span class=\"title\">send</span><span class=\"params\">(Message msg, MessageQueueSelector selector, Object arg)</span>函数发送消息</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>具体参考代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            MQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> orderId = i % <span class=\"number\">10</span>;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTestjjj\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg, <span class=\"keyword\">new</span> MessageQueueSelector() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> MessageQueue <span class=\"title\">select</span><span class=\"params\">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">                        Integer id = (Integer) arg;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> index = id % mqs.size();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> mqs.get(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, orderId);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            producer.shutdown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException | RemotingException | MQBrokerException | InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"RocketMQ角色详解之Broker","date":"2020-01-09T12:35:23.000Z","_content":"### 一、Broker概述\n**Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。\n包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。**\n\n\n### 二、消息的存储与转发\n分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。\n磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。\nRocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。\n\n\n### 三、消息存储结构\n**1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog**\n\n- CommitLog：\n消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。\n\n- ConsumeQueue:\n消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。\n\n在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。\n(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )\n\n**2.此存储结构下的优势**\n\n 1. CommitLog顺序写，大大提高写入效率\n 2. 虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。\n 3. 为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。\n\n\n### 四、高可用机制\n**RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的**\n\n**1.消费端的高可用：**\nMaster角色的 Broker支持读和写， Slave角色的 Broker仅支持读\n当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。\n当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 \n\n**2.发送端的高可用：**\n在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上\n(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，\n这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。\n\n### 五、同步刷盘和异步刷盘\n**同步刷盘方式 :** \n在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。\n\n**异步刷盘方式 :** \n在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;\n当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。\n\n**注意：**\n刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：\nSYNC_FLUSH 同步刷盘 \nASYNC_FLUSH 异步刷盘\n\n### 六、同步复制和异步复制\n如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。\n\n**同步复制方式：** \nMaster 和 Slave 均写成功 后才反馈给客户端写成功状态\n\n**异步复制方式：**\n只要 Master 写成功即可反馈给客户端写成功状态 。\n\n**注意：**\n1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：\nASYNC MASTER 异步复制 \nSYNC MASTER 同步复制\nSLAVE 无影响\n\n2.通常情况下，应该把\n刷盘方式配置成 ASYNC_FLUSH\n主从复制方式配置成 SYNC_MASTER \n这样即使有一台机器出故障，仍然能保证数据不丢。\n","source":"_posts/RocketMQ角色详解之Broker.md","raw":"---\ntitle: RocketMQ角色详解之Broker\ndate: 2020-01-09 20:35:23\ntags:\n---\n### 一、Broker概述\n**Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。\n包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。**\n\n\n### 二、消息的存储与转发\n分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。\n磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。\nRocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。\n\n\n### 三、消息存储结构\n**1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog**\n\n- CommitLog：\n消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。\n\n- ConsumeQueue:\n消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。\n\n在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。\n(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )\n\n**2.此存储结构下的优势**\n\n 1. CommitLog顺序写，大大提高写入效率\n 2. 虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。\n 3. 为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。\n\n\n### 四、高可用机制\n**RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的**\n\n**1.消费端的高可用：**\nMaster角色的 Broker支持读和写， Slave角色的 Broker仅支持读\n当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。\n当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 \n\n**2.发送端的高可用：**\n在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上\n(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，\n这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。\n\n### 五、同步刷盘和异步刷盘\n**同步刷盘方式 :** \n在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。\n\n**异步刷盘方式 :** \n在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;\n当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。\n\n**注意：**\n刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：\nSYNC_FLUSH 同步刷盘 \nASYNC_FLUSH 异步刷盘\n\n### 六、同步复制和异步复制\n如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。\n\n**同步复制方式：** \nMaster 和 Slave 均写成功 后才反馈给客户端写成功状态\n\n**异步复制方式：**\n只要 Master 写成功即可反馈给客户端写成功状态 。\n\n**注意：**\n1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：\nASYNC MASTER 异步复制 \nSYNC MASTER 同步复制\nSLAVE 无影响\n\n2.通常情况下，应该把\n刷盘方式配置成 ASYNC_FLUSH\n主从复制方式配置成 SYNC_MASTER \n这样即使有一台机器出故障，仍然能保证数据不丢。\n","slug":"RocketMQ角色详解之Broker","published":1,"updated":"2020-01-09T12:35:42.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot7100064lz0cfmwft26","content":"<h3 id=\"一、Broker概述\"><a href=\"#一、Broker概述\" class=\"headerlink\" title=\"一、Broker概述\"></a>一、Broker概述</h3><p><strong>Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。<br>包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。</strong></p>\n<h3 id=\"二、消息的存储与转发\"><a href=\"#二、消息的存储与转发\" class=\"headerlink\" title=\"二、消息的存储与转发\"></a>二、消息的存储与转发</h3><p>分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。<br>磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。<br>RocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。</p>\n<h3 id=\"三、消息存储结构\"><a href=\"#三、消息存储结构\" class=\"headerlink\" title=\"三、消息存储结构\"></a>三、消息存储结构</h3><p><strong>1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog</strong></p>\n<ul>\n<li><p>CommitLog：<br>消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。</p>\n</li>\n<li><p>ConsumeQueue:<br>消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。</p>\n</li>\n</ul>\n<p>在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。<br>(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )</p>\n<p><strong>2.此存储结构下的优势</strong></p>\n<ol>\n<li>CommitLog顺序写，大大提高写入效率</li>\n<li>虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。</li>\n<li>为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。</li>\n</ol>\n<h3 id=\"四、高可用机制\"><a href=\"#四、高可用机制\" class=\"headerlink\" title=\"四、高可用机制\"></a>四、高可用机制</h3><p><strong>RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的</strong></p>\n<p><strong>1.消费端的高可用：</strong><br>Master角色的 Broker支持读和写， Slave角色的 Broker仅支持读<br>当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。<br>当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 </p>\n<p><strong>2.发送端的高可用：</strong><br>在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上<br>(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，<br>这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。</p>\n<h3 id=\"五、同步刷盘和异步刷盘\"><a href=\"#五、同步刷盘和异步刷盘\" class=\"headerlink\" title=\"五、同步刷盘和异步刷盘\"></a>五、同步刷盘和异步刷盘</h3><p><strong>同步刷盘方式 :</strong><br>在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。</p>\n<p><strong>异步刷盘方式 :</strong><br>在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;<br>当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。</p>\n<p><strong>注意：</strong><br>刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：<br>SYNC_FLUSH 同步刷盘<br>ASYNC_FLUSH 异步刷盘</p>\n<h3 id=\"六、同步复制和异步复制\"><a href=\"#六、同步复制和异步复制\" class=\"headerlink\" title=\"六、同步复制和异步复制\"></a>六、同步复制和异步复制</h3><p>如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。</p>\n<p><strong>同步复制方式：</strong><br>Master 和 Slave 均写成功 后才反馈给客户端写成功状态</p>\n<p><strong>异步复制方式：</strong><br>只要 Master 写成功即可反馈给客户端写成功状态 。</p>\n<p><strong>注意：</strong><br>1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：<br>ASYNC MASTER 异步复制<br>SYNC MASTER 同步复制<br>SLAVE 无影响</p>\n<p>2.通常情况下，应该把<br>刷盘方式配置成 ASYNC_FLUSH<br>主从复制方式配置成 SYNC_MASTER<br>这样即使有一台机器出故障，仍然能保证数据不丢。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Broker概述\"><a href=\"#一、Broker概述\" class=\"headerlink\" title=\"一、Broker概述\"></a>一、Broker概述</h3><p><strong>Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。<br>包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。</strong></p>\n<h3 id=\"二、消息的存储与转发\"><a href=\"#二、消息的存储与转发\" class=\"headerlink\" title=\"二、消息的存储与转发\"></a>二、消息的存储与转发</h3><p>分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。<br>磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。<br>RocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。</p>\n<h3 id=\"三、消息存储结构\"><a href=\"#三、消息存储结构\" class=\"headerlink\" title=\"三、消息存储结构\"></a>三、消息存储结构</h3><p><strong>1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog</strong></p>\n<ul>\n<li><p>CommitLog：<br>消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。</p>\n</li>\n<li><p>ConsumeQueue:<br>消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。</p>\n</li>\n</ul>\n<p>在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。<br>(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )</p>\n<p><strong>2.此存储结构下的优势</strong></p>\n<ol>\n<li>CommitLog顺序写，大大提高写入效率</li>\n<li>虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。</li>\n<li>为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。</li>\n</ol>\n<h3 id=\"四、高可用机制\"><a href=\"#四、高可用机制\" class=\"headerlink\" title=\"四、高可用机制\"></a>四、高可用机制</h3><p><strong>RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的</strong></p>\n<p><strong>1.消费端的高可用：</strong><br>Master角色的 Broker支持读和写， Slave角色的 Broker仅支持读<br>当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。<br>当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 </p>\n<p><strong>2.发送端的高可用：</strong><br>在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上<br>(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，<br>这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。</p>\n<h3 id=\"五、同步刷盘和异步刷盘\"><a href=\"#五、同步刷盘和异步刷盘\" class=\"headerlink\" title=\"五、同步刷盘和异步刷盘\"></a>五、同步刷盘和异步刷盘</h3><p><strong>同步刷盘方式 :</strong><br>在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。</p>\n<p><strong>异步刷盘方式 :</strong><br>在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;<br>当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。</p>\n<p><strong>注意：</strong><br>刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：<br>SYNC_FLUSH 同步刷盘<br>ASYNC_FLUSH 异步刷盘</p>\n<h3 id=\"六、同步复制和异步复制\"><a href=\"#六、同步复制和异步复制\" class=\"headerlink\" title=\"六、同步复制和异步复制\"></a>六、同步复制和异步复制</h3><p>如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。</p>\n<p><strong>同步复制方式：</strong><br>Master 和 Slave 均写成功 后才反馈给客户端写成功状态</p>\n<p><strong>异步复制方式：</strong><br>只要 Master 写成功即可反馈给客户端写成功状态 。</p>\n<p><strong>注意：</strong><br>1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：<br>ASYNC MASTER 异步复制<br>SYNC MASTER 同步复制<br>SLAVE 无影响</p>\n<p>2.通常情况下，应该把<br>刷盘方式配置成 ASYNC_FLUSH<br>主从复制方式配置成 SYNC_MASTER<br>这样即使有一台机器出故障，仍然能保证数据不丢。</p>\n"},{"title":"RocketMQ角色详解之NameServer","date":"2020-01-09T12:34:51.000Z","_content":"### 一、NameServer的功能\n**NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。** \n\n需要了解的两个知识：\n\n - 热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。\n - 心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)\n\n### 二、NameServer的集群状态存储结构\n**集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。**\n\n**1.private final HashMap<String， List<QueueData>> topicQueueTable**\n\n```\n Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。\nValue 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。\nQueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。\n```\n\n**2.private final HashMap<String， BrokerData> Broker- AddrTable**\n\n```\n这个结构存储着一个 BrokerName 对应的属性信 息，\n包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。\n```\n\n**3.private final HashMap<String， Set<String>> ClusterAddrTable**\n\n```\n存储的是集群中 Cluster 的信息\nCluster 名称对应一个由 BrokerName组成的集合\n```\n\n**4.private final HashMap<String， BrokerLivelnfo> Broker- LiveTable**\n\n```\nBrokerLiveTable 存储的内容是这台 Broker机器的实时状态，\n包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。\n```\n\n**5.private fina l HashMap<String ， List<String>> filterServerTable**\n\n```\nFilter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。\n一个Broker可以有一个或多个Filter Server。 \nKey 是 Broker 的地址\nValue 是和这个 Broker关联的多个 Filter Server 的地址 。\n```\n\n### 三、为什么不用已有的Zookeeper？\n\nZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。\n中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。\n","source":"_posts/RocketMQ角色详解之NameServer.md","raw":"---\ntitle: RocketMQ角色详解之NameServer\ndate: 2020-01-09 20:34:51\ntags:\n---\n### 一、NameServer的功能\n**NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。** \n\n需要了解的两个知识：\n\n - 热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。\n - 心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)\n\n### 二、NameServer的集群状态存储结构\n**集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。**\n\n**1.private final HashMap<String， List<QueueData>> topicQueueTable**\n\n```\n Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。\nValue 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。\nQueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。\n```\n\n**2.private final HashMap<String， BrokerData> Broker- AddrTable**\n\n```\n这个结构存储着一个 BrokerName 对应的属性信 息，\n包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。\n```\n\n**3.private final HashMap<String， Set<String>> ClusterAddrTable**\n\n```\n存储的是集群中 Cluster 的信息\nCluster 名称对应一个由 BrokerName组成的集合\n```\n\n**4.private final HashMap<String， BrokerLivelnfo> Broker- LiveTable**\n\n```\nBrokerLiveTable 存储的内容是这台 Broker机器的实时状态，\n包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。\n```\n\n**5.private fina l HashMap<String ， List<String>> filterServerTable**\n\n```\nFilter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。\n一个Broker可以有一个或多个Filter Server。 \nKey 是 Broker 的地址\nValue 是和这个 Broker关联的多个 Filter Server 的地址 。\n```\n\n### 三、为什么不用已有的Zookeeper？\n\nZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。\n中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。\n","slug":"RocketMQ角色详解之NameServer","published":1,"updated":"2020-01-09T12:35:01.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57kot7200074lz0f3ww0hji","content":"<h3 id=\"一、NameServer的功能\"><a href=\"#一、NameServer的功能\" class=\"headerlink\" title=\"一、NameServer的功能\"></a>一、NameServer的功能</h3><p><strong>NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。</strong> </p>\n<p>需要了解的两个知识：</p>\n<ul>\n<li>热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。</li>\n<li>心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)</li>\n</ul>\n<h3 id=\"二、NameServer的集群状态存储结构\"><a href=\"#二、NameServer的集群状态存储结构\" class=\"headerlink\" title=\"二、NameServer的集群状态存储结构\"></a>二、NameServer的集群状态存储结构</h3><p><strong>集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。</strong></p>\n<p><strong>1.private final HashMap&lt;String， List<QueueData>&gt; topicQueueTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。</span><br><span class=\"line\">Value 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。</span><br><span class=\"line\">QueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.private final HashMap&lt;String， BrokerData&gt; Broker- AddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个结构存储着一个 BrokerName 对应的属性信 息，</span><br><span class=\"line\">包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.private final HashMap&lt;String， Set<String>&gt; ClusterAddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">存储的是集群中 Cluster 的信息</span><br><span class=\"line\">Cluster 名称对应一个由 BrokerName组成的集合</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.private final HashMap&lt;String， BrokerLivelnfo&gt; Broker- LiveTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BrokerLiveTable 存储的内容是这台 Broker机器的实时状态，</span><br><span class=\"line\">包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。</span><br></pre></td></tr></table></figure>\n\n<p><strong>5.private fina l HashMap&lt;String ， List<String>&gt; filterServerTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。</span><br><span class=\"line\">一个Broker可以有一个或多个Filter Server。 </span><br><span class=\"line\">Key 是 Broker 的地址</span><br><span class=\"line\">Value 是和这个 Broker关联的多个 Filter Server 的地址 。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、为什么不用已有的Zookeeper？\"><a href=\"#三、为什么不用已有的Zookeeper？\" class=\"headerlink\" title=\"三、为什么不用已有的Zookeeper？\"></a>三、为什么不用已有的Zookeeper？</h3><p>ZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。<br>中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、NameServer的功能\"><a href=\"#一、NameServer的功能\" class=\"headerlink\" title=\"一、NameServer的功能\"></a>一、NameServer的功能</h3><p><strong>NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。</strong> </p>\n<p>需要了解的两个知识：</p>\n<ul>\n<li>热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。</li>\n<li>心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)</li>\n</ul>\n<h3 id=\"二、NameServer的集群状态存储结构\"><a href=\"#二、NameServer的集群状态存储结构\" class=\"headerlink\" title=\"二、NameServer的集群状态存储结构\"></a>二、NameServer的集群状态存储结构</h3><p><strong>集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。</strong></p>\n<p><strong>1.private final HashMap&lt;String， List<QueueData>&gt; topicQueueTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。</span><br><span class=\"line\">Value 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。</span><br><span class=\"line\">QueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.private final HashMap&lt;String， BrokerData&gt; Broker- AddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个结构存储着一个 BrokerName 对应的属性信 息，</span><br><span class=\"line\">包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.private final HashMap&lt;String， Set<String>&gt; ClusterAddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">存储的是集群中 Cluster 的信息</span><br><span class=\"line\">Cluster 名称对应一个由 BrokerName组成的集合</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.private final HashMap&lt;String， BrokerLivelnfo&gt; Broker- LiveTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BrokerLiveTable 存储的内容是这台 Broker机器的实时状态，</span><br><span class=\"line\">包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。</span><br></pre></td></tr></table></figure>\n\n<p><strong>5.private fina l HashMap&lt;String ， List<String>&gt; filterServerTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。</span><br><span class=\"line\">一个Broker可以有一个或多个Filter Server。 </span><br><span class=\"line\">Key 是 Broker 的地址</span><br><span class=\"line\">Value 是和这个 Broker关联的多个 Filter Server 的地址 。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、为什么不用已有的Zookeeper？\"><a href=\"#三、为什么不用已有的Zookeeper？\" class=\"headerlink\" title=\"三、为什么不用已有的Zookeeper？\"></a>三、为什么不用已有的Zookeeper？</h3><p>ZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。<br>中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。</p>\n"}],"PostAsset":[{"_id":"source/_posts/RocketMQ概述/rocketmq.jpeg","slug":"rocketmq.jpeg","post":"ck57kot6z00034lz0779z2fll","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}