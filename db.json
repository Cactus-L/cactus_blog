{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/json/summary.json","path":"json/summary.json","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1577675857450},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1577675857450},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1577675857450},{"_id":"themes/cactus/_config.yml","hash":"02dc7f2f9294d63d90e552714662b7b203893557","modified":1578565960628},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1577675857451},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1577675857460},{"_id":"source/_posts/RocketMQ使用场景之可靠性优先Case.md","hash":"87604ce5357be14d29b422124c6b0ccb73dfaea7","modified":1578573386087},{"_id":"source/_posts/RocketMQ概述.md","hash":"402c4cd7ba2ec122f76e719e971764c0616998fe","modified":1578572671846},{"_id":"source/_posts/RocketMQ的环境搭建与相关配置.md","hash":"49457d785c9f13086f229577137b2851e6cf943f","modified":1578573105578},{"_id":"source/_posts/RocketMQ使用场景之吞吐量优先Case.md","hash":"87c5124e4ad7829e3a1295e97d5ca97d61890faa","modified":1578573421430},{"_id":"source/_posts/RocketMQ角色详解之NameServer.md","hash":"1128b293fb4624458dd39e956294fa39b1eafeb4","modified":1578573301632},{"_id":"source/_posts/RocketMQ角色详解之Broker.md","hash":"5357bb0c4eb0511d3010ba6fbd76d31fdc20309c","modified":1578573342504},{"_id":"source/_posts/RocketMQ角色详解之Consumer.md","hash":"8895851dce179fa767bb467c5e99c3cd48160ab5","modified":1578625261797},{"_id":"source/_posts/Spring-概述.md","hash":"18c1c8df0799f14f8b4f1e72e55053fa2175a9d2","modified":1578626137424},{"_id":"source/_posts/Spring基础配置.md","hash":"c921b794294cc3a2c10d38e92de8fff12479303d","modified":1578626399630},{"_id":"source/_posts/Spring常用配置-Bean的Scope.md","hash":"11c2cb12379d94894b4fa5604fb1ba9ff6f91b98","modified":1578626468257},{"_id":"source/_posts/RocketMQ角色详解之Producer.md","hash":"2cbb5de2152e9ba1dd8dae6d13f31f43713ee774","modified":1578573233377},{"_id":"source/_posts/Spring常用配置-EL及使用资源文件.md","hash":"c6fc1e9b81f3233a7afb8ba797315ddad4ba6cdb","modified":1578626543812},{"_id":"source/_posts/Spring常用配置-Bean的初始化和销毁.md","hash":"548863e257780a77ab97943f8f5aaace55955703","modified":1578626581987},{"_id":"source/_posts/Spring常用配置-Event.md","hash":"369037264064bf7d3c8ad444127860095c251781","modified":1578626671845},{"_id":"source/_posts/Spring常用配置-Profile.md","hash":"112e0fa003c130bcd0c85f425ea821e975d72582","modified":1578626625541},{"_id":"source/_posts/Spring高级话题-Aware.md","hash":"797a4bc6987174ba4289048c4ea1f6fbf1a9589d","modified":1578626712045},{"_id":"source/_posts/Spring项目快速搭建.md","hash":"224c3cc88580f448ccdaf295ba2aa08f6b3d8a23","modified":1578626335234},{"_id":"source/_posts/Spring高级话题-Enable-注解的工作原理.md","hash":"ab2c8c05f7a88d1b24aa5091b29d4fe7f1354a63","modified":1578626940084},{"_id":"source/_posts/Spring高级话题-元注解与组合注解.md","hash":"ab5064b78d2e8cbeed6728a724b62045537f0ff9","modified":1578626888495},{"_id":"source/_posts/Spring高级话题-条件注解.md","hash":"c46780569d8e5afe59ad9da5d86934bc166f364b","modified":1578626853219},{"_id":"source/_posts/Spring高级话题-多线程.md","hash":"df99e78504e340f706e2005e038eba1008812df8","modified":1578626764357},{"_id":"source/_posts/Spring高级话题-测试.md","hash":"3def337ed5949d291520a4b8bacbf5de15bd85a6","modified":1578627004479},{"_id":"source/_posts/Spring高级话题-计划任务.md","hash":"2bb4c7a92a48a968625df28d3d5d1bb97d882966","modified":1578626804107},{"_id":"themes/cactus/languages/en.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1577675857451},{"_id":"themes/cactus/languages/default.yml","hash":"703548ad90034d4e5207a27eb50f726dc27e4c0c","modified":1577675857451},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1577675857451},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1577675857451},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1577675857451},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1577675857451},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1577675857452},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1577675857452},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1577675857452},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1577675857452},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1577675857452},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1577675857453},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1577675857453},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1577675857453},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1577675857460},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1577675857454},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1577675857455},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1577675857461},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1577675857461},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1577675857461},{"_id":"themes/cactus/layout/index.ejs","hash":"1fd8aad25b2893a26b4483b91a341907e55c16be","modified":1577675857458},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1577675857458},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1577675857459},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1577675857459},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1577675857458},{"_id":"source/_posts/Spring-概述/spring.jpeg","hash":"52457b1e2b434c2baf91ad4d70bb4be8c688e4d2","modified":1578626030646},{"_id":"source/_posts/RocketMQ概述/rocketmq.jpeg","hash":"6cd1456532eec6f5c578ef86fb090e6312419948","modified":1578572685030},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1577675857462},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1577675857462},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1577675857471},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1577675857473},{"_id":"themes/cactus/source/css/style.styl","hash":"18b22cfdc7457d81db7694aef5850cc36ff87a77","modified":1577675857474},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1577675857474},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1577675857473},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1577675857473},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1577675857474},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1577675857475},{"_id":"themes/cactus/source/json/summary.json","hash":"32f7418a66e9561adc72935d34c4af69efdd5fe8","modified":1578627080957},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1577675857477},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1577675857477},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"b7db191b7ad066b1f3f9c34d8a4b77e1ee815215","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1577675857455},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"137d3039f61cae8ae9219eb6771dd367304f9ec3","modified":1577675857458},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1577675857458},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1577675857458},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1577675857461},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1577675857462},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1577675857461},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1577675857462},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1577675857462},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1577675857463},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1577675857464},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1577675857465},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1577675857466},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1577675857467},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1577675857468},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1577675857469},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1577675857470},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1577675857471},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1577675857470},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"519af79eb34ee922b48e6c19aa8f4856e3f76486","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1577675857472},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1577675857473},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1577675857473},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1577675857473},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1577675857477},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1577675857516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1577675857516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1577675857518},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1577675857518},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1577675857519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1577675857520},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1577675857521},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1577675857521},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1577675857523},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1577675857523},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1577675857525},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1577675857525},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1577675857456},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1577675857525},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1577675857457},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1577675857457},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1577675857456},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1577675857457},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1577675857457},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1577675857494},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1577675857476},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1577675857515},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1577675857517},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1577675857516},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1577675857517},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1577675857519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1577675857519},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1577675857521},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1577675857520},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1577675857522},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1577675857523},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1577675857524},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1577675857525},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"dc726537928fc0d7703e73c0a5e4b82ad1731d59","modified":1577675857473},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1577675857473},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1577675857478},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1577675857485},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1577675857485},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1577675857486},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1577675857486},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1577675857494},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1577675857494},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1577675857484},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1577675857484},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1577675857493},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1577675857479},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1577675857483},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1577675857485},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1577675857493},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1577675857487},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1577675857492},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1577675857510},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1577675857504},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1577675857513},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1577675857506},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1577675857511},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1577675857514},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1577675857508},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1577675857514},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1577675857502},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1577675857507},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1577675857512},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1577675857512},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1577675857482},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1577675857491}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"RocketMQ使用场景之可靠性优先Case","date":"2020-01-09T12:36:15.000Z","_content":"### 一、顺序消息的实现\n**1.全局顺序消息**\n要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，\n然后 Producer 和 Consumer 的并发设置也要是1。 \n在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue \n（使用 MessageQueueSelector类）\n\n**2.部分顺序消息**\n在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理\n(使用 MessageListenerOrderly类)\n具体实现方式：\n\n```java\n在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,\n消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，\n这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，\n但不同 Consumer Queue 的消息可以并发处理 。\n```\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_3\");\n\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.subscribe(\"TopicTest\", \"TagA || TagC || TagD\");\n\n        consumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                context.setAutoCommit(false);\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 3) == 0) {\n                    return ConsumeOrderlyStatus.ROLLBACK;\n                } else if ((this.consumeTimes.get() % 4) == 0) {\n                    return ConsumeOrderlyStatus.COMMIT;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n}\n```\n\n### 二、消息重复问题\n消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是： \nProducer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。\n\n**解决办法：**\n\n 1. 保证消费逻辑的幕等性(多次调用和一次调用效果相同)\n 2. 维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）\n\n\n### 三、消息优先级\n**RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。**\n\n**情景1：**\n同一Topic下某一消息需要被及时处理，可另外开辟topic\n**情景2：**\n\n```java\n一个订单处理系统，接收从 100家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;\n订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 1 万单 。 \n如果这 100 个快递门店中某几个门店订单量大增，\n比如门店一接了个大客户，一个上午就发出 2万单消息请求，\n这样其他的 99 家门店可能被迫等待门店一的 2 万单处理完，\n也就是两天后订单才能被处理，显然很不公平 。\n```\n解决：\n```java\n创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 100 个，\nProducer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 \nDefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 \nMessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 \nMessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。\n```\n\n**情景3：**\n\n```java\n一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 \nTypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; \nTypeB处于第二优先级; \nTypeC 处于第三 优先级 。 \n```\n解决：\n\n```java\n对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，\n如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，\n自主控制 Messag巳Queue 的遍历，以及消息的读取;\n```\n\n### 四、各种故障对消息队列的影响\n故障清单：\n\n```\n1) Broker正常关闭，启动;\n2) Broker异常 Crash，然后启动;\n3) OS Crash，重启;\n4 )机器断电，但能马上恢复供电;\n5 )磁盘损坏;\n6) CPU、 主板、内存等关键设备损坏 。\n```\n分析：\n\n```java\n1 ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 \n若重启过程中有持续运行的 Consumer, Master机器出故障后， \nConsumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 \n当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器\n若有持续运行的 Producer，一台Master 出故障后，\nProducer只能向 Topic下其他的 Master机器发送消息，\n如果Producer采用同步发送方式，不会有消息丢失 。\n\n2、3、4）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，\n如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 1 种情况相同的效果 。\n\n5、6 ）情况属于硬件故障 ，发生第 5、6 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 5 或 6 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。\n```\n\n常规思路：\n\n```java\n总的来说，当设置成:\n1 )多 Master，每个 Master 带有 Slave; \n2 )主从之间设置成 SYNC_MASTER; \n3 ) Producer 用同步方式写;\n4 )刷盘策略设置成 SYNC FLUSH。\n就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。\n```\n","source":"_posts/RocketMQ使用场景之可靠性优先Case.md","raw":"---\ntitle: RocketMQ使用场景之可靠性优先Case\ndate: 2020-01-09 20:36:15\ntags:\n---\n### 一、顺序消息的实现\n**1.全局顺序消息**\n要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，\n然后 Producer 和 Consumer 的并发设置也要是1。 \n在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue \n（使用 MessageQueueSelector类）\n\n**2.部分顺序消息**\n在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理\n(使用 MessageListenerOrderly类)\n具体实现方式：\n\n```java\n在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,\n消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，\n这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，\n但不同 Consumer Queue 的消息可以并发处理 。\n```\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_3\");\n\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.subscribe(\"TopicTest\", \"TagA || TagC || TagD\");\n\n        consumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                context.setAutoCommit(false);\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 3) == 0) {\n                    return ConsumeOrderlyStatus.ROLLBACK;\n                } else if ((this.consumeTimes.get() % 4) == 0) {\n                    return ConsumeOrderlyStatus.COMMIT;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n}\n```\n\n### 二、消息重复问题\n消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是： \nProducer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。\n\n**解决办法：**\n\n 1. 保证消费逻辑的幕等性(多次调用和一次调用效果相同)\n 2. 维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）\n\n\n### 三、消息优先级\n**RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。**\n\n**情景1：**\n同一Topic下某一消息需要被及时处理，可另外开辟topic\n**情景2：**\n\n```java\n一个订单处理系统，接收从 100家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;\n订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 1 万单 。 \n如果这 100 个快递门店中某几个门店订单量大增，\n比如门店一接了个大客户，一个上午就发出 2万单消息请求，\n这样其他的 99 家门店可能被迫等待门店一的 2 万单处理完，\n也就是两天后订单才能被处理，显然很不公平 。\n```\n解决：\n```java\n创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 100 个，\nProducer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 \nDefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 \nMessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 \nMessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。\n```\n\n**情景3：**\n\n```java\n一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 \nTypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; \nTypeB处于第二优先级; \nTypeC 处于第三 优先级 。 \n```\n解决：\n\n```java\n对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，\n如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，\n自主控制 Messag巳Queue 的遍历，以及消息的读取;\n```\n\n### 四、各种故障对消息队列的影响\n故障清单：\n\n```\n1) Broker正常关闭，启动;\n2) Broker异常 Crash，然后启动;\n3) OS Crash，重启;\n4 )机器断电，但能马上恢复供电;\n5 )磁盘损坏;\n6) CPU、 主板、内存等关键设备损坏 。\n```\n分析：\n\n```java\n1 ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 \n若重启过程中有持续运行的 Consumer, Master机器出故障后， \nConsumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 \n当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器\n若有持续运行的 Producer，一台Master 出故障后，\nProducer只能向 Topic下其他的 Master机器发送消息，\n如果Producer采用同步发送方式，不会有消息丢失 。\n\n2、3、4）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，\n如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 1 种情况相同的效果 。\n\n5、6 ）情况属于硬件故障 ，发生第 5、6 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 5 或 6 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。\n```\n\n常规思路：\n\n```java\n总的来说，当设置成:\n1 )多 Master，每个 Master 带有 Slave; \n2 )主从之间设置成 SYNC_MASTER; \n3 ) Producer 用同步方式写;\n4 )刷盘策略设置成 SYNC FLUSH。\n就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。\n```\n","slug":"RocketMQ使用场景之可靠性优先Case","published":1,"updated":"2020-01-09T12:36:26.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2ce00004sz0auplf3v5","content":"<h3 id=\"一、顺序消息的实现\"><a href=\"#一、顺序消息的实现\" class=\"headerlink\" title=\"一、顺序消息的实现\"></a>一、顺序消息的实现</h3><p><strong>1.全局顺序消息</strong><br>要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，<br>然后 Producer 和 Consumer 的并发设置也要是1。<br>在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue<br>（使用 MessageQueueSelector类）</p>\n<p><strong>2.部分顺序消息</strong><br>在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理<br>(使用 MessageListenerOrderly类)<br>具体实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,</span><br><span class=\"line\">消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，</span><br><span class=\"line\">这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，</span><br><span class=\"line\">但不同 Consumer Queue 的消息可以并发处理 。</span><br></pre></td></tr></table></figure>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"TagA || TagC || TagD\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerOrderly() &#123;</span><br><span class=\"line\">            AtomicLong consumeTimes = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeOrderlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                context.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.consumeTimes.incrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">2</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">3</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.ROLLBACK;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">4</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.COMMIT;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">5</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    context.setSuspendCurrentQueueTimeMillis(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、消息重复问题\"><a href=\"#二、消息重复问题\" class=\"headerlink\" title=\"二、消息重复问题\"></a>二、消息重复问题</h3><p>消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是：<br>Producer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。</p>\n<p><strong>解决办法：</strong></p>\n<ol>\n<li>保证消费逻辑的幕等性(多次调用和一次调用效果相同)</li>\n<li>维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）</li>\n</ol>\n<h3 id=\"三、消息优先级\"><a href=\"#三、消息优先级\" class=\"headerlink\" title=\"三、消息优先级\"></a>三、消息优先级</h3><p><strong>RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。</strong></p>\n<p><strong>情景1：</strong><br>同一Topic下某一消息需要被及时处理，可另外开辟topic<br><strong>情景2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个订单处理系统，接收从 <span class=\"number\">100</span>家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;</span><br><span class=\"line\">订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 <span class=\"number\">1</span> 万单 。 </span><br><span class=\"line\">如果这 <span class=\"number\">100</span> 个快递门店中某几个门店订单量大增，</span><br><span class=\"line\">比如门店一接了个大客户，一个上午就发出 <span class=\"number\">2</span>万单消息请求，</span><br><span class=\"line\">这样其他的 <span class=\"number\">99</span> 家门店可能被迫等待门店一的 <span class=\"number\">2</span> 万单处理完，</span><br><span class=\"line\">也就是两天后订单才能被处理，显然很不公平 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 <span class=\"number\">100</span> 个，</span><br><span class=\"line\">Producer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 </span><br><span class=\"line\">DefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 </span><br><span class=\"line\">MessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 </span><br><span class=\"line\">MessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。</span><br></pre></td></tr></table></figure>\n\n<p><strong>情景3：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 </span><br><span class=\"line\">TypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; </span><br><span class=\"line\">TypeB处于第二优先级; </span><br><span class=\"line\">TypeC 处于第三 优先级 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，</span><br><span class=\"line\">如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，</span><br><span class=\"line\">自主控制 Messag巳Queue 的遍历，以及消息的读取;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、各种故障对消息队列的影响\"><a href=\"#四、各种故障对消息队列的影响\" class=\"headerlink\" title=\"四、各种故障对消息队列的影响\"></a>四、各种故障对消息队列的影响</h3><p>故障清单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) Broker正常关闭，启动;</span><br><span class=\"line\">2) Broker异常 Crash，然后启动;</span><br><span class=\"line\">3) OS Crash，重启;</span><br><span class=\"line\">4 )机器断电，但能马上恢复供电;</span><br><span class=\"line\">5 )磁盘损坏;</span><br><span class=\"line\">6) CPU、 主板、内存等关键设备损坏 。</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 </span><br><span class=\"line\">若重启过程中有持续运行的 Consumer, Master机器出故障后， </span><br><span class=\"line\">Consumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 </span><br><span class=\"line\">当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器</span><br><span class=\"line\">若有持续运行的 Producer，一台Master 出故障后，</span><br><span class=\"line\">Producer只能向 Topic下其他的 Master机器发送消息，</span><br><span class=\"line\">如果Producer采用同步发送方式，不会有消息丢失 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">3</span>、<span class=\"number\">4</span>）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，</span><br><span class=\"line\">如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 <span class=\"number\">1</span> 种情况相同的效果 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、<span class=\"number\">6</span> ）情况属于硬件故障 ，发生第 <span class=\"number\">5</span>、<span class=\"number\">6</span> 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 <span class=\"number\">5</span> 或 <span class=\"number\">6</span> 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。</span><br></pre></td></tr></table></figure>\n\n<p>常规思路：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总的来说，当设置成:</span><br><span class=\"line\"><span class=\"number\">1</span> )多 Master，每个 Master 带有 Slave; </span><br><span class=\"line\"><span class=\"number\">2</span> )主从之间设置成 SYNC_MASTER; </span><br><span class=\"line\"><span class=\"number\">3</span> ) Producer 用同步方式写;</span><br><span class=\"line\"><span class=\"number\">4</span> )刷盘策略设置成 SYNC FLUSH。</span><br><span class=\"line\">就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、顺序消息的实现\"><a href=\"#一、顺序消息的实现\" class=\"headerlink\" title=\"一、顺序消息的实现\"></a>一、顺序消息的实现</h3><p><strong>1.全局顺序消息</strong><br>要保证全局顺序消息，需要先把 Topic 的读写队列数设置为 1，<br>然后 Producer 和 Consumer 的并发设置也要是1。<br>在发送端，要做到 把同一业务 ID 的消息发送到同一个 Message Queue<br>（使用 MessageQueueSelector类）</p>\n<p><strong>2.部分顺序消息</strong><br>在消费过程中，要做到从 同一个 Message Queue 读取的消息不被并发处理<br>(使用 MessageListenerOrderly类)<br>具体实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 MessageListenerOrderly 的实现中，为每个 Consumer Queue 加个锁,</span><br><span class=\"line\">消费每个消息前，需要先获得这个消息对应的 Consumer Queue 所对应的锁，</span><br><span class=\"line\">这样保证了同一时间，同一个 Consumer Queue 的消息不被并发消 费，</span><br><span class=\"line\">但不同 Consumer Queue 的消息可以并发处理 。</span><br></pre></td></tr></table></figure>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"TagA || TagC || TagD\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerOrderly() &#123;</span><br><span class=\"line\">            AtomicLong consumeTimes = <span class=\"keyword\">new</span> AtomicLong(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeOrderlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeOrderlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                context.setAutoCommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.consumeTimes.incrementAndGet();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">2</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">3</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.ROLLBACK;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">4</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.COMMIT;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.consumeTimes.get() % <span class=\"number\">5</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    context.setSuspendCurrentQueueTimeMillis(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeOrderlyStatus.SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、消息重复问题\"><a href=\"#二、消息重复问题\" class=\"headerlink\" title=\"二、消息重复问题\"></a>二、消息重复问题</h3><p>消息重复一般情况下不会发生，但是如果消息量大，网络有波动，消息重复就是个大概率事件。 主要造成的原因是：<br>Producer有个setRetryTimesWhenSendFailed函数, 设置在同步方式下自动重试的次数，默认值是 2，这样当第一次发送消息时， Broker端接收到了消息但是没有正确返回发送成功的状态，就造成了消息重复。</p>\n<p><strong>解决办法：</strong></p>\n<ol>\n<li>保证消费逻辑的幕等性(多次调用和一次调用效果相同)</li>\n<li>维护一个巳消费消息的记录，消费前查询这个消息是否被消费过 （只能在入库时，手动写代码去重）</li>\n</ol>\n<h3 id=\"三、消息优先级\"><a href=\"#三、消息优先级\" class=\"headerlink\" title=\"三、消息优先级\"></a>三、消息优先级</h3><p><strong>RocketMQ 是个先入先出的队列，不支持消息级别或者 Topic 级别的优先级 ，只能通过间接方式。</strong></p>\n<p><strong>情景1：</strong><br>同一Topic下某一消息需要被及时处理，可另外开辟topic<br><strong>情景2：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个订单处理系统，接收从 <span class=\"number\">100</span>家快递门店过来的请求，把这些请求通过 Producer 写人 RocketMQ ;</span><br><span class=\"line\">订单处理程序通过 Consumer 从队列里读取消 息并处理，每天最多处理 <span class=\"number\">1</span> 万单 。 </span><br><span class=\"line\">如果这 <span class=\"number\">100</span> 个快递门店中某几个门店订单量大增，</span><br><span class=\"line\">比如门店一接了个大客户，一个上午就发出 <span class=\"number\">2</span>万单消息请求，</span><br><span class=\"line\">这样其他的 <span class=\"number\">99</span> 家门店可能被迫等待门店一的 <span class=\"number\">2</span> 万单处理完，</span><br><span class=\"line\">也就是两天后订单才能被处理，显然很不公平 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一个 Topic， 设置 Topic 的 MessageQueue 数 量 超过 <span class=\"number\">100</span> 个，</span><br><span class=\"line\">Producer根据订单的门店号，把每个门店的订单写人 一 个 MessageQueue。 </span><br><span class=\"line\">DefaultMQPushConsumer默认是采用循环的方式逐个读取一个 Topic 的 所有 </span><br><span class=\"line\">MessageQueue，这样如果某家门店订单 量 大增，这家门店对应的 </span><br><span class=\"line\">MessageQueue 消息数增多，等待时间增长，但不会造成其他家门店等待时间增长。</span><br></pre></td></tr></table></figure>\n\n<p><strong>情景3：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个应用程序同时处理 TypeA、 TypeB、 TypeC 三类消息 。 </span><br><span class=\"line\">TypeA 处于第 一优先级，要确保只要有 TypeA消息，必须优先处理; </span><br><span class=\"line\">TypeB处于第二优先级; </span><br><span class=\"line\">TypeC 处于第三 优先级 。</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对这种要求，或者逻辑更复杂的要求，需要自己编码实现优先级控制，</span><br><span class=\"line\">如果上述的三类消息在一个 Topic 里，可以使 用 PullConsumer，</span><br><span class=\"line\">自主控制 Messag巳Queue 的遍历，以及消息的读取;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、各种故障对消息队列的影响\"><a href=\"#四、各种故障对消息队列的影响\" class=\"headerlink\" title=\"四、各种故障对消息队列的影响\"></a>四、各种故障对消息队列的影响</h3><p>故障清单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) Broker正常关闭，启动;</span><br><span class=\"line\">2) Broker异常 Crash，然后启动;</span><br><span class=\"line\">3) OS Crash，重启;</span><br><span class=\"line\">4 )机器断电，但能马上恢复供电;</span><br><span class=\"line\">5 )磁盘损坏;</span><br><span class=\"line\">6) CPU、 主板、内存等关键设备损坏 。</span><br></pre></td></tr></table></figure>\n<p>分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> ）情况 属于可控的软件 问题，内存中的数据不会丢失 。 </span><br><span class=\"line\">若重启过程中有持续运行的 Consumer, Master机器出故障后， </span><br><span class=\"line\">Consumer会自动重连到对应的 Slave 机器，不会有消息丢失和偏差 。 </span><br><span class=\"line\">当 Master 角色的机器 重启 以 后， Consumer又会重新连接到 Master机器</span><br><span class=\"line\">若有持续运行的 Producer，一台Master 出故障后，</span><br><span class=\"line\">Producer只能向 Topic下其他的 Master机器发送消息，</span><br><span class=\"line\">如果Producer采用同步发送方式，不会有消息丢失 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、<span class=\"number\">3</span>、<span class=\"number\">4</span>）情况属于软件故障，内存的数据可能丢失，所以刷盘策略不同，造成的影响也不同，</span><br><span class=\"line\">如果 Master、 Slave都配置成 SYNC_FLUSH，可以达到和第 <span class=\"number\">1</span> 种情况相同的效果 。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>、<span class=\"number\">6</span> ）情况属于硬件故障 ，发生第 <span class=\"number\">5</span>、<span class=\"number\">6</span> 种情况的故障，原有机器的磁盘数据可能会丢失。 如果Master和Slave机器间配置成同步复制方式，某一台机器发生 <span class=\"number\">5</span> 或 <span class=\"number\">6</span> 的故障，也可以达到消息不丢失的效果 。 机器间是异步复制，两次 Sync间的消息会丢失。</span><br></pre></td></tr></table></figure>\n\n<p>常规思路：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总的来说，当设置成:</span><br><span class=\"line\"><span class=\"number\">1</span> )多 Master，每个 Master 带有 Slave; </span><br><span class=\"line\"><span class=\"number\">2</span> )主从之间设置成 SYNC_MASTER; </span><br><span class=\"line\"><span class=\"number\">3</span> ) Producer 用同步方式写;</span><br><span class=\"line\"><span class=\"number\">4</span> )刷盘策略设置成 SYNC FLUSH。</span><br><span class=\"line\">就可以消除单点依赖，即使某台机器出现极端故障也不会丢消息 。</span><br></pre></td></tr></table></figure>\n"},{"title":"RocketMQ概述","date":"2020-01-09T12:23:31.000Z","_content":"## 一、什么是RocketMQ？\nRocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件\n\n**什么是企业级分布式消息中间件？**\n简单来说就是升级版的消息队列，而且它要满足如下功能\n\n- 消除单点故障\n- 保证消息传输可靠性\n- 可应对大流量冲击\n\n## 二、RocketMQ的功能介绍\n\n 1. 应用解耦\n 2. 流量削峰\n 3. 消息分发\n\n**应用解耦**\n以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。 \n当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。\n\n**流量削峰**\n每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。 \n通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。\n\n**消息分发**\n不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。\n甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n## 三、RocketMQ的前身今世\n- 2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。\n- 2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。\n- 2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。\n- 2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的\n里程碑 ，同时 RocketMQ 进入 Apache 孵化 。\n\n## 四、RocketMQ各部分角色概述\nRocketMQ的角色划分可以分为四类：\n\n- Producer\n- Consumer\n- Broker\n- NameServer\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。 \n现实生活中的邮政系统要正常运行，离不开这四个角色， \n- 发信者（Producer）\n- 收信者（Consumer）\n- 负责暂存 、 传输的邮局（Broker）\n- 负责协调各个地方邮局的管理机构 （NameServer）\n\n启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。\n同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。\n\n**名词补充：**\n- **Topic:**\n一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 \n- **Message Queue:** \n如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。\nTopic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。\n","source":"_posts/RocketMQ概述.md","raw":"---\ntitle: RocketMQ概述\ndate: 2020-01-09 20:23:31\ntags:\n---\n## 一、什么是RocketMQ？\nRocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件\n\n**什么是企业级分布式消息中间件？**\n简单来说就是升级版的消息队列，而且它要满足如下功能\n\n- 消除单点故障\n- 保证消息传输可靠性\n- 可应对大流量冲击\n\n## 二、RocketMQ的功能介绍\n\n 1. 应用解耦\n 2. 流量削峰\n 3. 消息分发\n\n**应用解耦**\n以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。 \n当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。\n\n**流量削峰**\n每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。 \n通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。\n\n**消息分发**\n不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。\n甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n## 三、RocketMQ的前身今世\n- 2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。\n- 2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。\n- 2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。\n- 2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的\n里程碑 ，同时 RocketMQ 进入 Apache 孵化 。\n\n## 四、RocketMQ各部分角色概述\nRocketMQ的角色划分可以分为四类：\n\n- Producer\n- Consumer\n- Broker\n- NameServer\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。 \n现实生活中的邮政系统要正常运行，离不开这四个角色， \n- 发信者（Producer）\n- 收信者（Consumer）\n- 负责暂存 、 传输的邮局（Broker）\n- 负责协调各个地方邮局的管理机构 （NameServer）\n\n启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。\n同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。\n\n**名词补充：**\n- **Topic:**\n一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 \n- **Message Queue:** \n如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。\nTopic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。\n","slug":"RocketMQ概述","published":1,"updated":"2020-01-09T12:24:31.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2ct00014sz0eki16l63","content":"<h2 id=\"一、什么是RocketMQ？\"><a href=\"#一、什么是RocketMQ？\" class=\"headerlink\" title=\"一、什么是RocketMQ？\"></a>一、什么是RocketMQ？</h2><p>RocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件</p>\n<p><strong>什么是企业级分布式消息中间件？</strong><br>简单来说就是升级版的消息队列，而且它要满足如下功能</p>\n<ul>\n<li>消除单点故障</li>\n<li>保证消息传输可靠性</li>\n<li>可应对大流量冲击</li>\n</ul>\n<h2 id=\"二、RocketMQ的功能介绍\"><a href=\"#二、RocketMQ的功能介绍\" class=\"headerlink\" title=\"二、RocketMQ的功能介绍\"></a>二、RocketMQ的功能介绍</h2><ol>\n<li>应用解耦</li>\n<li>流量削峰</li>\n<li>消息分发</li>\n</ol>\n<p><strong>应用解耦</strong><br>以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。<br><img src=\"https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。<br>当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。</p>\n<p><strong>流量削峰</strong><br>每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。<br>通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。</p>\n<p><strong>消息分发</strong><br>不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。<br>甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。<br><img src=\"https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"三、RocketMQ的前身今世\"><a href=\"#三、RocketMQ的前身今世\" class=\"headerlink\" title=\"三、RocketMQ的前身今世\"></a>三、RocketMQ的前身今世</h2><ul>\n<li>2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。</li>\n<li>2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。</li>\n<li>2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。</li>\n<li>2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的<br>里程碑 ，同时 RocketMQ 进入 Apache 孵化 。</li>\n</ul>\n<h2 id=\"四、RocketMQ各部分角色概述\"><a href=\"#四、RocketMQ各部分角色概述\" class=\"headerlink\" title=\"四、RocketMQ各部分角色概述\"></a>四、RocketMQ各部分角色概述</h2><p>RocketMQ的角色划分可以分为四类：</p>\n<ul>\n<li>Producer</li>\n<li>Consumer</li>\n<li>Broker</li>\n<li>NameServer</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。<br>现实生活中的邮政系统要正常运行，离不开这四个角色， </p>\n<ul>\n<li>发信者（Producer）</li>\n<li>收信者（Consumer）</li>\n<li>负责暂存 、 传输的邮局（Broker）</li>\n<li>负责协调各个地方邮局的管理机构 （NameServer）</li>\n</ul>\n<p>启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 </p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。<br>同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。</p>\n<p><strong>名词补充：</strong></p>\n<ul>\n<li><strong>Topic:</strong><br>一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 </li>\n<li><strong>Message Queue:</strong><br>如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。<br>Topic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是RocketMQ？\"><a href=\"#一、什么是RocketMQ？\" class=\"headerlink\" title=\"一、什么是RocketMQ？\"></a>一、什么是RocketMQ？</h2><p>RocketMQ阿里开源的一款高性能、高吞吐量的分布式消息中间件</p>\n<p><strong>什么是企业级分布式消息中间件？</strong><br>简单来说就是升级版的消息队列，而且它要满足如下功能</p>\n<ul>\n<li>消除单点故障</li>\n<li>保证消息传输可靠性</li>\n<li>可应对大流量冲击</li>\n</ul>\n<h2 id=\"二、RocketMQ的功能介绍\"><a href=\"#二、RocketMQ的功能介绍\" class=\"headerlink\" title=\"二、RocketMQ的功能介绍\"></a>二、RocketMQ的功能介绍</h2><ol>\n<li>应用解耦</li>\n<li>流量削峰</li>\n<li>消息分发</li>\n</ol>\n<p><strong>应用解耦</strong><br>以电商应用为例，用户创建订单后，如果搞合调用库存系统 、 物流系统 、 支付系统，任何一个子系统出了故障或者因为升级等原因暂时不可用，都会造成下单操作异常，影响用户使用体验 。<br><img src=\"https://img-blog.csdnimg.cn/20190130151351288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>当转变成基于消息队列的方式后，系统可用性就高多了，比如物流系统因为发生故障，需要几分钟的时间来修 复 ，在这几分钟的时间里， 物流系统要处理的内容被缓存在消息队列里，用户的下单操作可以正常完成 。<br>当物流系统恢复后，补充处理存储在消息队列里的订单信息即可，终端用户感知不到物流系统发生过几分钟的故障 。</p>\n<p><strong>流量削峰</strong><br>每年的双十一，淘宝的很多活动都在 0 点的时候开启，大部分应用系统流量会在瞬间猛增，这个时候如果没有缓冲机制，不可能承受住短时大流 量 的冲 击。<br>通过利用消息队列，把大量的请求暂存起来，分散到相对长的一段时间内 处理，能大大提高系统的稳定性和用户体验 。</p>\n<p><strong>消息分发</strong><br>不同子系统将日志写入消息队列，数据使用方根据各自需求订阅对应的消息即可。<br>甚至某个团队处理完的结果数据也可以 写人消息队列，作为数据的产生方，供其他团队使用，避免重复计算 。<br><img src=\"https://img-blog.csdnimg.cn/201901301521021.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"三、RocketMQ的前身今世\"><a href=\"#三、RocketMQ的前身今世\" class=\"headerlink\" title=\"三、RocketMQ的前身今世\"></a>三、RocketMQ的前身今世</h2><ul>\n<li>2010 年， B2B 开始大规模使用 ActiveMQ 作为消息内核，随着阿里业务 的快速发展，急需一款支持顺序消息，拥有海量消息堆积能力的消息中间件， MetaQ 1.0 在 2011 年诞生 。</li>\n<li>2012年， MetaQ已经发展到了3.0版本，并抽象出了通用的消息引擎 RocketMQ。 随后，对 RocketMQ 进行了开源 ， 阿里的消息中间件正式走人了 公众视野 。</li>\n<li>2015年， RocketMQ已经经历了多年双十一的洗礼，在可用性、 可靠性以 及稳定性等方面都有出色的表现。</li>\n<li>2016 年， MetaQ 在双十一期间承载了万亿级消息的流转，跨越了一个新的<br>里程碑 ，同时 RocketMQ 进入 Apache 孵化 。</li>\n</ul>\n<h2 id=\"四、RocketMQ各部分角色概述\"><a href=\"#四、RocketMQ各部分角色概述\" class=\"headerlink\" title=\"四、RocketMQ各部分角色概述\"></a>四、RocketMQ各部分角色概述</h2><p>RocketMQ的角色划分可以分为四类：</p>\n<ul>\n<li>Producer</li>\n<li>Consumer</li>\n<li>Broker</li>\n<li>NameServer</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/201901301532523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>分布式消息队列是用来高效地传输消息的，它的功能和现实生活中的邮局收发信件很类似，我们可以类比地说一下相应的模块 。<br>现实生活中的邮政系统要正常运行，离不开这四个角色， </p>\n<ul>\n<li>发信者（Producer）</li>\n<li>收信者（Consumer）</li>\n<li>负责暂存 、 传输的邮局（Broker）</li>\n<li>负责协调各个地方邮局的管理机构 （NameServer）</li>\n</ul>\n<p>启动 RocketMQ 的顺序是先启动 NameServer，再启动 Broker，这时候消息队列已 经可以提供服务了，想发送消息就使用 Producer来发送，想接收消息就使用 Consumer来接收 。 </p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190130153445870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>如上图所示，再复杂一些，很多应用程序既要发送，又要接收，可以启动多个Producer 和 Consumer 来发送多种消息，同时接收多种消息 。<br>同时为了消除单点故障，增加可靠性或增大吞吐量 ，可以在多台机器上部署多个 NameServer 和 Broker，为每个Broker部署一个或多个Slave。</p>\n<p><strong>名词补充：</strong></p>\n<ul>\n<li><strong>Topic:</strong><br>一个分布式消息队列中间件部署好以后，可以给很多个业务提供服务，同一个业务也有不同类型的消息要投递 ， 这些不同类型的消息通过不同的 Topic 名称来区分 。 </li>\n<li><strong>Message Queue:</strong><br>如果一个 Topic要发送和接收的数据量非常大，需要能支持增加并行处理的机器来提高处理速度，这时候一个Topic 可以根据需求设置一个或多个Message Queue（ Message Queue类似分区或 Partition）。<br>Topic有了多个Message Queue后，消息可以并行地向各个Message Queue 发送，消费者也可以并行地从多个 Message Queue读取消息并消费。</li>\n</ul>\n"},{"title":"RocketMQ的环境搭建与相关配置","date":"2020-01-09T12:31:25.000Z","_content":"## 一、RocketMQ的下载\n[http://rocketmq.apache.org/dowloading/releases/](http://rocketmq.apache.org/dowloading/releases/)\n\n## 二、RocketMQ环境搭建\n搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里**搭建一个双主 、 双从 、 无单点故障**的高可用 RocketMQ集群 。\n\n#### 材料准备\n两台物理机（这里我采用了两台虚拟机）\n主机地址：\n192.168.223.41 node01\n192.168.223.42 node02\n\n#### 配置步骤\n**1.解压文件**\nunzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin\n\n**2.启动两机器的nameserver**\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n\n**3.broker配置文件**\n\n**双master配置：**\n\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties\n\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-a\n```\n\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n\n**双slave配置：**\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nlistenPort=11011\nstorePathRootDir=/home/rocketmq/store-a\n```\n**4.启动4个broker：**\n命令：nohup sh ./bin/mqbroker –c config_file &\n\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &\n\njps查看效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n**5.查看集群状态**\n可采用图形化界面管理\nhttps://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\n图形化界面配置过程参考：\nhttps://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\n\n\n## 三、相关配置参数介绍\n\n- namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876 \n\tNamerServer 的地址，可以是多个 。 \n- brokerClusterName=DefaultCluster \n\tCluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业\t务 群使用 。 \n-  brokerName=broker- a \n\tBroker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 \n- brokerid=0\n\t一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 \n- fileReservedTime=48 \n\t在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 \n- deleteWhen=04 \n\t与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 \n- brokerRole=SYNC MASTER \n\tbrokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。 \n\t前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步\t复制\n- flushDiskType=ASYNC FLUSH \n\tflushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷 \t盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况\t下，消息写入 page_cache 后就返回成功状态 。 \n- listenPort=l0911\n\tBroker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号， \t避免冲突 。\n- storePathRootDir=/home/rocketmq/store - a \n\t存储消息以及一些配置信息的根目录 。 \n\n## 四、配置过程踩过的一些坑\n**坑1：**\n下载不同版本rocketmq时，要注意其要求的jdk版本\n原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数\n\n**坑2**：\n启动mqnamesev时候报：\t\nJava HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)\n则需要调整rocketMQ的内存\n\n```java\nvim bin/runserver.sh \nJAVA_OPT=\"${JAVA_OPT} -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\" \n```\n-Xms 的值一定要比 -Xmx 要小不让，也会报错：\nInitial heap size set to a larger value than the maximum heap size\n\n启动mqbroker时报，则修改:\n```java\nvim bin/runbroker.sh\nJAVA_OPT=\"${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m\"\n```\n\n\n","source":"_posts/RocketMQ的环境搭建与相关配置.md","raw":"---\ntitle: RocketMQ的环境搭建与相关配置\ndate: 2020-01-09 20:31:25\ntags:\n---\n## 一、RocketMQ的下载\n[http://rocketmq.apache.org/dowloading/releases/](http://rocketmq.apache.org/dowloading/releases/)\n\n## 二、RocketMQ环境搭建\n搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里**搭建一个双主 、 双从 、 无单点故障**的高可用 RocketMQ集群 。\n\n#### 材料准备\n两台物理机（这里我采用了两台虚拟机）\n主机地址：\n192.168.223.41 node01\n192.168.223.42 node02\n\n#### 配置步骤\n**1.解压文件**\nunzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin\n\n**2.启动两机器的nameserver**\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &\n\n**3.broker配置文件**\n\n**双master配置：**\n\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties\n\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-a\n```\n\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n\n**双slave配置：**\n[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-b\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nlistenPort=10911\nstorePathRootDir=/home/rocketmq/store-b\n```\n[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties\n```java\nnamesrvAddr=192.168.223.41:9876;192.168.223.42:9876\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nlistenPort=11011\nstorePathRootDir=/home/rocketmq/store-a\n```\n**4.启动4个broker：**\n命令：nohup sh ./bin/mqbroker –c config_file &\n\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &\n[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &\n[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &\n\njps查看效果如下：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n**5.查看集群状态**\n可采用图形化界面管理\nhttps://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\n图形化界面配置过程参考：\nhttps://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\n\n\n## 三、相关配置参数介绍\n\n- namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876 \n\tNamerServer 的地址，可以是多个 。 \n- brokerClusterName=DefaultCluster \n\tCluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业\t务 群使用 。 \n-  brokerName=broker- a \n\tBroker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 \n- brokerid=0\n\t一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 \n- fileReservedTime=48 \n\t在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 \n- deleteWhen=04 \n\t与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 \n- brokerRole=SYNC MASTER \n\tbrokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。 \n\t前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步\t复制\n- flushDiskType=ASYNC FLUSH \n\tflushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷 \t盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况\t下，消息写入 page_cache 后就返回成功状态 。 \n- listenPort=l0911\n\tBroker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号， \t避免冲突 。\n- storePathRootDir=/home/rocketmq/store - a \n\t存储消息以及一些配置信息的根目录 。 \n\n## 四、配置过程踩过的一些坑\n**坑1：**\n下载不同版本rocketmq时，要注意其要求的jdk版本\n原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数\n\n**坑2**：\n启动mqnamesev时候报：\t\nJava HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error='Cannot allocate memory' (errno=12)\n则需要调整rocketMQ的内存\n\n```java\nvim bin/runserver.sh \nJAVA_OPT=\"${JAVA_OPT} -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\" \n```\n-Xms 的值一定要比 -Xmx 要小不让，也会报错：\nInitial heap size set to a larger value than the maximum heap size\n\n启动mqbroker时报，则修改:\n```java\nvim bin/runbroker.sh\nJAVA_OPT=\"${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m\"\n```\n\n\n","slug":"RocketMQ的环境搭建与相关配置","published":1,"updated":"2020-01-09T12:31:45.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2cw00024sz0fszb3tyu","content":"<h2 id=\"一、RocketMQ的下载\"><a href=\"#一、RocketMQ的下载\" class=\"headerlink\" title=\"一、RocketMQ的下载\"></a>一、RocketMQ的下载</h2><p><a href=\"http://rocketmq.apache.org/dowloading/releases/\" target=\"_blank\" rel=\"noopener\">http://rocketmq.apache.org/dowloading/releases/</a></p>\n<h2 id=\"二、RocketMQ环境搭建\"><a href=\"#二、RocketMQ环境搭建\" class=\"headerlink\" title=\"二、RocketMQ环境搭建\"></a>二、RocketMQ环境搭建</h2><p>搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里<strong>搭建一个双主 、 双从 、 无单点故障</strong>的高可用 RocketMQ集群 。</p>\n<h4 id=\"材料准备\"><a href=\"#材料准备\" class=\"headerlink\" title=\"材料准备\"></a>材料准备</h4><p>两台物理机（这里我采用了两台虚拟机）<br>主机地址：<br>192.168.223.41 node01<br>192.168.223.42 node02</p>\n<h4 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h4><p><strong>1.解压文件</strong><br>unzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin</p>\n<p><strong>2.启动两机器的nameserver</strong><br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;</p>\n<p><strong>3.broker配置文件</strong></p>\n<p><strong>双master配置：</strong></p>\n<p>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n\n<p><strong>双slave配置：</strong><br>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SLAVE</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">11011</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n<p><strong>4.启动4个broker：</strong><br>命令：nohup sh ./bin/mqbroker –c config_file &amp;</p>\n<p>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &amp;<br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &amp;</p>\n<p>jps查看效果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>5.查看集群状态</strong><br>可采用图形化界面管理<br><a href=\"https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console</a><br>图形化界面配置过程参考：<br><a href=\"https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6</a></p>\n<h2 id=\"三、相关配置参数介绍\"><a href=\"#三、相关配置参数介绍\" class=\"headerlink\" title=\"三、相关配置参数介绍\"></a>三、相关配置参数介绍</h2><ul>\n<li>namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876<br>  NamerServer 的地址，可以是多个 。 </li>\n<li>brokerClusterName=DefaultCluster<br>  Cluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业    务 群使用 。 </li>\n<li>brokerName=broker- a<br> Broker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 </li>\n<li>brokerid=0<br>  一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 </li>\n<li>fileReservedTime=48<br>  在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 </li>\n<li>deleteWhen=04<br>  与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 </li>\n<li>brokerRole=SYNC MASTER<br>  brokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。<br>  前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步    复制</li>\n<li>flushDiskType=ASYNC FLUSH<br>  flushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷     盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况    下，消息写入 page_cache 后就返回成功状态 。 </li>\n<li>listenPort=l0911<br>  Broker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号，     避免冲突 。</li>\n<li>storePathRootDir=/home/rocketmq/store - a<br>  存储消息以及一些配置信息的根目录 。 </li>\n</ul>\n<h2 id=\"四、配置过程踩过的一些坑\"><a href=\"#四、配置过程踩过的一些坑\" class=\"headerlink\" title=\"四、配置过程踩过的一些坑\"></a>四、配置过程踩过的一些坑</h2><p><strong>坑1：</strong><br>下载不同版本rocketmq时，要注意其要求的jdk版本<br>原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数</p>\n<p><strong>坑2</strong>：<br>启动mqnamesev时候报：<br>Java HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error=’Cannot allocate memory’ (errno=12)<br>则需要调整rocketMQ的内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runserver.sh </span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\"</span></span><br></pre></td></tr></table></figure>\n<p>-Xms 的值一定要比 -Xmx 要小不让，也会报错：<br>Initial heap size set to a larger value than the maximum heap size</p>\n<p>启动mqbroker时报，则修改:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runbroker.sh</span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m\"</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、RocketMQ的下载\"><a href=\"#一、RocketMQ的下载\" class=\"headerlink\" title=\"一、RocketMQ的下载\"></a>一、RocketMQ的下载</h2><p><a href=\"http://rocketmq.apache.org/dowloading/releases/\" target=\"_blank\" rel=\"noopener\">http://rocketmq.apache.org/dowloading/releases/</a></p>\n<h2 id=\"二、RocketMQ环境搭建\"><a href=\"#二、RocketMQ环境搭建\" class=\"headerlink\" title=\"二、RocketMQ环境搭建\"></a>二、RocketMQ环境搭建</h2><p>搭建一个单机版的RocketMQ没有太大的实用价值，所以在这里<strong>搭建一个双主 、 双从 、 无单点故障</strong>的高可用 RocketMQ集群 。</p>\n<h4 id=\"材料准备\"><a href=\"#材料准备\" class=\"headerlink\" title=\"材料准备\"></a>材料准备</h4><p>两台物理机（这里我采用了两台虚拟机）<br>主机地址：<br>192.168.223.41 node01<br>192.168.223.42 node02</p>\n<h4 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h4><p><strong>1.解压文件</strong><br>unzip rocketmq-all-4.3.2-bin-release.zip -d ./rocketmq-all-4.3.2-bin</p>\n<p><strong>2.启动两机器的nameserver</strong><br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh bin/mqnamesrv &amp;</p>\n<p><strong>3.broker配置文件</strong></p>\n<p><strong>双master配置：</strong></p>\n<p>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">0</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n\n<p><strong>双slave配置：</strong><br>[root@node01]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-b-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-b</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SYNC_MASTER</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">10911</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-b</span><br></pre></td></tr></table></figure>\n<p>[root@node02]#vim /rocketmq-all-4.3.2-bin-release/conf/2m-2s-sync/broker-a-s.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namesrvAddr=<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.41</span>:<span class=\"number\">9876</span>;<span class=\"number\">192.168</span><span class=\"number\">.223</span><span class=\"number\">.42</span>:<span class=\"number\">9876</span></span><br><span class=\"line\">brokerClusterName=DefaultCluster</span><br><span class=\"line\">brokerName=broker-a</span><br><span class=\"line\">brokerId=<span class=\"number\">1</span></span><br><span class=\"line\">deleteWhen=<span class=\"number\">04</span></span><br><span class=\"line\">fileReservedTime=<span class=\"number\">48</span></span><br><span class=\"line\">brokerRole=SLAVE</span><br><span class=\"line\">flushDiskType=ASYNC_FLUSH</span><br><span class=\"line\">listenPort=<span class=\"number\">11011</span></span><br><span class=\"line\">storePathRootDir=/home/rocketmq/store-a</span><br></pre></td></tr></table></figure>\n<p><strong>4.启动4个broker：</strong><br>命令：nohup sh ./bin/mqbroker –c config_file &amp;</p>\n<p>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a.properties &amp;<br>[root@node01 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b-s.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-b.properties &amp;<br>[root@node02 rocketmq-all-4.3.2-bin-release]# nohup sh ./bin/mqbroker -c ./conf/2m-2s-sync/broker-a-s.properties &amp;</p>\n<p>jps查看效果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190130155920435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong>5.查看集群状态</strong><br>可采用图形化界面管理<br><a href=\"https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console</a><br>图形化界面配置过程参考：<br><a href=\"https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6\" target=\"_blank\" rel=\"noopener\">https://yq.aliyun.com/articles/486069?spm=5176.10695662.1996646101.searchclickresult.37e0a3dbrOPWp6</a></p>\n<h2 id=\"三、相关配置参数介绍\"><a href=\"#三、相关配置参数介绍\" class=\"headerlink\" title=\"三、相关配置参数介绍\"></a>三、相关配置参数介绍</h2><ul>\n<li>namesrvAddr= 192.168.100.131:9876;  192.168.100.132:9876<br>  NamerServer 的地址，可以是多个 。 </li>\n<li>brokerClusterName=DefaultCluster<br>  Cluster 的地址，如果集群机器数比较多，可以分成多个 Cluster，每个 Cluster 供一个业    务 群使用 。 </li>\n<li>brokerName=broker- a<br> Broker 的名称， Master 和 Slave 通过使用相同的 Broker 名称来表明相互关系，以说明某个 Slave 是哪个 Master 的 Slave。 </li>\n<li>brokerid=0<br>  一个 Master Barker可以有多个 Slave, 0表示 Master，大于 0表示不同 Slave 的 ID。 </li>\n<li>fileReservedTime=48<br>  在磁盘上保存消息的时长，单位是小时，自动删除超时的消息 。 </li>\n<li>deleteWhen=04<br>  与 fileReservedTim巳参数呼应，表明在几点做消息删除动作，默认值 04表 示凌晨 4点。 </li>\n<li>brokerRole=SYNC MASTER<br>  brokerRole 有 3 种: SYNC MASTER、 ASYNC MASTER、 SLAVE。<br>  前两个是master，第三个是slave。 Master的前缀代表主从复制方式，异步复制和同步    复制</li>\n<li>flushDiskType=ASYNC FLUSH<br>  flushDiskType表示刷盘策略，分为SYNC_FLUSH和ASYNC_FLUSH两 种，分别代表同步刷     盘和异步刷盘。 同步刷盘情况下，消息真正写人磁盘后再 返回成功状态;异步刷盘情况    下，消息写入 page_cache 后就返回成功状态 。 </li>\n<li>listenPort=l0911<br>  Broker监听的端口 号，如果一台机器上启动了多个 Broker， 则要设置不同 的端口号，     避免冲突 。</li>\n<li>storePathRootDir=/home/rocketmq/store - a<br>  存储消息以及一些配置信息的根目录 。 </li>\n</ul>\n<h2 id=\"四、配置过程踩过的一些坑\"><a href=\"#四、配置过程踩过的一些坑\" class=\"headerlink\" title=\"四、配置过程踩过的一些坑\"></a>四、配置过程踩过的一些坑</h2><p><strong>坑1：</strong><br>下载不同版本rocketmq时，要注意其要求的jdk版本<br>原因，高版本rocketmq中有MaxMetaspaceSize参数，MaxMetaspaceSize为Java8中新引入的参数</p>\n<p><strong>坑2</strong>：<br>启动mqnamesev时候报：<br>Java HotSpot 64-Bit Server VM warning: INFO: os::commit_memory(0x00000006c0000000, 2147483648, 0) failed; error=’Cannot allocate memory’ (errno=12)<br>则需要调整rocketMQ的内存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runserver.sh </span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms128m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=320m\"</span></span><br></pre></td></tr></table></figure>\n<p>-Xms 的值一定要比 -Xmx 要小不让，也会报错：<br>Initial heap size set to a larger value than the maximum heap size</p>\n<p>启动mqbroker时报，则修改:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim bin/runbroker.sh</span><br><span class=\"line\">JAVA_OPT=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m\"</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"RocketMQ使用场景之吞吐量优先Case","date":"2020-01-09T12:36:45.000Z","_content":"\n### 一、Broker端进行消息过滤，提高吞吐量\n**在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。**\n\n##### 过滤方式：\n**方式1：**\n通过tag 和 key 进行过滤(在创建Message时设置）\nTag和 Key的主要差别是使用场景不同 \nTag用在 Consumer的代码中，用来进行服务端消息过滤\nKey 主要用于通过命令行查询消息 。\n\n**方式2：**\n通过sql表达式的方式进行过滤\n\nSqlProducer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class SqlProducer {\n\n    public static void main(String[] args) {\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        for (int i = 0; i < 10; i++) {\n            try {\n                String tag;\n                int div = i % 3;\n                if (div == 0) {\n                    tag = \"TagA\";\n                } else if (div == 1) {\n                    tag = \"TagB\";\n                } else {\n                    tag = \"TagC\";\n                }\n                Message msg = new Message(\"TopicTest\",\n                    tag,\n                    (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET)\n                );\n                msg.putUserProperty(\"a\", String.valueOf(i));\n\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            } catch (Exception e) {\n                e.printStackTrace();\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        }\n        producer.shutdown();\n    }\n}\n```\n\nSqlConsumer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.MessageSelector;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class SqlConsumer {\n\n    public static void main(String[] args) {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_4\");\n        try {\n            consumer.subscribe(\"TopicTest\",\n                MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\" +\n                    \"and (a is not null and a between 0  3)\"));\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        try {\n            consumer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n\n```\n\n**方式3：**\nFilter Server方式过滤\n\nproducer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.start();\n\n        try {\n            for (int i = 0; i < 6000000; i++) {\n                Message msg = new Message(\"TopicFilter7\",\n                    \"TagA\",\n                    \"OrderID001\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n\n                msg.putUserProperty(\"SequenceId\", String.valueOf(i));\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        producer.shutdown();\n    }\n}\n\n```\nconsumer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException, IOException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ConsumerGroupNamecc4\");\n\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        File classFile = new File(classLoader.getResource(\"MessageFilterImpl.java\").getFile());\n\n        String filterCode = MixAll.file2String(classFile);\n        consumer.subscribe(\"TopicTest\", \"org.apache.rocketmq.example.filter.MessageFilterImpl\",\n            filterCode);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n\n### 二、提高Consumer处理能力\n**1.提高消费并行度**\n方式1：增加consumer实例\n方式2：提高单个 Consumer 实例中的并行处理的线程数\n（修改 consumeThreadMin 和 consumeThreadMax)\n\n**2.批量方式进行消费**\n设置 Consumer 的 consumeMessageBatchMaxSize \n这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表\n\n**注意：**\nbroker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加\n该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条\n\n**3.检测延时情况，跳过非重要消息**\nConsumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积\n这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度\n\n### 三、Consumer负载均衡\n**DefaultMQPushConsumer的负载均衡：**\n负载均衡过程不需要使用者操心，客户端程序会自动处理\n每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace\n\n**注意：**\n负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)\n负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。\n3m2c: 2 1\n3m4c: 1 1 1 0\n可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。\n\n**DefaultMQPullConsumer 的负载均衡：**\n**1.通过registerMessageQueueListener 函数**\nregisterMessageQueueListener函数在有新的Consumer加入或退出时被触发。 \n\n**2.通过MQPullConsumerScheduleService类**\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.consumer.MQPullConsumer;\nimport org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.consumer.PullTaskCallback;\nimport org.apache.rocketmq.client.consumer.PullTaskContext;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\npublic class PullScheduleService {\n\n    public static void main(String[] args) throws MQClientException {\n        final MQPullConsumerScheduleService scheduleService = new MQPullConsumerScheduleService(\"GroupName1\");\n\n        scheduleService.setMessageModel(MessageModel.CLUSTERING);\n        scheduleService.registerPullTaskCallback(\"TopicTest\", new PullTaskCallback() {\n\n            @Override\n            public void doPullTask(MessageQueue mq, PullTaskContext context) {\n                MQPullConsumer consumer = context.getPullConsumer();\n                try {\n\n                    long offset = consumer.fetchConsumeOffset(mq, false);\n                    if (offset < 0)\n                        offset = 0;\n\n                    PullResult pullResult = consumer.pull(mq, \"*\", offset, 32);\n                    System.out.printf(\"%s%n\", offset + \"\\t\" + mq + \"\\t\" + pullResult);\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());\n\n                    context.setPullNextDelayTimeMillis(100);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        scheduleService.start();\n    }\n}\n```\n\n### 四、提高Producer发送速度\n**途径1：**\n增加Producer并发量，使用多个Producer实例同时发送\n\n**注意：**\n不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。\n\n**途径2：**\n可靠性要求不高的场景下，可以采用OneWay方式发送。\n单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，\n即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。\n\n具体参考代码如下：\n\n```java\npublic class OnewayProducer {\n    public static void main(String[] args) throws Exception{\n        //Instantiate with a producer group name.\n        DefaultMQProducer producer = new DefaultMQProducer(\"example_group_name\");\n        //Launch the instance.\n        producer.start();\n        for (int i = 0; i < 100; i++) {\n            //Create a message instance, specifying topic, tag and message body.\n            Message msg = new Message(\"TopicTest\" /* Topic */,\n                    \"TagA\" /* Tag */,\n                    (\"Hello RocketMQ \" +\n                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            //Call send message to deliver message to one of brokers.\n            producer.sendOneway(msg);\n\n        }\n        //Shut down once the producer instance is not longer in use.\n        producer.shutdown();\n    }\n}\n```\n","source":"_posts/RocketMQ使用场景之吞吐量优先Case.md","raw":"---\ntitle: RocketMQ使用场景之吞吐量优先Case\ndate: 2020-01-09 20:36:45\ntags:\n---\n\n### 一、Broker端进行消息过滤，提高吞吐量\n**在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。**\n\n##### 过滤方式：\n**方式1：**\n通过tag 和 key 进行过滤(在创建Message时设置）\nTag和 Key的主要差别是使用场景不同 \nTag用在 Consumer的代码中，用来进行服务端消息过滤\nKey 主要用于通过命令行查询消息 。\n\n**方式2：**\n通过sql表达式的方式进行过滤\n\nSqlProducer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class SqlProducer {\n\n    public static void main(String[] args) {\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        for (int i = 0; i < 10; i++) {\n            try {\n                String tag;\n                int div = i % 3;\n                if (div == 0) {\n                    tag = \"TagA\";\n                } else if (div == 1) {\n                    tag = \"TagB\";\n                } else {\n                    tag = \"TagC\";\n                }\n                Message msg = new Message(\"TopicTest\",\n                    tag,\n                    (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET)\n                );\n                msg.putUserProperty(\"a\", String.valueOf(i));\n\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            } catch (Exception e) {\n                e.printStackTrace();\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    e1.printStackTrace();\n                }\n            }\n        }\n        producer.shutdown();\n    }\n}\n```\n\nSqlConsumer.java\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.MessageSelector;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class SqlConsumer {\n\n    public static void main(String[] args) {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name_4\");\n        try {\n            consumer.subscribe(\"TopicTest\",\n                MessageSelector.bySql(\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\" +\n                    \"and (a is not null and a between 0  3)\"));\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        try {\n            consumer.start();\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return;\n        }\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n\n```\n\n**方式3：**\nFilter Server方式过滤\n\nproducer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.start();\n\n        try {\n            for (int i = 0; i < 6000000; i++) {\n                Message msg = new Message(\"TopicFilter7\",\n                    \"TagA\",\n                    \"OrderID001\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n\n                msg.putUserProperty(\"SequenceId\", String.valueOf(i));\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        producer.shutdown();\n    }\n}\n\n```\nconsumer.java\n\n```java\npackage org.apache.rocketmq.example.filter;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException, IOException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ConsumerGroupNamecc4\");\n\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        File classFile = new File(classLoader.getResource(\"MessageFilterImpl.java\").getFile());\n\n        String filterCode = MixAll.file2String(classFile);\n        consumer.subscribe(\"TopicTest\", \"org.apache.rocketmq.example.filter.MessageFilterImpl\",\n            filterCode);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n\n### 二、提高Consumer处理能力\n**1.提高消费并行度**\n方式1：增加consumer实例\n方式2：提高单个 Consumer 实例中的并行处理的线程数\n（修改 consumeThreadMin 和 consumeThreadMax)\n\n**2.批量方式进行消费**\n设置 Consumer 的 consumeMessageBatchMaxSize \n这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表\n\n**注意：**\nbroker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加\n该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条\n\n**3.检测延时情况，跳过非重要消息**\nConsumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积\n这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度\n\n### 三、Consumer负载均衡\n**DefaultMQPushConsumer的负载均衡：**\n负载均衡过程不需要使用者操心，客户端程序会自动处理\n每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace\n\n**注意：**\n负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)\n负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。\n3m2c: 2 1\n3m4c: 1 1 1 0\n可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。\n\n**DefaultMQPullConsumer 的负载均衡：**\n**1.通过registerMessageQueueListener 函数**\nregisterMessageQueueListener函数在有新的Consumer加入或退出时被触发。 \n\n**2.通过MQPullConsumerScheduleService类**\n具体参考代码如下：\n\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.consumer.MQPullConsumer;\nimport org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.consumer.PullTaskCallback;\nimport org.apache.rocketmq.client.consumer.PullTaskContext;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\npublic class PullScheduleService {\n\n    public static void main(String[] args) throws MQClientException {\n        final MQPullConsumerScheduleService scheduleService = new MQPullConsumerScheduleService(\"GroupName1\");\n\n        scheduleService.setMessageModel(MessageModel.CLUSTERING);\n        scheduleService.registerPullTaskCallback(\"TopicTest\", new PullTaskCallback() {\n\n            @Override\n            public void doPullTask(MessageQueue mq, PullTaskContext context) {\n                MQPullConsumer consumer = context.getPullConsumer();\n                try {\n\n                    long offset = consumer.fetchConsumeOffset(mq, false);\n                    if (offset < 0)\n                        offset = 0;\n\n                    PullResult pullResult = consumer.pull(mq, \"*\", offset, 32);\n                    System.out.printf(\"%s%n\", offset + \"\\t\" + mq + \"\\t\" + pullResult);\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());\n\n                    context.setPullNextDelayTimeMillis(100);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        scheduleService.start();\n    }\n}\n```\n\n### 四、提高Producer发送速度\n**途径1：**\n增加Producer并发量，使用多个Producer实例同时发送\n\n**注意：**\n不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。\n\n**途径2：**\n可靠性要求不高的场景下，可以采用OneWay方式发送。\n单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，\n即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。\n\n具体参考代码如下：\n\n```java\npublic class OnewayProducer {\n    public static void main(String[] args) throws Exception{\n        //Instantiate with a producer group name.\n        DefaultMQProducer producer = new DefaultMQProducer(\"example_group_name\");\n        //Launch the instance.\n        producer.start();\n        for (int i = 0; i < 100; i++) {\n            //Create a message instance, specifying topic, tag and message body.\n            Message msg = new Message(\"TopicTest\" /* Topic */,\n                    \"TagA\" /* Tag */,\n                    (\"Hello RocketMQ \" +\n                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n            );\n            //Call send message to deliver message to one of brokers.\n            producer.sendOneway(msg);\n\n        }\n        //Shut down once the producer instance is not longer in use.\n        producer.shutdown();\n    }\n}\n```\n","slug":"RocketMQ使用场景之吞吐量优先Case","published":1,"updated":"2020-01-09T12:37:01.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2cx00034sz03tac2h2u","content":"<h3 id=\"一、Broker端进行消息过滤，提高吞吐量\"><a href=\"#一、Broker端进行消息过滤，提高吞吐量\" class=\"headerlink\" title=\"一、Broker端进行消息过滤，提高吞吐量\"></a>一、Broker端进行消息过滤，提高吞吐量</h3><p><strong>在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。</strong></p>\n<h5 id=\"过滤方式：\"><a href=\"#过滤方式：\" class=\"headerlink\" title=\"过滤方式：\"></a>过滤方式：</h5><p><strong>方式1：</strong><br>通过tag 和 key 进行过滤(在创建Message时设置）<br>Tag和 Key的主要差别是使用场景不同<br>Tag用在 Consumer的代码中，用来进行服务端消息过滤<br>Key 主要用于通过命令行查询消息 。</p>\n<p><strong>方式2：</strong><br>通过sql表达式的方式进行过滤</p>\n<p>SqlProducer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String tag;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> div = i % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (div == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagA\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (div == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagB\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagC\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                    tag,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class=\"line\">                );</span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"a\"</span>, String.valueOf(i));</span><br><span class=\"line\"></span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SqlConsumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MessageSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_4\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                MessageSelector.bySql(<span class=\"string\">\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"and (a is not null and a between 0  3)\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式3：</strong><br>Filter Server方式过滤</p>\n<p>producer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6000000</span>; i++) &#123;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicFilter7\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID001\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\"></span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"SequenceId\"</span>, String.valueOf(i));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>consumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.MixAll;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException, IOException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupNamecc4\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        File classFile = <span class=\"keyword\">new</span> File(classLoader.getResource(<span class=\"string\">\"MessageFilterImpl.java\"</span>).getFile());</span><br><span class=\"line\"></span><br><span class=\"line\">        String filterCode = MixAll.file2String(classFile);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"org.apache.rocketmq.example.filter.MessageFilterImpl\"</span>,</span><br><span class=\"line\">            filterCode);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"二、提高Consumer处理能力\"><a href=\"#二、提高Consumer处理能力\" class=\"headerlink\" title=\"二、提高Consumer处理能力\"></a>二、提高Consumer处理能力</h3><p><strong>1.提高消费并行度</strong><br>方式1：增加consumer实例<br>方式2：提高单个 Consumer 实例中的并行处理的线程数<br>（修改 consumeThreadMin 和 consumeThreadMax)</p>\n<p><strong>2.批量方式进行消费</strong><br>设置 Consumer 的 consumeMessageBatchMaxSize<br>这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表</p>\n<p><strong>注意：</strong><br>broker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加<br>该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条</p>\n<p><strong>3.检测延时情况，跳过非重要消息</strong><br>Consumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积<br>这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度</p>\n<h3 id=\"三、Consumer负载均衡\"><a href=\"#三、Consumer负载均衡\" class=\"headerlink\" title=\"三、Consumer负载均衡\"></a>三、Consumer负载均衡</h3><p><strong>DefaultMQPushConsumer的负载均衡：</strong><br>负载均衡过程不需要使用者操心，客户端程序会自动处理<br>每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace</p>\n<p><strong>注意：</strong><br>负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)<br>负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。<br>3m2c: 2 1<br>3m4c: 1 1 1 0<br>可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。</p>\n<p><strong>DefaultMQPullConsumer 的负载均衡：</strong><br><strong>1.通过registerMessageQueueListener 函数</strong><br>registerMessageQueueListener函数在有新的Consumer加入或退出时被触发。 </p>\n<p><strong>2.通过MQPullConsumerScheduleService类</strong><br>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullScheduleService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> MQPullConsumerScheduleService scheduleService = <span class=\"keyword\">new</span> MQPullConsumerScheduleService(<span class=\"string\">\"GroupName1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\">        scheduleService.registerPullTaskCallback(<span class=\"string\">\"TopicTest\"</span>, <span class=\"keyword\">new</span> PullTaskCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPullTask</span><span class=\"params\">(MessageQueue mq, PullTaskContext context)</span> </span>&#123;</span><br><span class=\"line\">                MQPullConsumer consumer = context.getPullConsumer();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> offset = consumer.fetchConsumeOffset(mq, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        offset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    PullResult pullResult = consumer.pull(mq, <span class=\"string\">\"*\"</span>, offset, <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, offset + <span class=\"string\">\"\\t\"</span> + mq + <span class=\"string\">\"\\t\"</span> + pullResult);</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\"></span><br><span class=\"line\">                    context.setPullNextDelayTimeMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、提高Producer发送速度\"><a href=\"#四、提高Producer发送速度\" class=\"headerlink\" title=\"四、提高Producer发送速度\"></a>四、提高Producer发送速度</h3><p><strong>途径1：</strong><br>增加Producer并发量，使用多个Producer实例同时发送</p>\n<p><strong>注意：</strong><br>不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。</p>\n<p><strong>途径2：</strong><br>可靠性要求不高的场景下，可以采用OneWay方式发送。<br>单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，<br>即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。</p>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnewayProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Instantiate with a producer group name.</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"example_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Launch the instance.</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class=\"line\">            Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> +</span><br><span class=\"line\">                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">//Call send message to deliver message to one of brokers.</span></span><br><span class=\"line\">            producer.sendOneway(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Shut down once the producer instance is not longer in use.</span></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Broker端进行消息过滤，提高吞吐量\"><a href=\"#一、Broker端进行消息过滤，提高吞吐量\" class=\"headerlink\" title=\"一、Broker端进行消息过滤，提高吞吐量\"></a>一、Broker端进行消息过滤，提高吞吐量</h3><p><strong>在 Broker端进行消息过滤，可以减少无效消息发送到 Consumer，少占用网络带宽从而提高吞吐量 。</strong></p>\n<h5 id=\"过滤方式：\"><a href=\"#过滤方式：\" class=\"headerlink\" title=\"过滤方式：\"></a>过滤方式：</h5><p><strong>方式1：</strong><br>通过tag 和 key 进行过滤(在创建Message时设置）<br>Tag和 Key的主要差别是使用场景不同<br>Tag用在 Consumer的代码中，用来进行服务端消息过滤<br>Key 主要用于通过命令行查询消息 。</p>\n<p><strong>方式2：</strong><br>通过sql表达式的方式进行过滤</p>\n<p>SqlProducer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String tag;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> div = i % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (div == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagA\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (div == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagB\"</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    tag = <span class=\"string\">\"TagC\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                    tag,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET)</span><br><span class=\"line\">                );</span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"a\"</span>, String.valueOf(i));</span><br><span class=\"line\"></span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e1) &#123;</span><br><span class=\"line\">                    e1.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SqlConsumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MessageSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"please_rename_unique_group_name_4\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                MessageSelector.bySql(<span class=\"string\">\"(TAGS is not null and TAGS in ('TagA', 'TagB'))\"</span> +</span><br><span class=\"line\">                    <span class=\"string\">\"and (a is not null and a between 0  3)\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式3：</strong><br>Filter Server方式过滤</p>\n<p>producer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6000000</span>; i++) &#123;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicFilter7\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID001\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\"></span><br><span class=\"line\">                msg.putUserProperty(<span class=\"string\">\"SequenceId\"</span>, String.valueOf(i));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>consumer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.MixAll;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException, IOException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"ConsumerGroupNamecc4\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        File classFile = <span class=\"keyword\">new</span> File(classLoader.getResource(<span class=\"string\">\"MessageFilterImpl.java\"</span>).getFile());</span><br><span class=\"line\"></span><br><span class=\"line\">        String filterCode = MixAll.file2String(classFile);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"TopicTest\"</span>, <span class=\"string\">\"org.apache.rocketmq.example.filter.MessageFilterImpl\"</span>,</span><br><span class=\"line\">            filterCode);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"二、提高Consumer处理能力\"><a href=\"#二、提高Consumer处理能力\" class=\"headerlink\" title=\"二、提高Consumer处理能力\"></a>二、提高Consumer处理能力</h3><p><strong>1.提高消费并行度</strong><br>方式1：增加consumer实例<br>方式2：提高单个 Consumer 实例中的并行处理的线程数<br>（修改 consumeThreadMin 和 consumeThreadMax)</p>\n<p><strong>2.批量方式进行消费</strong><br>设置 Consumer 的 consumeMessageBatchMaxSize<br>这个参数 ，默认是 1，如果设置为 N，在消息多的时候每次收到的是个长度为 N的消息链表</p>\n<p><strong>注意：</strong><br>broker配置文件的maxTransferCountOnMessageInMemory参数也要相应增加<br>该参数指的是服务器但允许在内存中传递的最大消息数，默认是32条</p>\n<p><strong>3.检测延时情况，跳过非重要消息</strong><br>Consumer 在消费的过程中， 如果发现由于某种原因发生严重的消息堆积，短时间无法消除堆积<br>这个时候可以选择丢弃不重要 的消息，使 Consumer尽快追上 Producer 的进度</p>\n<h3 id=\"三、Consumer负载均衡\"><a href=\"#三、Consumer负载均衡\" class=\"headerlink\" title=\"三、Consumer负载均衡\"></a>三、Consumer负载均衡</h3><p><strong>DefaultMQPushConsumer的负载均衡：</strong><br>负载均衡过程不需要使用者操心，客户端程序会自动处理<br>每启动一个consumer就会触发一次doRebalance,ConsumerGroup加入新consuemr时，也会触发doRebalace</p>\n<p><strong>注意：</strong><br>负载均衡算法默认使用AllocateMessageQueueAveragely。(分配粒度只到 Message Queue)<br>负载均衡的结果与 Topic 的 Message Queue 数量，以及 ConsumerGroup 里的 Consumer 的数量有关 。<br>3m2c: 2 1<br>3m4c: 1 1 1 0<br>可见Message Queue数量设置过小不利于做负载均衡,通常情况下，应把一个 Topic 的Message Queue 数设置为 16。</p>\n<p><strong>DefaultMQPullConsumer 的负载均衡：</strong><br><strong>1.通过registerMessageQueueListener 函数</strong><br>registerMessageQueueListener函数在有新的Consumer加入或退出时被触发。 </p>\n<p><strong>2.通过MQPullConsumerScheduleService类</strong><br>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.MQPullConsumerScheduleService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullTaskContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.protocol.heartbeat.MessageModel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullScheduleService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> MQPullConsumerScheduleService scheduleService = <span class=\"keyword\">new</span> MQPullConsumerScheduleService(<span class=\"string\">\"GroupName1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\">        scheduleService.registerPullTaskCallback(<span class=\"string\">\"TopicTest\"</span>, <span class=\"keyword\">new</span> PullTaskCallback() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPullTask</span><span class=\"params\">(MessageQueue mq, PullTaskContext context)</span> </span>&#123;</span><br><span class=\"line\">                MQPullConsumer consumer = context.getPullConsumer();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> offset = consumer.fetchConsumeOffset(mq, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                        offset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    PullResult pullResult = consumer.pull(mq, <span class=\"string\">\"*\"</span>, offset, <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, offset + <span class=\"string\">\"\\t\"</span> + mq + <span class=\"string\">\"\\t\"</span> + pullResult);</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\"></span><br><span class=\"line\">                    context.setPullNextDelayTimeMillis(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        scheduleService.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、提高Producer发送速度\"><a href=\"#四、提高Producer发送速度\" class=\"headerlink\" title=\"四、提高Producer发送速度\"></a>四、提高Producer发送速度</h3><p><strong>途径1：</strong><br>增加Producer并发量，使用多个Producer实例同时发送</p>\n<p><strong>注意：</strong><br>不用担心多 Producer 同时写会降低消息写磁盘的效率， RocketMQ 引入了 一个并发窗口，在窗口内消息可以并发地写人 DirectMem 中 ， 然后异步地将连续一段无空洞的数据刷入文件系统当中 。</p>\n<p><strong>途径2：</strong><br>可靠性要求不高的场景下，可以采用OneWay方式发送。<br>单向（Oneway）发送特点为发送方只负责发送消息，不等待服务器回应且没有回调函数触发，<br>即只发送请求不等待应答。 此方式发送消息的过程耗时非常短，一般在微秒级别。</p>\n<p>具体参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnewayProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Instantiate with a producer group name.</span></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"example_group_name\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Launch the instance.</span></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class=\"line\">            Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span> <span class=\"comment\">/* Topic */</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span> <span class=\"comment\">/* Tag */</span>,</span><br><span class=\"line\">                    (<span class=\"string\">\"Hello RocketMQ \"</span> +</span><br><span class=\"line\">                            i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class=\"comment\">/* Message body */</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"comment\">//Call send message to deliver message to one of brokers.</span></span><br><span class=\"line\">            producer.sendOneway(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//Shut down once the producer instance is not longer in use.</span></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"RocketMQ角色详解之NameServer","date":"2020-01-09T12:34:51.000Z","_content":"### 一、NameServer的功能\n**NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。** \n\n需要了解的两个知识：\n\n - 热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。\n - 心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)\n\n### 二、NameServer的集群状态存储结构\n**集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。**\n\n**1.private final HashMap<String， List<QueueData>> topicQueueTable**\n\n```\n Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。\nValue 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。\nQueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。\n```\n\n**2.private final HashMap<String， BrokerData> Broker- AddrTable**\n\n```\n这个结构存储着一个 BrokerName 对应的属性信 息，\n包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。\n```\n\n**3.private final HashMap<String， Set<String>> ClusterAddrTable**\n\n```\n存储的是集群中 Cluster 的信息\nCluster 名称对应一个由 BrokerName组成的集合\n```\n\n**4.private final HashMap<String， BrokerLivelnfo> Broker- LiveTable**\n\n```\nBrokerLiveTable 存储的内容是这台 Broker机器的实时状态，\n包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。\n```\n\n**5.private fina l HashMap<String ， List<String>> filterServerTable**\n\n```\nFilter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。\n一个Broker可以有一个或多个Filter Server。 \nKey 是 Broker 的地址\nValue 是和这个 Broker关联的多个 Filter Server 的地址 。\n```\n\n### 三、为什么不用已有的Zookeeper？\n\nZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。\n中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。\n","source":"_posts/RocketMQ角色详解之NameServer.md","raw":"---\ntitle: RocketMQ角色详解之NameServer\ndate: 2020-01-09 20:34:51\ntags:\n---\n### 一、NameServer的功能\n**NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。** \n\n需要了解的两个知识：\n\n - 热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。\n - 心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)\n\n### 二、NameServer的集群状态存储结构\n**集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。**\n\n**1.private final HashMap<String， List<QueueData>> topicQueueTable**\n\n```\n Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。\nValue 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。\nQueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。\n```\n\n**2.private final HashMap<String， BrokerData> Broker- AddrTable**\n\n```\n这个结构存储着一个 BrokerName 对应的属性信 息，\n包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。\n```\n\n**3.private final HashMap<String， Set<String>> ClusterAddrTable**\n\n```\n存储的是集群中 Cluster 的信息\nCluster 名称对应一个由 BrokerName组成的集合\n```\n\n**4.private final HashMap<String， BrokerLivelnfo> Broker- LiveTable**\n\n```\nBrokerLiveTable 存储的内容是这台 Broker机器的实时状态，\n包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。\n```\n\n**5.private fina l HashMap<String ， List<String>> filterServerTable**\n\n```\nFilter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。\n一个Broker可以有一个或多个Filter Server。 \nKey 是 Broker 的地址\nValue 是和这个 Broker关联的多个 Filter Server 的地址 。\n```\n\n### 三、为什么不用已有的Zookeeper？\n\nZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。\n中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。\n","slug":"RocketMQ角色详解之NameServer","published":1,"updated":"2020-01-09T12:35:01.632Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2cz00044sz0hitp00mg","content":"<h3 id=\"一、NameServer的功能\"><a href=\"#一、NameServer的功能\" class=\"headerlink\" title=\"一、NameServer的功能\"></a>一、NameServer的功能</h3><p><strong>NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。</strong> </p>\n<p>需要了解的两个知识：</p>\n<ul>\n<li>热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。</li>\n<li>心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)</li>\n</ul>\n<h3 id=\"二、NameServer的集群状态存储结构\"><a href=\"#二、NameServer的集群状态存储结构\" class=\"headerlink\" title=\"二、NameServer的集群状态存储结构\"></a>二、NameServer的集群状态存储结构</h3><p><strong>集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。</strong></p>\n<p><strong>1.private final HashMap&lt;String， List<QueueData>&gt; topicQueueTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。</span><br><span class=\"line\">Value 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。</span><br><span class=\"line\">QueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.private final HashMap&lt;String， BrokerData&gt; Broker- AddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个结构存储着一个 BrokerName 对应的属性信 息，</span><br><span class=\"line\">包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.private final HashMap&lt;String， Set<String>&gt; ClusterAddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">存储的是集群中 Cluster 的信息</span><br><span class=\"line\">Cluster 名称对应一个由 BrokerName组成的集合</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.private final HashMap&lt;String， BrokerLivelnfo&gt; Broker- LiveTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BrokerLiveTable 存储的内容是这台 Broker机器的实时状态，</span><br><span class=\"line\">包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。</span><br></pre></td></tr></table></figure>\n\n<p><strong>5.private fina l HashMap&lt;String ， List<String>&gt; filterServerTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。</span><br><span class=\"line\">一个Broker可以有一个或多个Filter Server。 </span><br><span class=\"line\">Key 是 Broker 的地址</span><br><span class=\"line\">Value 是和这个 Broker关联的多个 Filter Server 的地址 。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、为什么不用已有的Zookeeper？\"><a href=\"#三、为什么不用已有的Zookeeper？\" class=\"headerlink\" title=\"三、为什么不用已有的Zookeeper？\"></a>三、为什么不用已有的Zookeeper？</h3><p>ZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。<br>中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、NameServer的功能\"><a href=\"#一、NameServer的功能\" class=\"headerlink\" title=\"一、NameServer的功能\"></a>一、NameServer的功能</h3><p><strong>NameServer是整个消息队列中的状态服务器，集群的各个组件通过它来了解全局的信息 。</strong> </p>\n<p>需要了解的两个知识：</p>\n<ul>\n<li>热备份： NamServer可以部署多个，相互之间独立，其他角色同时向多个NameServer 机器上报状态信息。</li>\n<li>心跳机制： NameServer 中的 Broker、 Topic等状态信息不会持久存储，都是由各个角色定时上报并存储到内存中，超时不上报的话， NameServer会认为某个机器出故障不可用了，其他组件会把这个机器从可用列表里移除 。 （每 10秒检查一次，时间戳超过 2分钟则认为Broker已失效。)</li>\n</ul>\n<h3 id=\"二、NameServer的集群状态存储结构\"><a href=\"#二、NameServer的集群状态存储结构\" class=\"headerlink\" title=\"二、NameServer的集群状态存储结构\"></a>二、NameServer的集群状态存储结构</h3><p><strong>集群的状态就保存于五个变量中，NameServer 的主要工作就是维护这五个变量中存储的信息。</strong></p>\n<p><strong>1.private final HashMap&lt;String， List<QueueData>&gt; topicQueueTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Key 是 Topic 的名称，它存储了所有Topic 的属性信息 。</span><br><span class=\"line\">Value 是个 QueueData 队列,队里的长度等于这个 Topic 数据存储的 MasterBroker的个数。</span><br><span class=\"line\">QueueData里存储着 Broker的名称、 读写queue的数量、 同步标识等。</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.private final HashMap&lt;String， BrokerData&gt; Broker- AddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个结构存储着一个 BrokerName 对应的属性信 息，</span><br><span class=\"line\">包括所属的 Cluster 名称，Master Broker 和多个 Slave Broker 的地址信息 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>3.private final HashMap&lt;String， Set<String>&gt; ClusterAddrTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">存储的是集群中 Cluster 的信息</span><br><span class=\"line\">Cluster 名称对应一个由 BrokerName组成的集合</span><br></pre></td></tr></table></figure>\n\n<p><strong>4.private final HashMap&lt;String， BrokerLivelnfo&gt; Broker- LiveTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BrokerLiveTable 存储的内容是这台 Broker机器的实时状态，</span><br><span class=\"line\">包括上次更新状态的时间戳， NameServer会定期检查这个时间戳，超时没有更新就认为这个 Broker无效了，将其从 Broker列表里清除。</span><br></pre></td></tr></table></figure>\n\n<p><strong>5.private fina l HashMap&lt;String ， List<String>&gt; filterServerTable</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filter Server是过滤服务器，是 RocketMQ 的一种服务端过滤方式。</span><br><span class=\"line\">一个Broker可以有一个或多个Filter Server。 </span><br><span class=\"line\">Key 是 Broker 的地址</span><br><span class=\"line\">Value 是和这个 Broker关联的多个 Filter Server 的地址 。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、为什么不用已有的Zookeeper？\"><a href=\"#三、为什么不用已有的Zookeeper？\" class=\"headerlink\" title=\"三、为什么不用已有的Zookeeper？\"></a>三、为什么不用已有的Zookeeper？</h3><p>ZooKeeper 的功能很强大，包括自动 Master 选举等， RocketMQ 的架构设计决定了它不需要进行 Master选举，用不到这些复杂的功能，只需要一个轻量级的元数据服务器就足够了 。<br>中间件对稳定性要求很高， RocketMQ的 NameServer只有很少的代码，容易维护，所以不需要再依赖另一个中间件，从而减少整体维护成本 。</p>\n"},{"title":"RocketMQ角色详解之Broker","date":"2020-01-09T12:35:23.000Z","_content":"### 一、Broker概述\n**Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。\n包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。**\n\n\n### 二、消息的存储与转发\n分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。\n磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。\nRocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。\n\n\n### 三、消息存储结构\n**1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog**\n\n- CommitLog：\n消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。\n\n- ConsumeQueue:\n消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。\n\n在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。\n(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )\n\n**2.此存储结构下的优势**\n\n 1. CommitLog顺序写，大大提高写入效率\n 2. 虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。\n 3. 为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。\n\n\n### 四、高可用机制\n**RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的**\n\n**1.消费端的高可用：**\nMaster角色的 Broker支持读和写， Slave角色的 Broker仅支持读\n当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。\n当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 \n\n**2.发送端的高可用：**\n在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上\n(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，\n这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。\n\n### 五、同步刷盘和异步刷盘\n**同步刷盘方式 :** \n在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。\n\n**异步刷盘方式 :** \n在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;\n当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。\n\n**注意：**\n刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：\nSYNC_FLUSH 同步刷盘 \nASYNC_FLUSH 异步刷盘\n\n### 六、同步复制和异步复制\n如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。\n\n**同步复制方式：** \nMaster 和 Slave 均写成功 后才反馈给客户端写成功状态\n\n**异步复制方式：**\n只要 Master 写成功即可反馈给客户端写成功状态 。\n\n**注意：**\n1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：\nASYNC MASTER 异步复制 \nSYNC MASTER 同步复制\nSLAVE 无影响\n\n2.通常情况下，应该把\n刷盘方式配置成 ASYNC_FLUSH\n主从复制方式配置成 SYNC_MASTER \n这样即使有一台机器出故障，仍然能保证数据不丢。\n","source":"_posts/RocketMQ角色详解之Broker.md","raw":"---\ntitle: RocketMQ角色详解之Broker\ndate: 2020-01-09 20:35:23\ntags:\n---\n### 一、Broker概述\n**Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。\n包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。**\n\n\n### 二、消息的存储与转发\n分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。\n磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。\nRocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。\n\n\n### 三、消息存储结构\n**1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog**\n\n- CommitLog：\n消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。\n\n- ConsumeQueue:\n消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。\n\n在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。\n(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )\n\n**2.此存储结构下的优势**\n\n 1. CommitLog顺序写，大大提高写入效率\n 2. 虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。\n 3. 为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。\n\n\n### 四、高可用机制\n**RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的**\n\n**1.消费端的高可用：**\nMaster角色的 Broker支持读和写， Slave角色的 Broker仅支持读\n当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。\n当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 \n\n**2.发送端的高可用：**\n在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上\n(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，\n这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。\n\n### 五、同步刷盘和异步刷盘\n**同步刷盘方式 :** \n在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。\n\n**异步刷盘方式 :** \n在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;\n当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。\n\n**注意：**\n刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：\nSYNC_FLUSH 同步刷盘 \nASYNC_FLUSH 异步刷盘\n\n### 六、同步复制和异步复制\n如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。\n\n**同步复制方式：** \nMaster 和 Slave 均写成功 后才反馈给客户端写成功状态\n\n**异步复制方式：**\n只要 Master 写成功即可反馈给客户端写成功状态 。\n\n**注意：**\n1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：\nASYNC MASTER 异步复制 \nSYNC MASTER 同步复制\nSLAVE 无影响\n\n2.通常情况下，应该把\n刷盘方式配置成 ASYNC_FLUSH\n主从复制方式配置成 SYNC_MASTER \n这样即使有一台机器出故障，仍然能保证数据不丢。\n","slug":"RocketMQ角色详解之Broker","published":1,"updated":"2020-01-09T12:35:42.504Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2d000054sz0hwo8cz65","content":"<h3 id=\"一、Broker概述\"><a href=\"#一、Broker概述\" class=\"headerlink\" title=\"一、Broker概述\"></a>一、Broker概述</h3><p><strong>Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。<br>包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。</strong></p>\n<h3 id=\"二、消息的存储与转发\"><a href=\"#二、消息的存储与转发\" class=\"headerlink\" title=\"二、消息的存储与转发\"></a>二、消息的存储与转发</h3><p>分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。<br>磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。<br>RocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。</p>\n<h3 id=\"三、消息存储结构\"><a href=\"#三、消息存储结构\" class=\"headerlink\" title=\"三、消息存储结构\"></a>三、消息存储结构</h3><p><strong>1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog</strong></p>\n<ul>\n<li><p>CommitLog：<br>消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。</p>\n</li>\n<li><p>ConsumeQueue:<br>消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。</p>\n</li>\n</ul>\n<p>在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。<br>(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )</p>\n<p><strong>2.此存储结构下的优势</strong></p>\n<ol>\n<li>CommitLog顺序写，大大提高写入效率</li>\n<li>虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。</li>\n<li>为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。</li>\n</ol>\n<h3 id=\"四、高可用机制\"><a href=\"#四、高可用机制\" class=\"headerlink\" title=\"四、高可用机制\"></a>四、高可用机制</h3><p><strong>RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的</strong></p>\n<p><strong>1.消费端的高可用：</strong><br>Master角色的 Broker支持读和写， Slave角色的 Broker仅支持读<br>当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。<br>当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 </p>\n<p><strong>2.发送端的高可用：</strong><br>在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上<br>(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，<br>这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。</p>\n<h3 id=\"五、同步刷盘和异步刷盘\"><a href=\"#五、同步刷盘和异步刷盘\" class=\"headerlink\" title=\"五、同步刷盘和异步刷盘\"></a>五、同步刷盘和异步刷盘</h3><p><strong>同步刷盘方式 :</strong><br>在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。</p>\n<p><strong>异步刷盘方式 :</strong><br>在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;<br>当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。</p>\n<p><strong>注意：</strong><br>刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：<br>SYNC_FLUSH 同步刷盘<br>ASYNC_FLUSH 异步刷盘</p>\n<h3 id=\"六、同步复制和异步复制\"><a href=\"#六、同步复制和异步复制\" class=\"headerlink\" title=\"六、同步复制和异步复制\"></a>六、同步复制和异步复制</h3><p>如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。</p>\n<p><strong>同步复制方式：</strong><br>Master 和 Slave 均写成功 后才反馈给客户端写成功状态</p>\n<p><strong>异步复制方式：</strong><br>只要 Master 写成功即可反馈给客户端写成功状态 。</p>\n<p><strong>注意：</strong><br>1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：<br>ASYNC MASTER 异步复制<br>SYNC MASTER 同步复制<br>SLAVE 无影响</p>\n<p>2.通常情况下，应该把<br>刷盘方式配置成 ASYNC_FLUSH<br>主从复制方式配置成 SYNC_MASTER<br>这样即使有一台机器出故障，仍然能保证数据不丢。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、Broker概述\"><a href=\"#一、Broker概述\" class=\"headerlink\" title=\"一、Broker概述\"></a>一、Broker概述</h3><p><strong>Broker是 RocketMQ 的核心，大部分‘重量级”工作都是由 Broker完成的。<br>包括接收 Producer 发过来的消息、处理 Consumer 的消费消息请求、消息的持 久化存储、消息的 HA 机制以及服务端过滤功能等 。</strong></p>\n<h3 id=\"二、消息的存储与转发\"><a href=\"#二、消息的存储与转发\" class=\"headerlink\" title=\"二、消息的存储与转发\"></a>二、消息的存储与转发</h3><p>分布式队列因为有高可靠性的要求，所以数据要通过磁盘进行持久化存储 。<br>磁盘顺序写速度可以达到 600MB/s，但是随机写的速度只有大概 lOOKB/s。<br>RocketMQ 充分利用了这个特性，提高消息存盘和网络发送的速度 。</p>\n<h3 id=\"三、消息存储结构\"><a href=\"#三、消息存储结构\" class=\"headerlink\" title=\"三、消息存储结构\"></a>三、消息存储结构</h3><p><strong>1.RocketMQ消息的存储形式：ConsumeQueue + CommitLog</strong></p>\n<ul>\n<li><p>CommitLog：<br>消息真正的物理存储文件，每台 Broker上的 CommitLog被本机器所有 ConsumeQueue 共享。</p>\n</li>\n<li><p>ConsumeQueue:<br>消息的逻辑队列，类似数据库的索引文件，存储的是指向物理存储的地址。每个 Topic下的每个 Message Queue都有一个对应的 ConsumeQueue文件。</p>\n</li>\n</ul>\n<p>在 CommitLog 中，一个消息的存储长度是不固定的，RocketMQ 采取一些机制，尽量向 CommitLog 中顺序写，但是随机读，每次读取消息队列先读取consumer Queue,然后再通过consumerQueue去commitLog中拿到消息主体。<br>(ConsumeQueue 的内容也会被写到磁盘里作持久存储 )</p>\n<p><strong>2.此存储结构下的优势</strong></p>\n<ol>\n<li>CommitLog顺序写，大大提高写入效率</li>\n<li>虽然是随机读，但是利用操作系统的 pagecache 机制，可以批量地从磁盘读取作为 cache存到内存中，加速后续的读取速度。</li>\n<li>为了保证完全的顺序写，需要 ConsumeQueue 这个中间结构，在实际情况中，大部分的 ConsumeQueue 能够被全部读入内存，所以这个中间结构的操作速度很快，可以认为是内存读取的速度 。</li>\n</ol>\n<h3 id=\"四、高可用机制\"><a href=\"#四、高可用机制\" class=\"headerlink\" title=\"四、高可用机制\"></a>四、高可用机制</h3><p><strong>RocketMQ 分布式集群是通过 Master 和 Slave 的配合达到高可用性的</strong></p>\n<p><strong>1.消费端的高可用：</strong><br>Master角色的 Broker支持读和写， Slave角色的 Broker仅支持读<br>当 Master 不可用或者繁忙的时候， Consumer 会被自动切换到从 Slave 读 。<br>当一个 Master 角色的机器出现故障后， Consumer 仍然可以从 Slave 读，不影响 Consumer 程序 。 </p>\n<p><strong>2.发送端的高可用：</strong><br>在创建 Topic 的时候，把 Topic 的多个 Message Queue创建在多个 Broker组上<br>(相同 Broker名称，不同 brokerId 的 机器组成 一 个 Broker 组)，<br>这样当一个Broker 组的 Master 不可用后，其他组的 Master 仍然可用， Producer 仍然可以发送消息 。</p>\n<h3 id=\"五、同步刷盘和异步刷盘\"><a href=\"#五、同步刷盘和异步刷盘\" class=\"headerlink\" title=\"五、同步刷盘和异步刷盘\"></a>五、同步刷盘和异步刷盘</h3><p><strong>同步刷盘方式 :</strong><br>在返回写成功状态时，消息已经被写入磁盘 。 消息写入内存的 PAGECACHE 后，立刻通知刷盘线程刷盘，然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态 。</p>\n<p><strong>异步刷盘方式 :</strong><br>在返回写成功状态时 ，消息可能只是被写入了内存的 PAGECACHE，写操作的返回快，吞吐量大 ;<br>当内存里的消息量积累到一定程度时，统一触发 写磁盘动作，快速写人 。</p>\n<p><strong>注意：</strong><br>刷盘方式通过 Broker 配置文件里的 flushDiskType 参数进行设置：<br>SYNC_FLUSH 同步刷盘<br>ASYNC_FLUSH 异步刷盘</p>\n<h3 id=\"六、同步复制和异步复制\"><a href=\"#六、同步复制和异步复制\" class=\"headerlink\" title=\"六、同步复制和异步复制\"></a>六、同步复制和异步复制</h3><p>如果一个 Broker组有 Master和 Slave, 消息需要从 Master复制到 Slave上。</p>\n<p><strong>同步复制方式：</strong><br>Master 和 Slave 均写成功 后才反馈给客户端写成功状态</p>\n<p><strong>异步复制方式：</strong><br>只要 Master 写成功即可反馈给客户端写成功状态 。</p>\n<p><strong>注意：</strong><br>1.复制方式是通过 Broker 配置文件里的 brokerRole 参数进行设置：<br>ASYNC MASTER 异步复制<br>SYNC MASTER 同步复制<br>SLAVE 无影响</p>\n<p>2.通常情况下，应该把<br>刷盘方式配置成 ASYNC_FLUSH<br>主从复制方式配置成 SYNC_MASTER<br>这样即使有一台机器出故障，仍然能保证数据不丢。</p>\n"},{"title":"RocketMQ角色详解之Consumer","date":"2020-01-09T12:33:45.000Z","_content":"### 一、常用Consumer类\n- DefaultMQPushConsumer\n- DefaultMQPullConsumer\n\n**二者的区别：**\nDefaultMQPushConsumer：\n系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高\nDefaultMQPullConsumer：\n读取操作中的大部分功能由使用者自主控制 ，灵活性更高。\n\n两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。\n\n\n### 二、DefaultMQPushConsumer的使用\n##### 主要参数的设置：\n- ConsumerGroupName\n- NameServer地址及端口号\n- Topic\n\n**ConsumerGroupName**\n\n通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用\n\nMessageModel = Clustering时，\n在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。\n\nMessageModel = Broadcasting时，\n同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。\n\n**NameServer地址及端口号**\n可以填写多个 ，用分号隔开，用以消除单点故障\n如 “ip1:port;ip2:port;ip3 :port” \n\n**Topic**\nTopic名称用来标识消息类型， 需要提前创建。\n如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。\n\n**参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息**\n##### 详细代码如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class PushConsumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_JODIE_1\");\n        consumer.subscribe(\"Jodie_topic_1023\", \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setConsumeTimestamp(\"20170422221800\");\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n### DefaultMQPullConsumer的使用\nDefaultMQPullConsumer对消息队列的主要处理流程如下：\n\n 1. 获取Message Queue并遍历\n 2. 维护Offsetstore\n 3. 根据不同消息状态做不同的处理\n\n具体代码参考如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\npublic class PullConsumer {\n    private static final Map<MessageQueue, Long> OFFSE_TABLE = new HashMap<MessageQueue, Long>();\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(\"please_rename_unique_group_name_5\");\n\n        consumer.start();\n\n        Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(\"TopicTest1\");\n        for (MessageQueue mq : mqs) {\n            System.out.printf(\"Consume from the queue: %s%n\", mq);\n            SINGLE_MQ:\n            while (true) {\n                try {\n                    PullResult pullResult =\n                        consumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);\n                    System.out.printf(\"%s%n\", pullResult);\n                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                            break SINGLE_MQ;\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        consumer.shutdown();\n    }\n\n    private static long getMessageQueueOffset(MessageQueue mq) {\n        Long offset = OFFSE_TABLE.get(mq);\n        if (offset != null)\n            return offset;\n\n        return 0;\n    }\n\n    private static void putMessageQueueOffset(MessageQueue mq, long offset) {\n        OFFSE_TABLE.put(mq, offset);\n    }\n\n}\n```\n","source":"_posts/RocketMQ角色详解之Consumer.md","raw":"---\ntitle: RocketMQ角色详解之Consumer\ndate: 2020-01-09 20:33:45\ntags:\n---\n### 一、常用Consumer类\n- DefaultMQPushConsumer\n- DefaultMQPullConsumer\n\n**二者的区别：**\nDefaultMQPushConsumer：\n系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高\nDefaultMQPullConsumer：\n读取操作中的大部分功能由使用者自主控制 ，灵活性更高。\n\n两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。\n\n\n### 二、DefaultMQPushConsumer的使用\n##### 主要参数的设置：\n- ConsumerGroupName\n- NameServer地址及端口号\n- Topic\n\n**ConsumerGroupName**\n\n通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用\n\nMessageModel = Clustering时，\n在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。\n\nMessageModel = Broadcasting时，\n同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。\n\n**NameServer地址及端口号**\n可以填写多个 ，用分号隔开，用以消除单点故障\n如 “ip1:port;ip2:port;ip3 :port” \n\n**Topic**\nTopic名称用来标识消息类型， 需要提前创建。\n如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。\n\n**参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息**\n##### 详细代码如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class PushConsumer {\n\n    public static void main(String[] args) throws InterruptedException, MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"CID_JODIE_1\");\n        consumer.subscribe(\"Jodie_topic_1023\", \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setConsumeTimestamp(\"20170422221800\");\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n}\n```\n\n### DefaultMQPullConsumer的使用\nDefaultMQPullConsumer对消息队列的主要处理流程如下：\n\n 1. 获取Message Queue并遍历\n 2. 维护Offsetstore\n 3. 根据不同消息状态做不同的处理\n\n具体代码参考如下：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;\nimport org.apache.rocketmq.client.consumer.PullResult;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\npublic class PullConsumer {\n    private static final Map<MessageQueue, Long> OFFSE_TABLE = new HashMap<MessageQueue, Long>();\n\n    public static void main(String[] args) throws MQClientException {\n        DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(\"please_rename_unique_group_name_5\");\n\n        consumer.start();\n\n        Set<MessageQueue> mqs = consumer.fetchSubscribeMessageQueues(\"TopicTest1\");\n        for (MessageQueue mq : mqs) {\n            System.out.printf(\"Consume from the queue: %s%n\", mq);\n            SINGLE_MQ:\n            while (true) {\n                try {\n                    PullResult pullResult =\n                        consumer.pullBlockIfNotFound(mq, null, getMessageQueueOffset(mq), 32);\n                    System.out.printf(\"%s%n\", pullResult);\n                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());\n                    switch (pullResult.getPullStatus()) {\n                        case FOUND:\n                            break;\n                        case NO_MATCHED_MSG:\n                            break;\n                        case NO_NEW_MSG:\n                            break SINGLE_MQ;\n                        case OFFSET_ILLEGAL:\n                            break;\n                        default:\n                            break;\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        consumer.shutdown();\n    }\n\n    private static long getMessageQueueOffset(MessageQueue mq) {\n        Long offset = OFFSE_TABLE.get(mq);\n        if (offset != null)\n            return offset;\n\n        return 0;\n    }\n\n    private static void putMessageQueueOffset(MessageQueue mq, long offset) {\n        OFFSE_TABLE.put(mq, offset);\n    }\n\n}\n```\n","slug":"RocketMQ角色详解之Consumer","published":1,"updated":"2020-01-10T03:01:01.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2d300064sz0akhyct0b","content":"<h3 id=\"一、常用Consumer类\"><a href=\"#一、常用Consumer类\" class=\"headerlink\" title=\"一、常用Consumer类\"></a>一、常用Consumer类</h3><ul>\n<li>DefaultMQPushConsumer</li>\n<li>DefaultMQPullConsumer</li>\n</ul>\n<p><strong>二者的区别：</strong><br>DefaultMQPushConsumer：<br>系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高<br>DefaultMQPullConsumer：<br>读取操作中的大部分功能由使用者自主控制 ，灵活性更高。</p>\n<p>两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。</p>\n<h3 id=\"二、DefaultMQPushConsumer的使用\"><a href=\"#二、DefaultMQPushConsumer的使用\" class=\"headerlink\" title=\"二、DefaultMQPushConsumer的使用\"></a>二、DefaultMQPushConsumer的使用</h3><h5 id=\"主要参数的设置：\"><a href=\"#主要参数的设置：\" class=\"headerlink\" title=\"主要参数的设置：\"></a>主要参数的设置：</h5><ul>\n<li>ConsumerGroupName</li>\n<li>NameServer地址及端口号</li>\n<li>Topic</li>\n</ul>\n<p><strong>ConsumerGroupName</strong></p>\n<p>通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用</p>\n<p>MessageModel = Clustering时，<br>在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。</p>\n<p>MessageModel = Broadcasting时，<br>同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。</p>\n<p><strong>NameServer地址及端口号</strong><br>可以填写多个 ，用分号隔开，用以消除单点故障<br>如 “ip1:port;ip2:port;ip3 :port” </p>\n<p><strong>Topic</strong><br>Topic名称用来标识消息类型， 需要提前创建。<br>如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。</p>\n<p><strong>参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息</strong></p>\n<h5 id=\"详细代码如下：\"><a href=\"#详细代码如下：\" class=\"headerlink\" title=\"详细代码如下：\"></a>详细代码如下：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PushConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"CID_JODIE_1\"</span>);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"Jodie_topic_1023\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">        consumer.setConsumeTimestamp(<span class=\"string\">\"20170422221800\"</span>);</span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefaultMQPullConsumer的使用\"><a href=\"#DefaultMQPullConsumer的使用\" class=\"headerlink\" title=\"DefaultMQPullConsumer的使用\"></a>DefaultMQPullConsumer的使用</h3><p>DefaultMQPullConsumer对消息队列的主要处理流程如下：</p>\n<ol>\n<li>获取Message Queue并遍历</li>\n<li>维护Offsetstore</li>\n<li>根据不同消息状态做不同的处理</li>\n</ol>\n<p>具体代码参考如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;MessageQueue, Long&gt; OFFSE_TABLE = <span class=\"keyword\">new</span> HashMap&lt;MessageQueue, Long&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPullConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPullConsumer(<span class=\"string\">\"please_rename_unique_group_name_5\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class=\"string\">\"TopicTest1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MessageQueue mq : mqs) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"Consume from the queue: %s%n\"</span>, mq);</span><br><span class=\"line\">            SINGLE_MQ:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    PullResult pullResult =</span><br><span class=\"line\">                        consumer.pullBlockIfNotFound(mq, <span class=\"keyword\">null</span>, getMessageQueueOffset(mq), <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, pullResult);</span><br><span class=\"line\">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span> SINGLE_MQ;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMessageQueueOffset</span><span class=\"params\">(MessageQueue mq)</span> </span>&#123;</span><br><span class=\"line\">        Long offset = OFFSE_TABLE.get(mq);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putMessageQueueOffset</span><span class=\"params\">(MessageQueue mq, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        OFFSE_TABLE.put(mq, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、常用Consumer类\"><a href=\"#一、常用Consumer类\" class=\"headerlink\" title=\"一、常用Consumer类\"></a>一、常用Consumer类</h3><ul>\n<li>DefaultMQPushConsumer</li>\n<li>DefaultMQPullConsumer</li>\n</ul>\n<p><strong>二者的区别：</strong><br>DefaultMQPushConsumer：<br>系统控制读取操作，收到消息后自动调用传入的处理方法来处理，实时性高<br>DefaultMQPullConsumer：<br>读取操作中的大部分功能由使用者自主控制 ，灵活性更高。</p>\n<p>两种Consumer的选取要主要取决于用户的使用场景，适合的才是最好的。</p>\n<h3 id=\"二、DefaultMQPushConsumer的使用\"><a href=\"#二、DefaultMQPushConsumer的使用\" class=\"headerlink\" title=\"二、DefaultMQPushConsumer的使用\"></a>二、DefaultMQPushConsumer的使用</h3><h5 id=\"主要参数的设置：\"><a href=\"#主要参数的设置：\" class=\"headerlink\" title=\"主要参数的设置：\"></a>主要参数的设置：</h5><ul>\n<li>ConsumerGroupName</li>\n<li>NameServer地址及端口号</li>\n<li>Topic</li>\n</ul>\n<p><strong>ConsumerGroupName</strong></p>\n<p>通过设置ConsumerGroupName将多个 Consumer组织到一起对同一topic进行消费， 提高并发处理能力，且ConsumerGroupName需与消息模式 (MessageModel)配合使用</p>\n<p>MessageModel = Clustering时，<br>在 Clustering模式下，同一个 ConsumerGroup(GroupName相同) 里的每个Consumer 只消费所订阅消息的一部分内容， 同一个ConsumerGroup 里所有的 Consumer消费的内容合起来才是所订阅 Topic 内容的整体， 从而达到负载均衡的目的 。</p>\n<p>MessageModel = Broadcasting时，<br>同一个 ConsumerGroup里的每个 Consumer都 能消费到所订阅 Topic 的全部消息，也就是一个消息会被多次分发，被 多个 Consumer消费。</p>\n<p><strong>NameServer地址及端口号</strong><br>可以填写多个 ，用分号隔开，用以消除单点故障<br>如 “ip1:port;ip2:port;ip3 :port” </p>\n<p><strong>Topic</strong><br>Topic名称用来标识消息类型， 需要提前创建。<br>如果不需要消费某 个 Topic 下的所有消息，可以通过指定消息的 Tag 进行消息过滤，在填写 Tag 参数的位置，若赋值为 null 或 * 则表示要消费此Topic 的所有消息 。</p>\n<p><strong>参数设置完毕后将MessageListener注册到该consumer即可自动监听处理接收到的消息</strong></p>\n<h5 id=\"详细代码如下：\"><a href=\"#详细代码如下：\" class=\"headerlink\" title=\"详细代码如下：\"></a>详细代码如下：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PushConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPushConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPushConsumer(<span class=\"string\">\"CID_JODIE_1\"</span>);</span><br><span class=\"line\">        consumer.subscribe(<span class=\"string\">\"Jodie_topic_1023\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">        consumer.setConsumeTimestamp(<span class=\"string\">\"20170422221800\"</span>);</span><br><span class=\"line\">        consumer.registerMessageListener(<span class=\"keyword\">new</span> MessageListenerConcurrently() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s Receive New Messages: %s %n\"</span>, Thread.currentThread().getName(), msgs);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"Consumer Started.%n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DefaultMQPullConsumer的使用\"><a href=\"#DefaultMQPullConsumer的使用\" class=\"headerlink\" title=\"DefaultMQPullConsumer的使用\"></a>DefaultMQPullConsumer的使用</h3><p>DefaultMQPullConsumer对消息队列的主要处理流程如下：</p>\n<ol>\n<li>获取Message Queue并遍历</li>\n<li>维护Offsetstore</li>\n<li>根据不同消息状态做不同的处理</li>\n</ol>\n<p>具体代码参考如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.consumer.PullResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PullConsumer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;MessageQueue, Long&gt; OFFSE_TABLE = <span class=\"keyword\">new</span> HashMap&lt;MessageQueue, Long&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException </span>&#123;</span><br><span class=\"line\">        DefaultMQPullConsumer consumer = <span class=\"keyword\">new</span> DefaultMQPullConsumer(<span class=\"string\">\"please_rename_unique_group_name_5\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;MessageQueue&gt; mqs = consumer.fetchSubscribeMessageQueues(<span class=\"string\">\"TopicTest1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (MessageQueue mq : mqs) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"Consume from the queue: %s%n\"</span>, mq);</span><br><span class=\"line\">            SINGLE_MQ:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    PullResult pullResult =</span><br><span class=\"line\">                        consumer.pullBlockIfNotFound(mq, <span class=\"keyword\">null</span>, getMessageQueueOffset(mq), <span class=\"number\">32</span>);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, pullResult);</span><br><span class=\"line\">                    putMessageQueueOffset(mq, pullResult.getNextBeginOffset());</span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (pullResult.getPullStatus()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> FOUND:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_MATCHED_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> NO_NEW_MSG:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span> SINGLE_MQ;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> OFFSET_ILLEGAL:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        consumer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMessageQueueOffset</span><span class=\"params\">(MessageQueue mq)</span> </span>&#123;</span><br><span class=\"line\">        Long offset = OFFSE_TABLE.get(mq);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (offset != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">putMessageQueueOffset</span><span class=\"params\">(MessageQueue mq, <span class=\"keyword\">long</span> offset)</span> </span>&#123;</span><br><span class=\"line\">        OFFSE_TABLE.put(mq, offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring 概述","date":"2020-01-10T03:14:53.000Z","_content":"##### 一、Spring概述\n>The Spring Framework is an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to, or even replacement for the Enterprise JavaBeans (EJB) model. The Spring Framework is open source.\n\n\n>Spring框架是 Java 平台的一个开源的全栈（Full-stack）应用程序框架和控制反转容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于Java企业版平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了企业级JavaBeans（EJB）模型。且Spring框架是开源的。\n\n\n##### 二、Spring的模块\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161754478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\nSpring是模块化的，这意味着你可以只使用你需要的Spring模块。\n\n| Core Container |  | AOP |  | Messaging |  |\n| --- | --- | --- | --- | --- | --- |\n| Spring-Core | 核心工具类，其他模块大量使用Spring-Core | Spring-AOP | 基于代理的AOP支持 | Spring-Messaging | 对消息架构和协议的支持 |\n| Spring-Beans | 定义对Bean的支持 | Spring-Aspects | 基于AspectJ的AOP支持 |\n| Spring-Context | 运行时的Spring容器 |\n| Spring-Context-Suppot | Spring容器对第三方包的集成支持 |\n| Spring-Expression | 使用表达式语言在运行时查询和操作对象 |\n\n\n| Web |  | Data Access |  | Test |  |\n| --- | --- | --- | --- | --- | --- |\n| Spring-web | 提供基础的web集成的功能 | Spring-JDBC | 提供以JDBC访问数据库的支持 |Test模块主要是针对spring的各个模块做各种各样的测试，包括单元测试、集成测试等等。||\n| Spring-Webmvc | 提供基于Servlet的SpringMVC | Spring-TX | 提供编程式和声明式的事务支持 |\n| Spring-WebSocket | 提供WebSocket功能 | Spring-ORM | 提供对对象/关系映射技术的支持 |\n| Spring-Webmvc-Portlet | 提供Portlet环境支持 | Spring-OXM | 提供对对象/xml映射技术的支持 |\n||| Spring-JMS | 提供对JMS的支持 |\n\n##### 三、Spring的生态\n>###### 1.Spring Boot\n>Spring Boot是一个开发基于Spring的脚手架项目，它默认集成了嵌入式Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。\n>\n>###### 2.Spring Cloud\n>\n>Spring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。\n>Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件的流程。\n>\n>###### 3.Spring Cloud Data Flow\n>\n>Spring Cloud Data Flow用于构建在云环境或K8S中基于微服务的实时或批数据处理架构，具体来讲就是支持一系列需要进行数据处理的场景，如：ETL，数据导入/导出，事件流，预测分析等等。\n>\n>###### 4.Spring Data\n>\n>Spring Data旨在提供一套基于Spring编程模型的数据访问API，是一个数据访问框架集合，其中包含了多个具体的支持不同方式访问特定数据库类型的子模块，如：Spring Data JDBC（使用JDBC方式访问关系型数据库），Spring Data MongoDB（访问MongoDB数据库）等。\n>\n>###### 5.Spring Integration\n>\n>Spring Integration的目的是提供一个简单的模型，用于构建企业级应用集成解决方案。\n>\n>###### 6.Spring Batch\n>\n>Spring Batch是一个轻量级的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。\n>支持事务管理，提供了基于Web的管理接口。\n>\n>###### 7.Spring Security\n>\n>Spring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提供类似的功能还有一个框架：Apache Shiro。\n>Spring Security依赖于Spring Framework，也就是说如果要Spring Security，那么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。\n>\n>###### 8.Spring HATEOAS\n>\n>如果Web应用基于Spring框架（即：使用了Spring MVC）开发，那么可以直接使用Spring HATEOAS来开发满足HATEOAS约束的RESTFul服务。\n>这里需要理解一个单词简写：“HATEOAS”。HATEOAS（Hypermedia as the engine of application state）是REST架构风格中最复杂的约束，也是构建成熟REST服务的核心。它的重要性在于打破了客户端和服务器之间严格的契约，使得客户端可以更加智能和自适应，而 REST 服务本身的演化和更新也变得更加容易。\n>\n>###### 9.Spring REST Docs\n>\n>Spring REST Docs是一个文档工具，用于为REST架构风格的Web服务自动生成相应的文档，这样可以解放开发者专门撰写API文档的工作。\n>\n>###### 10.Spring AMQP\n>\n>Spring AMQP项目旨在将核心的Spring概念应用于基于AMQP的消息传递解决方案的开发中，它提供了一个“模板”的抽象用于发送和接收消息。\n>\n>###### 11.Spring Mobile\n>\n>Spring Mobile是对Spring MVC的扩展，旨在简化移动Web应用的开发。\n>Spring Mobile可以检测出当前请求使用的设备是PC、还是手机或者是平板以及用户设备是安卓平台还是iOS平台，然后根据请求设备的不同，返回适合该设备的视图。\n>\n>###### 12.Spring For Android\n>\n>官方的说法LSpring For Android旨在简化原声Android应用的开发,Spring For Android提供了2个对原生Android应用开发的支持：\n>(1)提供了一个REST客户端\n>(2)支持访问安全API时的认证\n>\n>###### 13.Spring Web Flow\n>\n>Spring Web Flow主要应用于需要在Web页面上创建引导用户执行类似“下一步”这样的基于流程的应用场景，该框架构建于Spring MVC之上。\n>\n>###### 14.Spring Web Services\n>\n>Spring Web Services用于开发WebService服务，类似的框架如：Apache CXF，Apache Axis2。\n>\n>###### 15.Spring LDAP\n>\n>Spring LDAP是一个工具，用于为基于Spring的应用程序使用LDAP（Lightweight Directory Access Protocol）协议。\n>\n>###### 16.Spring Session\n>\n>Spring Session提供了管理用户Session信息的API和对应实现，Spring Session使得支持集群会话变得简单，而不依赖于特定于应用程序容器的解决方案。\n>\n>**and so on......**\n>更多请看 https://spring.io/\n","source":"_posts/Spring-概述.md","raw":"---\ntitle: Spring 概述\ndate: 2020-01-10 11:14:53\ntags:\n---\n##### 一、Spring概述\n>The Spring Framework is an application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to, or even replacement for the Enterprise JavaBeans (EJB) model. The Spring Framework is open source.\n\n\n>Spring框架是 Java 平台的一个开源的全栈（Full-stack）应用程序框架和控制反转容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于Java企业版平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了企业级JavaBeans（EJB）模型。且Spring框架是开源的。\n\n\n##### 二、Spring的模块\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161754478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\nSpring是模块化的，这意味着你可以只使用你需要的Spring模块。\n\n| Core Container |  | AOP |  | Messaging |  |\n| --- | --- | --- | --- | --- | --- |\n| Spring-Core | 核心工具类，其他模块大量使用Spring-Core | Spring-AOP | 基于代理的AOP支持 | Spring-Messaging | 对消息架构和协议的支持 |\n| Spring-Beans | 定义对Bean的支持 | Spring-Aspects | 基于AspectJ的AOP支持 |\n| Spring-Context | 运行时的Spring容器 |\n| Spring-Context-Suppot | Spring容器对第三方包的集成支持 |\n| Spring-Expression | 使用表达式语言在运行时查询和操作对象 |\n\n\n| Web |  | Data Access |  | Test |  |\n| --- | --- | --- | --- | --- | --- |\n| Spring-web | 提供基础的web集成的功能 | Spring-JDBC | 提供以JDBC访问数据库的支持 |Test模块主要是针对spring的各个模块做各种各样的测试，包括单元测试、集成测试等等。||\n| Spring-Webmvc | 提供基于Servlet的SpringMVC | Spring-TX | 提供编程式和声明式的事务支持 |\n| Spring-WebSocket | 提供WebSocket功能 | Spring-ORM | 提供对对象/关系映射技术的支持 |\n| Spring-Webmvc-Portlet | 提供Portlet环境支持 | Spring-OXM | 提供对对象/xml映射技术的支持 |\n||| Spring-JMS | 提供对JMS的支持 |\n\n##### 三、Spring的生态\n>###### 1.Spring Boot\n>Spring Boot是一个开发基于Spring的脚手架项目，它默认集成了嵌入式Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。\n>\n>###### 2.Spring Cloud\n>\n>Spring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。\n>Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件的流程。\n>\n>###### 3.Spring Cloud Data Flow\n>\n>Spring Cloud Data Flow用于构建在云环境或K8S中基于微服务的实时或批数据处理架构，具体来讲就是支持一系列需要进行数据处理的场景，如：ETL，数据导入/导出，事件流，预测分析等等。\n>\n>###### 4.Spring Data\n>\n>Spring Data旨在提供一套基于Spring编程模型的数据访问API，是一个数据访问框架集合，其中包含了多个具体的支持不同方式访问特定数据库类型的子模块，如：Spring Data JDBC（使用JDBC方式访问关系型数据库），Spring Data MongoDB（访问MongoDB数据库）等。\n>\n>###### 5.Spring Integration\n>\n>Spring Integration的目的是提供一个简单的模型，用于构建企业级应用集成解决方案。\n>\n>###### 6.Spring Batch\n>\n>Spring Batch是一个轻量级的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。\n>支持事务管理，提供了基于Web的管理接口。\n>\n>###### 7.Spring Security\n>\n>Spring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提供类似的功能还有一个框架：Apache Shiro。\n>Spring Security依赖于Spring Framework，也就是说如果要Spring Security，那么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。\n>\n>###### 8.Spring HATEOAS\n>\n>如果Web应用基于Spring框架（即：使用了Spring MVC）开发，那么可以直接使用Spring HATEOAS来开发满足HATEOAS约束的RESTFul服务。\n>这里需要理解一个单词简写：“HATEOAS”。HATEOAS（Hypermedia as the engine of application state）是REST架构风格中最复杂的约束，也是构建成熟REST服务的核心。它的重要性在于打破了客户端和服务器之间严格的契约，使得客户端可以更加智能和自适应，而 REST 服务本身的演化和更新也变得更加容易。\n>\n>###### 9.Spring REST Docs\n>\n>Spring REST Docs是一个文档工具，用于为REST架构风格的Web服务自动生成相应的文档，这样可以解放开发者专门撰写API文档的工作。\n>\n>###### 10.Spring AMQP\n>\n>Spring AMQP项目旨在将核心的Spring概念应用于基于AMQP的消息传递解决方案的开发中，它提供了一个“模板”的抽象用于发送和接收消息。\n>\n>###### 11.Spring Mobile\n>\n>Spring Mobile是对Spring MVC的扩展，旨在简化移动Web应用的开发。\n>Spring Mobile可以检测出当前请求使用的设备是PC、还是手机或者是平板以及用户设备是安卓平台还是iOS平台，然后根据请求设备的不同，返回适合该设备的视图。\n>\n>###### 12.Spring For Android\n>\n>官方的说法LSpring For Android旨在简化原声Android应用的开发,Spring For Android提供了2个对原生Android应用开发的支持：\n>(1)提供了一个REST客户端\n>(2)支持访问安全API时的认证\n>\n>###### 13.Spring Web Flow\n>\n>Spring Web Flow主要应用于需要在Web页面上创建引导用户执行类似“下一步”这样的基于流程的应用场景，该框架构建于Spring MVC之上。\n>\n>###### 14.Spring Web Services\n>\n>Spring Web Services用于开发WebService服务，类似的框架如：Apache CXF，Apache Axis2。\n>\n>###### 15.Spring LDAP\n>\n>Spring LDAP是一个工具，用于为基于Spring的应用程序使用LDAP（Lightweight Directory Access Protocol）协议。\n>\n>###### 16.Spring Session\n>\n>Spring Session提供了管理用户Session信息的API和对应实现，Spring Session使得支持集群会话变得简单，而不依赖于特定于应用程序容器的解决方案。\n>\n>**and so on......**\n>更多请看 https://spring.io/\n","slug":"Spring-概述","published":1,"updated":"2020-01-10T03:15:37.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2d500074sz08c0j85ww","content":"<h5 id=\"一、Spring概述\"><a href=\"#一、Spring概述\" class=\"headerlink\" title=\"一、Spring概述\"></a>一、Spring概述</h5><blockquote>\n<p>The Spring Framework is an application framework and inversion of control container for the Java platform. The framework’s core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to, or even replacement for the Enterprise JavaBeans (EJB) model. The Spring Framework is open source.</p>\n</blockquote>\n<blockquote>\n<p>Spring框架是 Java 平台的一个开源的全栈（Full-stack）应用程序框架和控制反转容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于Java企业版平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了企业级JavaBeans（EJB）模型。且Spring框架是开源的。</p>\n</blockquote>\n<h5 id=\"二、Spring的模块\"><a href=\"#二、Spring的模块\" class=\"headerlink\" title=\"二、Spring的模块\"></a>二、Spring的模块</h5><p><img src=\"https://img-blog.csdnimg.cn/20191011161754478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>Spring是模块化的，这意味着你可以只使用你需要的Spring模块。</p>\n<table>\n<thead>\n<tr>\n<th>Core Container</th>\n<th></th>\n<th>AOP</th>\n<th></th>\n<th>Messaging</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Spring-Core</td>\n<td>核心工具类，其他模块大量使用Spring-Core</td>\n<td>Spring-AOP</td>\n<td>基于代理的AOP支持</td>\n<td>Spring-Messaging</td>\n<td>对消息架构和协议的支持</td>\n</tr>\n<tr>\n<td>Spring-Beans</td>\n<td>定义对Bean的支持</td>\n<td>Spring-Aspects</td>\n<td>基于AspectJ的AOP支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Context</td>\n<td>运行时的Spring容器</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Context-Suppot</td>\n<td>Spring容器对第三方包的集成支持</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Expression</td>\n<td>使用表达式语言在运行时查询和操作对象</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Web</th>\n<th></th>\n<th>Data Access</th>\n<th></th>\n<th>Test</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Spring-web</td>\n<td>提供基础的web集成的功能</td>\n<td>Spring-JDBC</td>\n<td>提供以JDBC访问数据库的支持</td>\n<td>Test模块主要是针对spring的各个模块做各种各样的测试，包括单元测试、集成测试等等。</td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Webmvc</td>\n<td>提供基于Servlet的SpringMVC</td>\n<td>Spring-TX</td>\n<td>提供编程式和声明式的事务支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-WebSocket</td>\n<td>提供WebSocket功能</td>\n<td>Spring-ORM</td>\n<td>提供对对象/关系映射技术的支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Webmvc-Portlet</td>\n<td>提供Portlet环境支持</td>\n<td>Spring-OXM</td>\n<td>提供对对象/xml映射技术的支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Spring-JMS</td>\n<td>提供对JMS的支持</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h5 id=\"三、Spring的生态\"><a href=\"#三、Spring的生态\" class=\"headerlink\" title=\"三、Spring的生态\"></a>三、Spring的生态</h5><blockquote>\n<h6 id=\"1-Spring-Boot\"><a href=\"#1-Spring-Boot\" class=\"headerlink\" title=\"1.Spring Boot\"></a>1.Spring Boot</h6><p>Spring Boot是一个开发基于Spring的脚手架项目，它默认集成了嵌入式Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。</p>\n<h6 id=\"2-Spring-Cloud\"><a href=\"#2-Spring-Cloud\" class=\"headerlink\" title=\"2.Spring Cloud\"></a>2.Spring Cloud</h6><p>Spring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。<br>Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件的流程。</p>\n<h6 id=\"3-Spring-Cloud-Data-Flow\"><a href=\"#3-Spring-Cloud-Data-Flow\" class=\"headerlink\" title=\"3.Spring Cloud Data Flow\"></a>3.Spring Cloud Data Flow</h6><p>Spring Cloud Data Flow用于构建在云环境或K8S中基于微服务的实时或批数据处理架构，具体来讲就是支持一系列需要进行数据处理的场景，如：ETL，数据导入/导出，事件流，预测分析等等。</p>\n<h6 id=\"4-Spring-Data\"><a href=\"#4-Spring-Data\" class=\"headerlink\" title=\"4.Spring Data\"></a>4.Spring Data</h6><p>Spring Data旨在提供一套基于Spring编程模型的数据访问API，是一个数据访问框架集合，其中包含了多个具体的支持不同方式访问特定数据库类型的子模块，如：Spring Data JDBC（使用JDBC方式访问关系型数据库），Spring Data MongoDB（访问MongoDB数据库）等。</p>\n<h6 id=\"5-Spring-Integration\"><a href=\"#5-Spring-Integration\" class=\"headerlink\" title=\"5.Spring Integration\"></a>5.Spring Integration</h6><p>Spring Integration的目的是提供一个简单的模型，用于构建企业级应用集成解决方案。</p>\n<h6 id=\"6-Spring-Batch\"><a href=\"#6-Spring-Batch\" class=\"headerlink\" title=\"6.Spring Batch\"></a>6.Spring Batch</h6><p>Spring Batch是一个轻量级的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。<br>支持事务管理，提供了基于Web的管理接口。</p>\n<h6 id=\"7-Spring-Security\"><a href=\"#7-Spring-Security\" class=\"headerlink\" title=\"7.Spring Security\"></a>7.Spring Security</h6><p>Spring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提供类似的功能还有一个框架：Apache Shiro。<br>Spring Security依赖于Spring Framework，也就是说如果要Spring Security，那么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。</p>\n<h6 id=\"8-Spring-HATEOAS\"><a href=\"#8-Spring-HATEOAS\" class=\"headerlink\" title=\"8.Spring HATEOAS\"></a>8.Spring HATEOAS</h6><p>如果Web应用基于Spring框架（即：使用了Spring MVC）开发，那么可以直接使用Spring HATEOAS来开发满足HATEOAS约束的RESTFul服务。<br>这里需要理解一个单词简写：“HATEOAS”。HATEOAS（Hypermedia as the engine of application state）是REST架构风格中最复杂的约束，也是构建成熟REST服务的核心。它的重要性在于打破了客户端和服务器之间严格的契约，使得客户端可以更加智能和自适应，而 REST 服务本身的演化和更新也变得更加容易。</p>\n<h6 id=\"9-Spring-REST-Docs\"><a href=\"#9-Spring-REST-Docs\" class=\"headerlink\" title=\"9.Spring REST Docs\"></a>9.Spring REST Docs</h6><p>Spring REST Docs是一个文档工具，用于为REST架构风格的Web服务自动生成相应的文档，这样可以解放开发者专门撰写API文档的工作。</p>\n<h6 id=\"10-Spring-AMQP\"><a href=\"#10-Spring-AMQP\" class=\"headerlink\" title=\"10.Spring AMQP\"></a>10.Spring AMQP</h6><p>Spring AMQP项目旨在将核心的Spring概念应用于基于AMQP的消息传递解决方案的开发中，它提供了一个“模板”的抽象用于发送和接收消息。</p>\n<h6 id=\"11-Spring-Mobile\"><a href=\"#11-Spring-Mobile\" class=\"headerlink\" title=\"11.Spring Mobile\"></a>11.Spring Mobile</h6><p>Spring Mobile是对Spring MVC的扩展，旨在简化移动Web应用的开发。<br>Spring Mobile可以检测出当前请求使用的设备是PC、还是手机或者是平板以及用户设备是安卓平台还是iOS平台，然后根据请求设备的不同，返回适合该设备的视图。</p>\n<h6 id=\"12-Spring-For-Android\"><a href=\"#12-Spring-For-Android\" class=\"headerlink\" title=\"12.Spring For Android\"></a>12.Spring For Android</h6><p>官方的说法LSpring For Android旨在简化原声Android应用的开发,Spring For Android提供了2个对原生Android应用开发的支持：<br>(1)提供了一个REST客户端<br>(2)支持访问安全API时的认证</p>\n<h6 id=\"13-Spring-Web-Flow\"><a href=\"#13-Spring-Web-Flow\" class=\"headerlink\" title=\"13.Spring Web Flow\"></a>13.Spring Web Flow</h6><p>Spring Web Flow主要应用于需要在Web页面上创建引导用户执行类似“下一步”这样的基于流程的应用场景，该框架构建于Spring MVC之上。</p>\n<h6 id=\"14-Spring-Web-Services\"><a href=\"#14-Spring-Web-Services\" class=\"headerlink\" title=\"14.Spring Web Services\"></a>14.Spring Web Services</h6><p>Spring Web Services用于开发WebService服务，类似的框架如：Apache CXF，Apache Axis2。</p>\n<h6 id=\"15-Spring-LDAP\"><a href=\"#15-Spring-LDAP\" class=\"headerlink\" title=\"15.Spring LDAP\"></a>15.Spring LDAP</h6><p>Spring LDAP是一个工具，用于为基于Spring的应用程序使用LDAP（Lightweight Directory Access Protocol）协议。</p>\n<h6 id=\"16-Spring-Session\"><a href=\"#16-Spring-Session\" class=\"headerlink\" title=\"16.Spring Session\"></a>16.Spring Session</h6><p>Spring Session提供了管理用户Session信息的API和对应实现，Spring Session使得支持集群会话变得简单，而不依赖于特定于应用程序容器的解决方案。</p>\n<p><strong>and so on……</strong><br>更多请看 <a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">https://spring.io/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、Spring概述\"><a href=\"#一、Spring概述\" class=\"headerlink\" title=\"一、Spring概述\"></a>一、Spring概述</h5><blockquote>\n<p>The Spring Framework is an application framework and inversion of control container for the Java platform. The framework’s core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE (Enterprise Edition) platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an addition to, or even replacement for the Enterprise JavaBeans (EJB) model. The Spring Framework is open source.</p>\n</blockquote>\n<blockquote>\n<p>Spring框架是 Java 平台的一个开源的全栈（Full-stack）应用程序框架和控制反转容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于Java企业版平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了企业级JavaBeans（EJB）模型。且Spring框架是开源的。</p>\n</blockquote>\n<h5 id=\"二、Spring的模块\"><a href=\"#二、Spring的模块\" class=\"headerlink\" title=\"二、Spring的模块\"></a>二、Spring的模块</h5><p><img src=\"https://img-blog.csdnimg.cn/20191011161754478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>Spring是模块化的，这意味着你可以只使用你需要的Spring模块。</p>\n<table>\n<thead>\n<tr>\n<th>Core Container</th>\n<th></th>\n<th>AOP</th>\n<th></th>\n<th>Messaging</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Spring-Core</td>\n<td>核心工具类，其他模块大量使用Spring-Core</td>\n<td>Spring-AOP</td>\n<td>基于代理的AOP支持</td>\n<td>Spring-Messaging</td>\n<td>对消息架构和协议的支持</td>\n</tr>\n<tr>\n<td>Spring-Beans</td>\n<td>定义对Bean的支持</td>\n<td>Spring-Aspects</td>\n<td>基于AspectJ的AOP支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Context</td>\n<td>运行时的Spring容器</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Context-Suppot</td>\n<td>Spring容器对第三方包的集成支持</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Expression</td>\n<td>使用表达式语言在运行时查询和操作对象</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Web</th>\n<th></th>\n<th>Data Access</th>\n<th></th>\n<th>Test</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Spring-web</td>\n<td>提供基础的web集成的功能</td>\n<td>Spring-JDBC</td>\n<td>提供以JDBC访问数据库的支持</td>\n<td>Test模块主要是针对spring的各个模块做各种各样的测试，包括单元测试、集成测试等等。</td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Webmvc</td>\n<td>提供基于Servlet的SpringMVC</td>\n<td>Spring-TX</td>\n<td>提供编程式和声明式的事务支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-WebSocket</td>\n<td>提供WebSocket功能</td>\n<td>Spring-ORM</td>\n<td>提供对对象/关系映射技术的支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Spring-Webmvc-Portlet</td>\n<td>提供Portlet环境支持</td>\n<td>Spring-OXM</td>\n<td>提供对对象/xml映射技术的支持</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Spring-JMS</td>\n<td>提供对JMS的支持</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h5 id=\"三、Spring的生态\"><a href=\"#三、Spring的生态\" class=\"headerlink\" title=\"三、Spring的生态\"></a>三、Spring的生态</h5><blockquote>\n<h6 id=\"1-Spring-Boot\"><a href=\"#1-Spring-Boot\" class=\"headerlink\" title=\"1.Spring Boot\"></a>1.Spring Boot</h6><p>Spring Boot是一个开发基于Spring的脚手架项目，它默认集成了嵌入式Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。</p>\n<h6 id=\"2-Spring-Cloud\"><a href=\"#2-Spring-Cloud\" class=\"headerlink\" title=\"2.Spring Cloud\"></a>2.Spring Cloud</h6><p>Spring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。<br>Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件的流程。</p>\n<h6 id=\"3-Spring-Cloud-Data-Flow\"><a href=\"#3-Spring-Cloud-Data-Flow\" class=\"headerlink\" title=\"3.Spring Cloud Data Flow\"></a>3.Spring Cloud Data Flow</h6><p>Spring Cloud Data Flow用于构建在云环境或K8S中基于微服务的实时或批数据处理架构，具体来讲就是支持一系列需要进行数据处理的场景，如：ETL，数据导入/导出，事件流，预测分析等等。</p>\n<h6 id=\"4-Spring-Data\"><a href=\"#4-Spring-Data\" class=\"headerlink\" title=\"4.Spring Data\"></a>4.Spring Data</h6><p>Spring Data旨在提供一套基于Spring编程模型的数据访问API，是一个数据访问框架集合，其中包含了多个具体的支持不同方式访问特定数据库类型的子模块，如：Spring Data JDBC（使用JDBC方式访问关系型数据库），Spring Data MongoDB（访问MongoDB数据库）等。</p>\n<h6 id=\"5-Spring-Integration\"><a href=\"#5-Spring-Integration\" class=\"headerlink\" title=\"5.Spring Integration\"></a>5.Spring Integration</h6><p>Spring Integration的目的是提供一个简单的模型，用于构建企业级应用集成解决方案。</p>\n<h6 id=\"6-Spring-Batch\"><a href=\"#6-Spring-Batch\" class=\"headerlink\" title=\"6.Spring Batch\"></a>6.Spring Batch</h6><p>Spring Batch是一个轻量级的批处理框架，旨在开发对企业系统日常运营至关重要的强大批处理应用程序。<br>支持事务管理，提供了基于Web的管理接口。</p>\n<h6 id=\"7-Spring-Security\"><a href=\"#7-Spring-Security\" class=\"headerlink\" title=\"7.Spring Security\"></a>7.Spring Security</h6><p>Spring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提供类似的功能还有一个框架：Apache Shiro。<br>Spring Security依赖于Spring Framework，也就是说如果要Spring Security，那么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。</p>\n<h6 id=\"8-Spring-HATEOAS\"><a href=\"#8-Spring-HATEOAS\" class=\"headerlink\" title=\"8.Spring HATEOAS\"></a>8.Spring HATEOAS</h6><p>如果Web应用基于Spring框架（即：使用了Spring MVC）开发，那么可以直接使用Spring HATEOAS来开发满足HATEOAS约束的RESTFul服务。<br>这里需要理解一个单词简写：“HATEOAS”。HATEOAS（Hypermedia as the engine of application state）是REST架构风格中最复杂的约束，也是构建成熟REST服务的核心。它的重要性在于打破了客户端和服务器之间严格的契约，使得客户端可以更加智能和自适应，而 REST 服务本身的演化和更新也变得更加容易。</p>\n<h6 id=\"9-Spring-REST-Docs\"><a href=\"#9-Spring-REST-Docs\" class=\"headerlink\" title=\"9.Spring REST Docs\"></a>9.Spring REST Docs</h6><p>Spring REST Docs是一个文档工具，用于为REST架构风格的Web服务自动生成相应的文档，这样可以解放开发者专门撰写API文档的工作。</p>\n<h6 id=\"10-Spring-AMQP\"><a href=\"#10-Spring-AMQP\" class=\"headerlink\" title=\"10.Spring AMQP\"></a>10.Spring AMQP</h6><p>Spring AMQP项目旨在将核心的Spring概念应用于基于AMQP的消息传递解决方案的开发中，它提供了一个“模板”的抽象用于发送和接收消息。</p>\n<h6 id=\"11-Spring-Mobile\"><a href=\"#11-Spring-Mobile\" class=\"headerlink\" title=\"11.Spring Mobile\"></a>11.Spring Mobile</h6><p>Spring Mobile是对Spring MVC的扩展，旨在简化移动Web应用的开发。<br>Spring Mobile可以检测出当前请求使用的设备是PC、还是手机或者是平板以及用户设备是安卓平台还是iOS平台，然后根据请求设备的不同，返回适合该设备的视图。</p>\n<h6 id=\"12-Spring-For-Android\"><a href=\"#12-Spring-For-Android\" class=\"headerlink\" title=\"12.Spring For Android\"></a>12.Spring For Android</h6><p>官方的说法LSpring For Android旨在简化原声Android应用的开发,Spring For Android提供了2个对原生Android应用开发的支持：<br>(1)提供了一个REST客户端<br>(2)支持访问安全API时的认证</p>\n<h6 id=\"13-Spring-Web-Flow\"><a href=\"#13-Spring-Web-Flow\" class=\"headerlink\" title=\"13.Spring Web Flow\"></a>13.Spring Web Flow</h6><p>Spring Web Flow主要应用于需要在Web页面上创建引导用户执行类似“下一步”这样的基于流程的应用场景，该框架构建于Spring MVC之上。</p>\n<h6 id=\"14-Spring-Web-Services\"><a href=\"#14-Spring-Web-Services\" class=\"headerlink\" title=\"14.Spring Web Services\"></a>14.Spring Web Services</h6><p>Spring Web Services用于开发WebService服务，类似的框架如：Apache CXF，Apache Axis2。</p>\n<h6 id=\"15-Spring-LDAP\"><a href=\"#15-Spring-LDAP\" class=\"headerlink\" title=\"15.Spring LDAP\"></a>15.Spring LDAP</h6><p>Spring LDAP是一个工具，用于为基于Spring的应用程序使用LDAP（Lightweight Directory Access Protocol）协议。</p>\n<h6 id=\"16-Spring-Session\"><a href=\"#16-Spring-Session\" class=\"headerlink\" title=\"16.Spring Session\"></a>16.Spring Session</h6><p>Spring Session提供了管理用户Session信息的API和对应实现，Spring Session使得支持集群会话变得简单，而不依赖于特定于应用程序容器的解决方案。</p>\n<p><strong>and so on……</strong><br>更多请看 <a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">https://spring.io/</a></p>\n</blockquote>\n"},{"title":"Spring常用配置 - Bean的Scope","date":"2020-01-10T03:20:26.000Z","_content":"#### 一、Scope是什么？\n>**Scope：** 描述Spring容器如何创建Bean的实例\n\n\n#### 二、Scope具体内容\n@Scope的value有5个，分别解释下：\n\n| @Scope | 意义 |\n| --- | --- |\n| Singleton | Spring的默认配置，一个Spring容器中只有一个Bean的实例 |\n| Prototype | 每次调用都会新建一个Bean的实例 |\n| Request | Web项目中，会给每个http request新建一个Bean实例 |\n| Session | Web项目中，会给每个http session新建一个Bean实例 |\n| GlobalSession | portal应用中使用，给每一个global http session新建一个Bean实例 |\n\n\n#### 三、ScopeDemo\n\n**Bean1**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:37\n * Description:\n * 声明为Bean\n * Scope默认为singleton，一个Spring容器中只会存在一个实例\n */\n\n@Service\n//@Scope(\"singleton\")\npublic class BeanOne {\n}\n\n```\n\n**Bean2**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:37\n * Description:\n * 声明为Bean\n * Scope为prototype，此时每次调用都会新建一个实例\n */\n\n@Service\n@Scope(\"prototype\")\npublic class BeanTwo {\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:41\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.scope\")\npublic class ScopeConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:42\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScopeConfig.class);\n        BeanOne one1 = context.getBean(BeanOne.class);\n        BeanOne one2 = context.getBean(BeanOne.class);\n        BeanTwo two1 = context.getBean(BeanTwo.class);\n        BeanTwo two2 = context.getBean(BeanTwo.class);\n        System.out.println(\"Is one1 and one2 the same?  \" + one1.equals(one2));\n        System.out.println(\"Is two1 and two2 the same?  \" + two1.equals(two2));\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015160903428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","source":"_posts/Spring常用配置-Bean的Scope.md","raw":"---\ntitle: Spring常用配置 - Bean的Scope\ndate: 2020-01-10 11:20:26\ntags:\n---\n#### 一、Scope是什么？\n>**Scope：** 描述Spring容器如何创建Bean的实例\n\n\n#### 二、Scope具体内容\n@Scope的value有5个，分别解释下：\n\n| @Scope | 意义 |\n| --- | --- |\n| Singleton | Spring的默认配置，一个Spring容器中只有一个Bean的实例 |\n| Prototype | 每次调用都会新建一个Bean的实例 |\n| Request | Web项目中，会给每个http request新建一个Bean实例 |\n| Session | Web项目中，会给每个http session新建一个Bean实例 |\n| GlobalSession | portal应用中使用，给每一个global http session新建一个Bean实例 |\n\n\n#### 三、ScopeDemo\n\n**Bean1**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:37\n * Description:\n * 声明为Bean\n * Scope默认为singleton，一个Spring容器中只会存在一个实例\n */\n\n@Service\n//@Scope(\"singleton\")\npublic class BeanOne {\n}\n\n```\n\n**Bean2**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:37\n * Description:\n * 声明为Bean\n * Scope为prototype，此时每次调用都会新建一个实例\n */\n\n@Service\n@Scope(\"prototype\")\npublic class BeanTwo {\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:41\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.scope\")\npublic class ScopeConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.scope;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:42\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScopeConfig.class);\n        BeanOne one1 = context.getBean(BeanOne.class);\n        BeanOne one2 = context.getBean(BeanOne.class);\n        BeanTwo two1 = context.getBean(BeanTwo.class);\n        BeanTwo two2 = context.getBean(BeanTwo.class);\n        System.out.println(\"Is one1 and one2 the same?  \" + one1.equals(one2));\n        System.out.println(\"Is two1 and two2 the same?  \" + two1.equals(two2));\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015160903428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","slug":"Spring常用配置-Bean的Scope","published":1,"updated":"2020-01-10T03:21:08.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2d600084sz09hywcolv","content":"<h4 id=\"一、Scope是什么？\"><a href=\"#一、Scope是什么？\" class=\"headerlink\" title=\"一、Scope是什么？\"></a>一、Scope是什么？</h4><blockquote>\n<p><strong>Scope：</strong> 描述Spring容器如何创建Bean的实例</p>\n</blockquote>\n<h4 id=\"二、Scope具体内容\"><a href=\"#二、Scope具体内容\" class=\"headerlink\" title=\"二、Scope具体内容\"></a>二、Scope具体内容</h4><p>@Scope的value有5个，分别解释下：</p>\n<table>\n<thead>\n<tr>\n<th>@Scope</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Singleton</td>\n<td>Spring的默认配置，一个Spring容器中只有一个Bean的实例</td>\n</tr>\n<tr>\n<td>Prototype</td>\n<td>每次调用都会新建一个Bean的实例</td>\n</tr>\n<tr>\n<td>Request</td>\n<td>Web项目中，会给每个http request新建一个Bean实例</td>\n</tr>\n<tr>\n<td>Session</td>\n<td>Web项目中，会给每个http session新建一个Bean实例</td>\n</tr>\n<tr>\n<td>GlobalSession</td>\n<td>portal应用中使用，给每一个global http session新建一个Bean实例</td>\n</tr>\n</tbody></table>\n<h4 id=\"三、ScopeDemo\"><a href=\"#三、ScopeDemo\" class=\"headerlink\" title=\"三、ScopeDemo\"></a>三、ScopeDemo</h4><p><strong>Bean1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Scope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:37</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * Scope默认为singleton，一个Spring容器中只会存在一个实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"comment\">//@Scope(\"singleton\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanOne</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Bean2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Scope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:37</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * Scope为prototype，此时每次调用都会新建一个实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(<span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanTwo</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:41</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.scope\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScopeConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:42</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ScopeConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanOne one1 = context.getBean(BeanOne<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanOne one2 = context.getBean(BeanOne<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanTwo two1 = context.getBean(BeanTwo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanTwo two2 = context.getBean(BeanTwo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Is one1 and one2 the same?  \"</span> + one1.equals(one2));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Is two1 and two2 the same?  \"</span> + two1.equals(two2));</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015160903428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Scope是什么？\"><a href=\"#一、Scope是什么？\" class=\"headerlink\" title=\"一、Scope是什么？\"></a>一、Scope是什么？</h4><blockquote>\n<p><strong>Scope：</strong> 描述Spring容器如何创建Bean的实例</p>\n</blockquote>\n<h4 id=\"二、Scope具体内容\"><a href=\"#二、Scope具体内容\" class=\"headerlink\" title=\"二、Scope具体内容\"></a>二、Scope具体内容</h4><p>@Scope的value有5个，分别解释下：</p>\n<table>\n<thead>\n<tr>\n<th>@Scope</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Singleton</td>\n<td>Spring的默认配置，一个Spring容器中只有一个Bean的实例</td>\n</tr>\n<tr>\n<td>Prototype</td>\n<td>每次调用都会新建一个Bean的实例</td>\n</tr>\n<tr>\n<td>Request</td>\n<td>Web项目中，会给每个http request新建一个Bean实例</td>\n</tr>\n<tr>\n<td>Session</td>\n<td>Web项目中，会给每个http session新建一个Bean实例</td>\n</tr>\n<tr>\n<td>GlobalSession</td>\n<td>portal应用中使用，给每一个global http session新建一个Bean实例</td>\n</tr>\n</tbody></table>\n<h4 id=\"三、ScopeDemo\"><a href=\"#三、ScopeDemo\" class=\"headerlink\" title=\"三、ScopeDemo\"></a>三、ScopeDemo</h4><p><strong>Bean1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Scope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:37</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * Scope默认为singleton，一个Spring容器中只会存在一个实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"comment\">//@Scope(\"singleton\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanOne</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Bean2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Scope;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:37</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * Scope为prototype，此时每次调用都会新建一个实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(<span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanTwo</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:41</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.scope\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScopeConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.scope;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:42</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ScopeConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanOne one1 = context.getBean(BeanOne<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanOne one2 = context.getBean(BeanOne<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanTwo two1 = context.getBean(BeanTwo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanTwo two2 = context.getBean(BeanTwo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Is one1 and one2 the same?  \"</span> + one1.equals(one2));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Is two1 and two2 the same?  \"</span> + two1.equals(two2));</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015160903428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Spring基础配置","date":"2020-01-10T03:19:27.000Z","_content":">Spring框架的四大原则：\n>1. 使用POJO进行轻量级和最小侵入式开发\n>2. 通过依赖注入和基于接口编程实现松耦合\n>3. 通过AOP和默认习惯进行声明式编程\n>4. 使用AOP和模板（template）减少模式化代码\n\n[对四大原则的理解可以看这里](http://www.west999.com/info/html/chengxusheji/Javajishu/20180719/4347703.html)\n\n#### 一、依赖注入\n##### 1.依赖注入的概念：\n>依赖注入是指容器负责创建对象和维护对象间的依赖关系，而非通过对象本身负责自己的创建和解决自己的依赖。\n\n##### 2.依赖注入的主要目的：\n>主要目的就是解耦，所体现的是java组合的理念。毫无疑问组合相对于继承，耦合度会大大降低。\n\n##### 3.具体实现\n>Spring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到你所需要的Bean中。\n>Spring提供xml、注解、Java配置，这三种方式都被称为配置元数据。即描述数据的数据，本身不具备任何执行能力，只能通过外界代码对元数据解析后进行一些有意义的操作。\n\n##### 4.涉及到的注解（推荐注解的方式，xml效率低且复杂）\n**声明式Bean的注解：**\n* @Component   没有明确角色\n* @Service     业务逻辑层使用\n* @Repository  数据访问层使用\n* @Controller  展现层使用（提供接口的方法类） \n\n**注入Bean的注解**\n* @Autowired    Spring提供的注解（通常使用这个）\n* @Inject       JSR-330提供的注解\n* @Resource     JSR-250提供的注解\n（注入Bean的注解 可注解到set方法上或者属性上，具体根据实际开发场景选择）\n\n##### 5.Ioc&Di Demo\n**方法bean1**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:02\n * Description:\n * 1. @Service 声明FuncOneService为bean\n */\n\n@Service\npublic class FuncOneService {\n    public String show(String word) {\n        return \"Function one show : \" + word;\n    }\n}\n\n```\n\n**方法bean2**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:03\n * Description:\n * 1. @Service 声明 FuncTwoService 为bean\n * 2. @Autowired 将 FuncOneService 注入到 FuncTwoService\n */\n\n@Service\npublic class FuncTwoService {\n    @Autowired\n    private FuncOneService funcOneService;\n\n    public String show(String word) {\n        return funcOneService.show(word);\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:07\n * Description:\n * 1. @Configuration 声明注册类\n * 2. @ComponentScan扫描指定包，并注册为Bean\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.iocdidemo\")\npublic class BeanConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:05\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        // 使用AnnotationConfigApplicationContext容器，并选择BeanConfig为配置类\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(BeanConfig.class);\n\n        // bean已有容器创建，从容器中获取方法bean\n        FuncTwoService funcTwoService = context.getBean(FuncTwoService.class);\n\n        String showWord = funcTwoService.show(\"hi ioc&di\");\n        System.out.println(showWord);\n        \n        context.close();\n\n    }\n}\n\n```\n\n**result：**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101116211179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n\n#### 二、Java配置\n\n##### 1.Java配置简介\n>Java配置是Spring 4.x和Spring Boot推荐的配置方式，可以完全替代xml配置。\n>通过@Configuration和@Bean来实现：\n> * @Configuration 声明当前类是个配置类，相当于一个xml文件\n> * @Bean         注解到方法上，声明当前方法返回值是个Bean\n\n##### 2.什么时候使用Java配置\n> 全局配置使用java配置，如数据库相关配置、MVC相关配置\n> 业务Bean的配置使用注解配置，如@Service、@Component、@Repository、@Controller\n\n\n##### 3.JavaConfig demo\n**FuncOneService**\n```java\npackage com.cactus.javaconfigdemo;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:33\n * Description: 普通方法类，不声明为Bean\n */\n\n\npublic class FuncOneService {\n    public String show(String word) {\n        return \"java config, Function one show : \" + word;\n    }\n}\n\n```\n**FuncTwoService**\n```java\npackage com.cactus.javaconfigdemo;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:34\n * Description:普通方法类， 不声明为bean， 不依赖注入\n */\n\n\npublic class FuncTwoService {\n    private FuncOneService funcOneService;\n\n    public void setFuncOneService(FuncOneService funcOneService) {\n        this.funcOneService = funcOneService;\n    }\n\n    public String show(String word) {\n        return funcOneService.show(word);\n    }\n}\n\n```\n**JavaConfig**\n```java\npackage com.cactus.javaconfigdemo;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:36\n * Description:\n * 1. 声明为配置类\n * 2. 无需进行包扫描，因为所有的bean都在这里定义\n * 3. 通过使用@Bean注解， 可以更加灵活地创建管理Bean\n */\n\n@Configuration\npublic class JavaConfig {\n\n    @Bean\n    public FuncOneService funcOneService() {\n        return new FuncOneService();\n    }\n\n    @Bean\n    public FuncTwoService funcTwoService() {\n        FuncTwoService funcTwoService = new FuncTwoService();\n        funcTwoService.setFuncOneService(funcOneService());\n        return funcTwoService;\n    }\n}\n\n```\n**Main**\n```java\npackage com.cactus.javaconfigdemo;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:43\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(JavaConfig.class);\n        FuncTwoService funcTwoService = context.getBean(FuncTwoService.class);\n\n        System.out.println(funcTwoService.show(\"hi javaConfig\"));\n\n        context.close();\n    }\n}\n\n```\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011162129763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n\n#### 三、AOP\n\n##### 1.AOP的由来\n> **AOP: 面向切面编程**\n\n>OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需 要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。\n>AOP技术利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为 “Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低 模块间的耦合度，并有利于未来的可操作性和可维护性。\n>AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为； 那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手 将这些剖开的切面复原，不留痕迹。\n\n##### 2.AOP的目的\n> Spring AOP存在的目的就是为了解耦。 让一组类共享相同的行为\n\n##### 3.涉及到的注解\n\n**切面编程涉及到的注解：**\n* @Aspect 声明一个切面\n* @PointCut 声明一个切点\n* @Before, @After, @Around 定义建言， 可直接将切点（或者方法拦截规则）作为参数\n\n**创建一个注解所涉及到的注解：**\n\n* @interface 声明一个注解\n* @Target 用于描述注解的使用范围\n* @Retention 用于描述一个注解存在的生命周期\n\n\n##### 4.AOP Demo\n\n**pom文件**\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.cactus</groupId>\n    <artifactId>springdemo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n<!--        Spring容器-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>5.1.9.RELEASE</version>\n        </dependency>\n<!--        Aop-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>5.1.9.RELEASE</version>\n        </dependency>\n<!--        aspectj-->\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjrt</artifactId>\n            <version>1.8.13</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.8.13</version>\n        </dependency>\n    </dependencies>\n\n\n</project>\n```\n\n**拦截注解**\n```java\npackage com.cactus.aopdemo;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:01\n * Description: 拦截规则的注解\n * 1. @Target\n * 用于描述注解的使用范围\n * ElementType枚举类型，元注解中的枚举值决定了一个注解可以标记的范围\n *      TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明\n *      FIELD ： 用于描述字段\n *      METHOD ：方法\n *      PARAMETER ： 参数 【参数名】\n *      CONSTRUCTOR ： 构造方法\n *      LOCAL_VARIABLE ： 局部变量\n *      ANNOTATION_TYPE ： 可以打在注解上面\n *      PACKAGE ：可以打在包上面\n *      TYPE_PARAMETER ： 参数类型【形式参数类型】\n *2. @Retention\n * 用于描述一个注解存在的生命周期【源码，字节码文件，运行时】\n * 枚举值RetentionPolicy：几个值决定了几个状态：\n * \t\tSOURCE ：表示一个注解可以存在于源码中==>java的源码中\n *      CLASS ：表示 一个注解可以在源码中，并且可以在字节码文件中\n *      RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在\n *\n */\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Action {\n    String name();\n}\n\n```\n\n**被拦截类1**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:16\n * Description:\n *  被拦截类，使用拦截注解\n */\n\n@Service\npublic class FuncOneService {\n\n    @Action(name = \"注解式拦截\")\n    public void show() {\n        System.out.println(\"function one show time!\");\n    }\n}\n\n```\n\n**被拦截类2**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:42\n * Description:\n * 被拦截类， 使用方法规则拦截\n */\n\n@Service\npublic class FuncTwoService {\n    public void show() {\n        System.out.println(\"this is func2 showtime\");\n    }\n\n    public void test() {\n        System.out.println(\"this is func2 showtime test\");\n    }\n}\n\n```\n\n**切面类**\n```java\npackage com.cactus.aopdemo;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.reflect.Method;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:19\n * Description: 切面类\n * @Aspect 声明切面\n * @Component 声明Bean\n * @Pointcut 声明切点\n * @After 声明一个建言，并使用@Pointcut声明的切点。\n */\n\n@Aspect\n@Component\npublic class FuncAspect {\n\n    // 使用注解拦截-start\n\n    @Pointcut(\"@annotation(com.cactus.aopdemo.Action)\")\n    public void annotationPointCut(){};\n\n    // 可通过反射获得注解上的属性，然后做自定义操作\n    @After(\"annotationPointCut()\")\n    public void after(JoinPoint joinPoint) {\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        Action action = method.getAnnotation(Action.class);\n        System.out.println(\"FuncAspect after, action name : \" + action.name());\n    }\n\n    @Before(\"annotationPointCut()\")\n    public void before(JoinPoint joinPoint) {\n        System.out.println(\"FuncAspect after, no operation, 注解式拦截\");\n    }\n\n    // 使用注解拦截-end\n\n    // 使用方法规则拦截-start\n\n    @Before(\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\")\n    public void beforef(JoinPoint joinPoint) {\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        System.out.println(\"方法规则拦截-before， methodName:\" + method.getName());\n    }\n\n    @After(\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\")\n    public void afterf(JoinPoint joinPoint) {\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        System.out.println(\"方法规则拦截-after， methodName:\" + method.getName());\n    }\n    // 使用方法规则拦截-end\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:38\n * Description: AOP demo 配置类\n * @EnableAspectJAutoProxy 开启Spring对AspectJ的支持\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.aopdemo\")\n@EnableAspectJAutoProxy\npublic class AopConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:37\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AopConfig.class);\n        FuncOneService funcOneService = context.getBean(FuncOneService.class);\n        FuncTwoService funcTwoService = context.getBean(FuncTwoService.class);\n        // 注解式拦截\n        funcOneService.show();\n        // 方法规则式拦截\n        funcTwoService.show();\n        funcTwoService.test();\n\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011162149201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n","source":"_posts/Spring基础配置.md","raw":"---\ntitle: Spring基础配置\ndate: 2020-01-10 11:19:27\ntags:\n---\n>Spring框架的四大原则：\n>1. 使用POJO进行轻量级和最小侵入式开发\n>2. 通过依赖注入和基于接口编程实现松耦合\n>3. 通过AOP和默认习惯进行声明式编程\n>4. 使用AOP和模板（template）减少模式化代码\n\n[对四大原则的理解可以看这里](http://www.west999.com/info/html/chengxusheji/Javajishu/20180719/4347703.html)\n\n#### 一、依赖注入\n##### 1.依赖注入的概念：\n>依赖注入是指容器负责创建对象和维护对象间的依赖关系，而非通过对象本身负责自己的创建和解决自己的依赖。\n\n##### 2.依赖注入的主要目的：\n>主要目的就是解耦，所体现的是java组合的理念。毫无疑问组合相对于继承，耦合度会大大降低。\n\n##### 3.具体实现\n>Spring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到你所需要的Bean中。\n>Spring提供xml、注解、Java配置，这三种方式都被称为配置元数据。即描述数据的数据，本身不具备任何执行能力，只能通过外界代码对元数据解析后进行一些有意义的操作。\n\n##### 4.涉及到的注解（推荐注解的方式，xml效率低且复杂）\n**声明式Bean的注解：**\n* @Component   没有明确角色\n* @Service     业务逻辑层使用\n* @Repository  数据访问层使用\n* @Controller  展现层使用（提供接口的方法类） \n\n**注入Bean的注解**\n* @Autowired    Spring提供的注解（通常使用这个）\n* @Inject       JSR-330提供的注解\n* @Resource     JSR-250提供的注解\n（注入Bean的注解 可注解到set方法上或者属性上，具体根据实际开发场景选择）\n\n##### 5.Ioc&Di Demo\n**方法bean1**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:02\n * Description:\n * 1. @Service 声明FuncOneService为bean\n */\n\n@Service\npublic class FuncOneService {\n    public String show(String word) {\n        return \"Function one show : \" + word;\n    }\n}\n\n```\n\n**方法bean2**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:03\n * Description:\n * 1. @Service 声明 FuncTwoService 为bean\n * 2. @Autowired 将 FuncOneService 注入到 FuncTwoService\n */\n\n@Service\npublic class FuncTwoService {\n    @Autowired\n    private FuncOneService funcOneService;\n\n    public String show(String word) {\n        return funcOneService.show(word);\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:07\n * Description:\n * 1. @Configuration 声明注册类\n * 2. @ComponentScan扫描指定包，并注册为Bean\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.iocdidemo\")\npublic class BeanConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.iocdidemo;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:05\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        // 使用AnnotationConfigApplicationContext容器，并选择BeanConfig为配置类\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(BeanConfig.class);\n\n        // bean已有容器创建，从容器中获取方法bean\n        FuncTwoService funcTwoService = context.getBean(FuncTwoService.class);\n\n        String showWord = funcTwoService.show(\"hi ioc&di\");\n        System.out.println(showWord);\n        \n        context.close();\n\n    }\n}\n\n```\n\n**result：**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101116211179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n\n#### 二、Java配置\n\n##### 1.Java配置简介\n>Java配置是Spring 4.x和Spring Boot推荐的配置方式，可以完全替代xml配置。\n>通过@Configuration和@Bean来实现：\n> * @Configuration 声明当前类是个配置类，相当于一个xml文件\n> * @Bean         注解到方法上，声明当前方法返回值是个Bean\n\n##### 2.什么时候使用Java配置\n> 全局配置使用java配置，如数据库相关配置、MVC相关配置\n> 业务Bean的配置使用注解配置，如@Service、@Component、@Repository、@Controller\n\n\n##### 3.JavaConfig demo\n**FuncOneService**\n```java\npackage com.cactus.javaconfigdemo;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:33\n * Description: 普通方法类，不声明为Bean\n */\n\n\npublic class FuncOneService {\n    public String show(String word) {\n        return \"java config, Function one show : \" + word;\n    }\n}\n\n```\n**FuncTwoService**\n```java\npackage com.cactus.javaconfigdemo;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:34\n * Description:普通方法类， 不声明为bean， 不依赖注入\n */\n\n\npublic class FuncTwoService {\n    private FuncOneService funcOneService;\n\n    public void setFuncOneService(FuncOneService funcOneService) {\n        this.funcOneService = funcOneService;\n    }\n\n    public String show(String word) {\n        return funcOneService.show(word);\n    }\n}\n\n```\n**JavaConfig**\n```java\npackage com.cactus.javaconfigdemo;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:36\n * Description:\n * 1. 声明为配置类\n * 2. 无需进行包扫描，因为所有的bean都在这里定义\n * 3. 通过使用@Bean注解， 可以更加灵活地创建管理Bean\n */\n\n@Configuration\npublic class JavaConfig {\n\n    @Bean\n    public FuncOneService funcOneService() {\n        return new FuncOneService();\n    }\n\n    @Bean\n    public FuncTwoService funcTwoService() {\n        FuncTwoService funcTwoService = new FuncTwoService();\n        funcTwoService.setFuncOneService(funcOneService());\n        return funcTwoService;\n    }\n}\n\n```\n**Main**\n```java\npackage com.cactus.javaconfigdemo;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 11:43\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(JavaConfig.class);\n        FuncTwoService funcTwoService = context.getBean(FuncTwoService.class);\n\n        System.out.println(funcTwoService.show(\"hi javaConfig\"));\n\n        context.close();\n    }\n}\n\n```\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011162129763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n\n#### 三、AOP\n\n##### 1.AOP的由来\n> **AOP: 面向切面编程**\n\n>OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需 要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。\n>AOP技术利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为 “Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低 模块间的耦合度，并有利于未来的可操作性和可维护性。\n>AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为； 那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手 将这些剖开的切面复原，不留痕迹。\n\n##### 2.AOP的目的\n> Spring AOP存在的目的就是为了解耦。 让一组类共享相同的行为\n\n##### 3.涉及到的注解\n\n**切面编程涉及到的注解：**\n* @Aspect 声明一个切面\n* @PointCut 声明一个切点\n* @Before, @After, @Around 定义建言， 可直接将切点（或者方法拦截规则）作为参数\n\n**创建一个注解所涉及到的注解：**\n\n* @interface 声明一个注解\n* @Target 用于描述注解的使用范围\n* @Retention 用于描述一个注解存在的生命周期\n\n\n##### 4.AOP Demo\n\n**pom文件**\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.cactus</groupId>\n    <artifactId>springdemo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n<!--        Spring容器-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>5.1.9.RELEASE</version>\n        </dependency>\n<!--        Aop-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aop</artifactId>\n            <version>5.1.9.RELEASE</version>\n        </dependency>\n<!--        aspectj-->\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjrt</artifactId>\n            <version>1.8.13</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.8.13</version>\n        </dependency>\n    </dependencies>\n\n\n</project>\n```\n\n**拦截注解**\n```java\npackage com.cactus.aopdemo;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:01\n * Description: 拦截规则的注解\n * 1. @Target\n * 用于描述注解的使用范围\n * ElementType枚举类型，元注解中的枚举值决定了一个注解可以标记的范围\n *      TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明\n *      FIELD ： 用于描述字段\n *      METHOD ：方法\n *      PARAMETER ： 参数 【参数名】\n *      CONSTRUCTOR ： 构造方法\n *      LOCAL_VARIABLE ： 局部变量\n *      ANNOTATION_TYPE ： 可以打在注解上面\n *      PACKAGE ：可以打在包上面\n *      TYPE_PARAMETER ： 参数类型【形式参数类型】\n *2. @Retention\n * 用于描述一个注解存在的生命周期【源码，字节码文件，运行时】\n * 枚举值RetentionPolicy：几个值决定了几个状态：\n * \t\tSOURCE ：表示一个注解可以存在于源码中==>java的源码中\n *      CLASS ：表示 一个注解可以在源码中，并且可以在字节码文件中\n *      RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在\n *\n */\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Action {\n    String name();\n}\n\n```\n\n**被拦截类1**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:16\n * Description:\n *  被拦截类，使用拦截注解\n */\n\n@Service\npublic class FuncOneService {\n\n    @Action(name = \"注解式拦截\")\n    public void show() {\n        System.out.println(\"function one show time!\");\n    }\n}\n\n```\n\n**被拦截类2**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:42\n * Description:\n * 被拦截类， 使用方法规则拦截\n */\n\n@Service\npublic class FuncTwoService {\n    public void show() {\n        System.out.println(\"this is func2 showtime\");\n    }\n\n    public void test() {\n        System.out.println(\"this is func2 showtime test\");\n    }\n}\n\n```\n\n**切面类**\n```java\npackage com.cactus.aopdemo;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\n\nimport java.lang.reflect.Method;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:19\n * Description: 切面类\n * @Aspect 声明切面\n * @Component 声明Bean\n * @Pointcut 声明切点\n * @After 声明一个建言，并使用@Pointcut声明的切点。\n */\n\n@Aspect\n@Component\npublic class FuncAspect {\n\n    // 使用注解拦截-start\n\n    @Pointcut(\"@annotation(com.cactus.aopdemo.Action)\")\n    public void annotationPointCut(){};\n\n    // 可通过反射获得注解上的属性，然后做自定义操作\n    @After(\"annotationPointCut()\")\n    public void after(JoinPoint joinPoint) {\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        Action action = method.getAnnotation(Action.class);\n        System.out.println(\"FuncAspect after, action name : \" + action.name());\n    }\n\n    @Before(\"annotationPointCut()\")\n    public void before(JoinPoint joinPoint) {\n        System.out.println(\"FuncAspect after, no operation, 注解式拦截\");\n    }\n\n    // 使用注解拦截-end\n\n    // 使用方法规则拦截-start\n\n    @Before(\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\")\n    public void beforef(JoinPoint joinPoint) {\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        System.out.println(\"方法规则拦截-before， methodName:\" + method.getName());\n    }\n\n    @After(\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\")\n    public void afterf(JoinPoint joinPoint) {\n        MethodSignature signature = (MethodSignature)joinPoint.getSignature();\n        Method method = signature.getMethod();\n        System.out.println(\"方法规则拦截-after， methodName:\" + method.getName());\n    }\n    // 使用方法规则拦截-end\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:38\n * Description: AOP demo 配置类\n * @EnableAspectJAutoProxy 开启Spring对AspectJ的支持\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.aopdemo\")\n@EnableAspectJAutoProxy\npublic class AopConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.aopdemo;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 15:37\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AopConfig.class);\n        FuncOneService funcOneService = context.getBean(FuncOneService.class);\n        FuncTwoService funcTwoService = context.getBean(FuncTwoService.class);\n        // 注解式拦截\n        funcOneService.show();\n        // 方法规则式拦截\n        funcTwoService.show();\n        funcTwoService.test();\n\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011162149201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n\n","slug":"Spring基础配置","published":1,"updated":"2020-01-10T03:19:59.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2d700094sz05zit2fr2","content":"<blockquote>\n<p>Spring框架的四大原则：</p>\n<ol>\n<li>使用POJO进行轻量级和最小侵入式开发</li>\n<li>通过依赖注入和基于接口编程实现松耦合</li>\n<li>通过AOP和默认习惯进行声明式编程</li>\n<li>使用AOP和模板（template）减少模式化代码</li>\n</ol>\n</blockquote>\n<p><a href=\"http://www.west999.com/info/html/chengxusheji/Javajishu/20180719/4347703.html\" target=\"_blank\" rel=\"noopener\">对四大原则的理解可以看这里</a></p>\n<h4 id=\"一、依赖注入\"><a href=\"#一、依赖注入\" class=\"headerlink\" title=\"一、依赖注入\"></a>一、依赖注入</h4><h5 id=\"1-依赖注入的概念：\"><a href=\"#1-依赖注入的概念：\" class=\"headerlink\" title=\"1.依赖注入的概念：\"></a>1.依赖注入的概念：</h5><blockquote>\n<p>依赖注入是指容器负责创建对象和维护对象间的依赖关系，而非通过对象本身负责自己的创建和解决自己的依赖。</p>\n</blockquote>\n<h5 id=\"2-依赖注入的主要目的：\"><a href=\"#2-依赖注入的主要目的：\" class=\"headerlink\" title=\"2.依赖注入的主要目的：\"></a>2.依赖注入的主要目的：</h5><blockquote>\n<p>主要目的就是解耦，所体现的是java组合的理念。毫无疑问组合相对于继承，耦合度会大大降低。</p>\n</blockquote>\n<h5 id=\"3-具体实现\"><a href=\"#3-具体实现\" class=\"headerlink\" title=\"3.具体实现\"></a>3.具体实现</h5><blockquote>\n<p>Spring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到你所需要的Bean中。<br>Spring提供xml、注解、Java配置，这三种方式都被称为配置元数据。即描述数据的数据，本身不具备任何执行能力，只能通过外界代码对元数据解析后进行一些有意义的操作。</p>\n</blockquote>\n<h5 id=\"4-涉及到的注解（推荐注解的方式，xml效率低且复杂）\"><a href=\"#4-涉及到的注解（推荐注解的方式，xml效率低且复杂）\" class=\"headerlink\" title=\"4.涉及到的注解（推荐注解的方式，xml效率低且复杂）\"></a>4.涉及到的注解（推荐注解的方式，xml效率低且复杂）</h5><p><strong>声明式Bean的注解：</strong></p>\n<ul>\n<li>@Component   没有明确角色</li>\n<li>@Service     业务逻辑层使用</li>\n<li>@Repository  数据访问层使用</li>\n<li>@Controller  展现层使用（提供接口的方法类） </li>\n</ul>\n<p><strong>注入Bean的注解</strong></p>\n<ul>\n<li>@Autowired    Spring提供的注解（通常使用这个）</li>\n<li>@Inject       JSR-330提供的注解</li>\n<li>@Resource     JSR-250提供的注解<br>（注入Bean的注解 可注解到set方法上或者属性上，具体根据实际开发场景选择）</li>\n</ul>\n<h5 id=\"5-Ioc-amp-Di-Demo\"><a href=\"#5-Ioc-amp-Di-Demo\" class=\"headerlink\" title=\"5.Ioc&amp;Di Demo\"></a>5.Ioc&amp;Di Demo</h5><p><strong>方法bean1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:02</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Service</span> 声明FuncOneService为bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncOneService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Function one show : \"</span> + word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法bean2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:03</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Service</span> 声明 FuncTwoService 为bean</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. <span class=\"doctag\">@Autowired</span> 将 FuncOneService 注入到 FuncTwoService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncTwoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FuncOneService funcOneService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcOneService.show(word);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:07</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Configuration</span> 声明注册类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. <span class=\"doctag\">@ComponentScan</span>扫描指定包，并注册为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.iocdidemo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:05</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用AnnotationConfigApplicationContext容器，并选择BeanConfig为配置类</span></span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(BeanConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// bean已有容器创建，从容器中获取方法bean</span></span><br><span class=\"line\">        FuncTwoService funcTwoService = context.getBean(FuncTwoService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String showWord = funcTwoService.show(<span class=\"string\">\"hi ioc&amp;di\"</span>);</span><br><span class=\"line\">        System.out.println(showWord);</span><br><span class=\"line\">        </span><br><span class=\"line\">        context.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result：</strong><br><img src=\"https://img-blog.csdnimg.cn/2019101116211179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"二、Java配置\"><a href=\"#二、Java配置\" class=\"headerlink\" title=\"二、Java配置\"></a>二、Java配置</h4><h5 id=\"1-Java配置简介\"><a href=\"#1-Java配置简介\" class=\"headerlink\" title=\"1.Java配置简介\"></a>1.Java配置简介</h5><blockquote>\n<p>Java配置是Spring 4.x和Spring Boot推荐的配置方式，可以完全替代xml配置。<br>通过@Configuration和@Bean来实现：</p>\n<ul>\n<li>@Configuration 声明当前类是个配置类，相当于一个xml文件</li>\n<li>@Bean         注解到方法上，声明当前方法返回值是个Bean</li>\n</ul>\n</blockquote>\n<h5 id=\"2-什么时候使用Java配置\"><a href=\"#2-什么时候使用Java配置\" class=\"headerlink\" title=\"2.什么时候使用Java配置\"></a>2.什么时候使用Java配置</h5><blockquote>\n<p>全局配置使用java配置，如数据库相关配置、MVC相关配置<br>业务Bean的配置使用注解配置，如@Service、@Component、@Repository、@Controller</p>\n</blockquote>\n<h5 id=\"3-JavaConfig-demo\"><a href=\"#3-JavaConfig-demo\" class=\"headerlink\" title=\"3.JavaConfig demo\"></a>3.JavaConfig demo</h5><p><strong>FuncOneService</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:33</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 普通方法类，不声明为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncOneService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"java config, Function one show : \"</span> + word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>FuncTwoService</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:34</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:普通方法类， 不声明为bean， 不依赖注入</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncTwoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FuncOneService funcOneService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFuncOneService</span><span class=\"params\">(FuncOneService funcOneService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.funcOneService = funcOneService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcOneService.show(word);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaConfig</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:36</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 声明为配置类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 无需进行包扫描，因为所有的bean都在这里定义</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 通过使用<span class=\"doctag\">@Bean</span>注解， 可以更加灵活地创建管理Bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FuncOneService <span class=\"title\">funcOneService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FuncOneService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FuncTwoService <span class=\"title\">funcTwoService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FuncTwoService funcTwoService = <span class=\"keyword\">new</span> FuncTwoService();</span><br><span class=\"line\">        funcTwoService.setFuncOneService(funcOneService());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcTwoService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:43</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(JavaConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        FuncTwoService funcTwoService = context.getBean(FuncTwoService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(funcTwoService.show(<span class=\"string\">\"hi javaConfig\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191011162129763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"三、AOP\"><a href=\"#三、AOP\" class=\"headerlink\" title=\"三、AOP\"></a>三、AOP</h4><h5 id=\"1-AOP的由来\"><a href=\"#1-AOP的由来\" class=\"headerlink\" title=\"1.AOP的由来\"></a>1.AOP的由来</h5><blockquote>\n<p><strong>AOP: 面向切面编程</strong></p>\n</blockquote>\n<blockquote>\n<p>OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需 要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。<br>AOP技术利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为 “Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低 模块间的耦合度，并有利于未来的可操作性和可维护性。<br>AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为； 那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手 将这些剖开的切面复原，不留痕迹。</p>\n</blockquote>\n<h5 id=\"2-AOP的目的\"><a href=\"#2-AOP的目的\" class=\"headerlink\" title=\"2.AOP的目的\"></a>2.AOP的目的</h5><blockquote>\n<p>Spring AOP存在的目的就是为了解耦。 让一组类共享相同的行为</p>\n</blockquote>\n<h5 id=\"3-涉及到的注解\"><a href=\"#3-涉及到的注解\" class=\"headerlink\" title=\"3.涉及到的注解\"></a>3.涉及到的注解</h5><p><strong>切面编程涉及到的注解：</strong></p>\n<ul>\n<li>@Aspect 声明一个切面</li>\n<li>@PointCut 声明一个切点</li>\n<li>@Before, @After, @Around 定义建言， 可直接将切点（或者方法拦截规则）作为参数</li>\n</ul>\n<p><strong>创建一个注解所涉及到的注解：</strong></p>\n<ul>\n<li>@interface 声明一个注解</li>\n<li>@Target 用于描述注解的使用范围</li>\n<li>@Retention 用于描述一个注解存在的生命周期</li>\n</ul>\n<h5 id=\"4-AOP-Demo\"><a href=\"#4-AOP-Demo\" class=\"headerlink\" title=\"4.AOP Demo\"></a>4.AOP Demo</h5><p><strong>pom文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.cactus<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springdemo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        Spring容器--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        Aop--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        aspectj--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjrt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:01</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 拦截规则的注解</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 用于描述注解的使用范围</span></span><br><span class=\"line\"><span class=\"comment\"> * ElementType枚举类型，元注解中的枚举值决定了一个注解可以标记的范围</span></span><br><span class=\"line\"><span class=\"comment\"> *      TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明</span></span><br><span class=\"line\"><span class=\"comment\"> *      FIELD ： 用于描述字段</span></span><br><span class=\"line\"><span class=\"comment\"> *      METHOD ：方法</span></span><br><span class=\"line\"><span class=\"comment\"> *      PARAMETER ： 参数 【参数名】</span></span><br><span class=\"line\"><span class=\"comment\"> *      CONSTRUCTOR ： 构造方法</span></span><br><span class=\"line\"><span class=\"comment\"> *      LOCAL_VARIABLE ： 局部变量</span></span><br><span class=\"line\"><span class=\"comment\"> *      ANNOTATION_TYPE ： 可以打在注解上面</span></span><br><span class=\"line\"><span class=\"comment\"> *      PACKAGE ：可以打在包上面</span></span><br><span class=\"line\"><span class=\"comment\"> *      TYPE_PARAMETER ： 参数类型【形式参数类型】</span></span><br><span class=\"line\"><span class=\"comment\"> *2. <span class=\"doctag\">@Retention</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 用于描述一个注解存在的生命周期【源码，字节码文件，运行时】</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举值RetentionPolicy：几个值决定了几个状态：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\tSOURCE ：表示一个注解可以存在于源码中==&gt;java的源码中</span></span><br><span class=\"line\"><span class=\"comment\"> *      CLASS ：表示 一个注解可以在源码中，并且可以在字节码文件中</span></span><br><span class=\"line\"><span class=\"comment\"> *      RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Action &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>被拦截类1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> *  被拦截类，使用拦截注解</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncOneService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Action</span>(name = <span class=\"string\">\"注解式拦截\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"function one show time!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>被拦截类2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:42</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 被拦截类， 使用方法规则拦截</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncTwoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is func2 showtime\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is func2 showtime test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切面类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:19</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 切面类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Aspect</span> 声明切面</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Component</span> 声明Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Pointcut</span> 声明切点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@After</span> 声明一个建言，并使用<span class=\"doctag\">@Pointcut</span>声明的切点。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用注解拦截-start</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.cactus.aopdemo.Action)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">annotationPointCut</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可通过反射获得注解上的属性，然后做自定义操作</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"annotationPointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        Action action = method.getAnnotation(Action<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"FuncAspect after, action name : \"</span> + action.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"annotationPointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"FuncAspect after, no operation, 注解式拦截\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用注解拦截-end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用方法规则拦截-start</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforef</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法规则拦截-before， methodName:\"</span> + method.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterf</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法规则拦截-after， methodName:\"</span> + method.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用方法规则拦截-end</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:38</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: AOP demo 配置类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@EnableAspectJAutoProxy</span> 开启Spring对AspectJ的支持</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.aopdemo\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:37</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(AopConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        FuncOneService funcOneService = context.getBean(FuncOneService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        FuncTwoService funcTwoService = context.getBean(FuncTwoService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 注解式拦截</span></span><br><span class=\"line\">        funcOneService.show();</span><br><span class=\"line\">        <span class=\"comment\">// 方法规则式拦截</span></span><br><span class=\"line\">        funcTwoService.show();</span><br><span class=\"line\">        funcTwoService.test();</span><br><span class=\"line\"></span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191011162149201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Spring框架的四大原则：</p>\n<ol>\n<li>使用POJO进行轻量级和最小侵入式开发</li>\n<li>通过依赖注入和基于接口编程实现松耦合</li>\n<li>通过AOP和默认习惯进行声明式编程</li>\n<li>使用AOP和模板（template）减少模式化代码</li>\n</ol>\n</blockquote>\n<p><a href=\"http://www.west999.com/info/html/chengxusheji/Javajishu/20180719/4347703.html\" target=\"_blank\" rel=\"noopener\">对四大原则的理解可以看这里</a></p>\n<h4 id=\"一、依赖注入\"><a href=\"#一、依赖注入\" class=\"headerlink\" title=\"一、依赖注入\"></a>一、依赖注入</h4><h5 id=\"1-依赖注入的概念：\"><a href=\"#1-依赖注入的概念：\" class=\"headerlink\" title=\"1.依赖注入的概念：\"></a>1.依赖注入的概念：</h5><blockquote>\n<p>依赖注入是指容器负责创建对象和维护对象间的依赖关系，而非通过对象本身负责自己的创建和解决自己的依赖。</p>\n</blockquote>\n<h5 id=\"2-依赖注入的主要目的：\"><a href=\"#2-依赖注入的主要目的：\" class=\"headerlink\" title=\"2.依赖注入的主要目的：\"></a>2.依赖注入的主要目的：</h5><blockquote>\n<p>主要目的就是解耦，所体现的是java组合的理念。毫无疑问组合相对于继承，耦合度会大大降低。</p>\n</blockquote>\n<h5 id=\"3-具体实现\"><a href=\"#3-具体实现\" class=\"headerlink\" title=\"3.具体实现\"></a>3.具体实现</h5><blockquote>\n<p>Spring IoC容器（ApplicationContext）负责创建Bean，并通过容器将功能类Bean注入到你所需要的Bean中。<br>Spring提供xml、注解、Java配置，这三种方式都被称为配置元数据。即描述数据的数据，本身不具备任何执行能力，只能通过外界代码对元数据解析后进行一些有意义的操作。</p>\n</blockquote>\n<h5 id=\"4-涉及到的注解（推荐注解的方式，xml效率低且复杂）\"><a href=\"#4-涉及到的注解（推荐注解的方式，xml效率低且复杂）\" class=\"headerlink\" title=\"4.涉及到的注解（推荐注解的方式，xml效率低且复杂）\"></a>4.涉及到的注解（推荐注解的方式，xml效率低且复杂）</h5><p><strong>声明式Bean的注解：</strong></p>\n<ul>\n<li>@Component   没有明确角色</li>\n<li>@Service     业务逻辑层使用</li>\n<li>@Repository  数据访问层使用</li>\n<li>@Controller  展现层使用（提供接口的方法类） </li>\n</ul>\n<p><strong>注入Bean的注解</strong></p>\n<ul>\n<li>@Autowired    Spring提供的注解（通常使用这个）</li>\n<li>@Inject       JSR-330提供的注解</li>\n<li>@Resource     JSR-250提供的注解<br>（注入Bean的注解 可注解到set方法上或者属性上，具体根据实际开发场景选择）</li>\n</ul>\n<h5 id=\"5-Ioc-amp-Di-Demo\"><a href=\"#5-Ioc-amp-Di-Demo\" class=\"headerlink\" title=\"5.Ioc&amp;Di Demo\"></a>5.Ioc&amp;Di Demo</h5><p><strong>方法bean1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:02</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Service</span> 声明FuncOneService为bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncOneService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Function one show : \"</span> + word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法bean2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:03</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Service</span> 声明 FuncTwoService 为bean</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. <span class=\"doctag\">@Autowired</span> 将 FuncOneService 注入到 FuncTwoService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncTwoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FuncOneService funcOneService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcOneService.show(word);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:07</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Configuration</span> 声明注册类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. <span class=\"doctag\">@ComponentScan</span>扫描指定包，并注册为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.iocdidemo\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.iocdidemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:05</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用AnnotationConfigApplicationContext容器，并选择BeanConfig为配置类</span></span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(BeanConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// bean已有容器创建，从容器中获取方法bean</span></span><br><span class=\"line\">        FuncTwoService funcTwoService = context.getBean(FuncTwoService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String showWord = funcTwoService.show(<span class=\"string\">\"hi ioc&amp;di\"</span>);</span><br><span class=\"line\">        System.out.println(showWord);</span><br><span class=\"line\">        </span><br><span class=\"line\">        context.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result：</strong><br><img src=\"https://img-blog.csdnimg.cn/2019101116211179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"二、Java配置\"><a href=\"#二、Java配置\" class=\"headerlink\" title=\"二、Java配置\"></a>二、Java配置</h4><h5 id=\"1-Java配置简介\"><a href=\"#1-Java配置简介\" class=\"headerlink\" title=\"1.Java配置简介\"></a>1.Java配置简介</h5><blockquote>\n<p>Java配置是Spring 4.x和Spring Boot推荐的配置方式，可以完全替代xml配置。<br>通过@Configuration和@Bean来实现：</p>\n<ul>\n<li>@Configuration 声明当前类是个配置类，相当于一个xml文件</li>\n<li>@Bean         注解到方法上，声明当前方法返回值是个Bean</li>\n</ul>\n</blockquote>\n<h5 id=\"2-什么时候使用Java配置\"><a href=\"#2-什么时候使用Java配置\" class=\"headerlink\" title=\"2.什么时候使用Java配置\"></a>2.什么时候使用Java配置</h5><blockquote>\n<p>全局配置使用java配置，如数据库相关配置、MVC相关配置<br>业务Bean的配置使用注解配置，如@Service、@Component、@Repository、@Controller</p>\n</blockquote>\n<h5 id=\"3-JavaConfig-demo\"><a href=\"#3-JavaConfig-demo\" class=\"headerlink\" title=\"3.JavaConfig demo\"></a>3.JavaConfig demo</h5><p><strong>FuncOneService</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:33</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 普通方法类，不声明为Bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncOneService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"java config, Function one show : \"</span> + word;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>FuncTwoService</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:34</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:普通方法类， 不声明为bean， 不依赖注入</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncTwoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FuncOneService funcOneService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFuncOneService</span><span class=\"params\">(FuncOneService funcOneService)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.funcOneService = funcOneService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">(String word)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcOneService.show(word);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>JavaConfig</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:36</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 声明为配置类</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 无需进行包扫描，因为所有的bean都在这里定义</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 通过使用<span class=\"doctag\">@Bean</span>注解， 可以更加灵活地创建管理Bean</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FuncOneService <span class=\"title\">funcOneService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FuncOneService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FuncTwoService <span class=\"title\">funcTwoService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FuncTwoService funcTwoService = <span class=\"keyword\">new</span> FuncTwoService();</span><br><span class=\"line\">        funcTwoService.setFuncOneService(funcOneService());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcTwoService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.javaconfigdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 11:43</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(JavaConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        FuncTwoService funcTwoService = context.getBean(FuncTwoService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(funcTwoService.show(<span class=\"string\">\"hi javaConfig\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191011162129763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"三、AOP\"><a href=\"#三、AOP\" class=\"headerlink\" title=\"三、AOP\"></a>三、AOP</h4><h5 id=\"1-AOP的由来\"><a href=\"#1-AOP的由来\" class=\"headerlink\" title=\"1.AOP的由来\"></a>1.AOP的由来</h5><blockquote>\n<p><strong>AOP: 面向切面编程</strong></p>\n</blockquote>\n<blockquote>\n<p>OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需 要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。<br>AOP技术利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为 “Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低 模块间的耦合度，并有利于未来的可操作性和可维护性。<br>AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为； 那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手 将这些剖开的切面复原，不留痕迹。</p>\n</blockquote>\n<h5 id=\"2-AOP的目的\"><a href=\"#2-AOP的目的\" class=\"headerlink\" title=\"2.AOP的目的\"></a>2.AOP的目的</h5><blockquote>\n<p>Spring AOP存在的目的就是为了解耦。 让一组类共享相同的行为</p>\n</blockquote>\n<h5 id=\"3-涉及到的注解\"><a href=\"#3-涉及到的注解\" class=\"headerlink\" title=\"3.涉及到的注解\"></a>3.涉及到的注解</h5><p><strong>切面编程涉及到的注解：</strong></p>\n<ul>\n<li>@Aspect 声明一个切面</li>\n<li>@PointCut 声明一个切点</li>\n<li>@Before, @After, @Around 定义建言， 可直接将切点（或者方法拦截规则）作为参数</li>\n</ul>\n<p><strong>创建一个注解所涉及到的注解：</strong></p>\n<ul>\n<li>@interface 声明一个注解</li>\n<li>@Target 用于描述注解的使用范围</li>\n<li>@Retention 用于描述一个注解存在的生命周期</li>\n</ul>\n<h5 id=\"4-AOP-Demo\"><a href=\"#4-AOP-Demo\" class=\"headerlink\" title=\"4.AOP Demo\"></a>4.AOP Demo</h5><p><strong>pom文件</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.cactus<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springdemo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        Spring容器--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        Aop--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        aspectj--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjrt<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:01</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 拦截规则的注解</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. <span class=\"doctag\">@Target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 用于描述注解的使用范围</span></span><br><span class=\"line\"><span class=\"comment\"> * ElementType枚举类型，元注解中的枚举值决定了一个注解可以标记的范围</span></span><br><span class=\"line\"><span class=\"comment\"> *      TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明</span></span><br><span class=\"line\"><span class=\"comment\"> *      FIELD ： 用于描述字段</span></span><br><span class=\"line\"><span class=\"comment\"> *      METHOD ：方法</span></span><br><span class=\"line\"><span class=\"comment\"> *      PARAMETER ： 参数 【参数名】</span></span><br><span class=\"line\"><span class=\"comment\"> *      CONSTRUCTOR ： 构造方法</span></span><br><span class=\"line\"><span class=\"comment\"> *      LOCAL_VARIABLE ： 局部变量</span></span><br><span class=\"line\"><span class=\"comment\"> *      ANNOTATION_TYPE ： 可以打在注解上面</span></span><br><span class=\"line\"><span class=\"comment\"> *      PACKAGE ：可以打在包上面</span></span><br><span class=\"line\"><span class=\"comment\"> *      TYPE_PARAMETER ： 参数类型【形式参数类型】</span></span><br><span class=\"line\"><span class=\"comment\"> *2. <span class=\"doctag\">@Retention</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 用于描述一个注解存在的生命周期【源码，字节码文件，运行时】</span></span><br><span class=\"line\"><span class=\"comment\"> * 枚举值RetentionPolicy：几个值决定了几个状态：</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\tSOURCE ：表示一个注解可以存在于源码中==&gt;java的源码中</span></span><br><span class=\"line\"><span class=\"comment\"> *      CLASS ：表示 一个注解可以在源码中，并且可以在字节码文件中</span></span><br><span class=\"line\"><span class=\"comment\"> *      RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.METHOD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Action &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>被拦截类1</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> *  被拦截类，使用拦截注解</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncOneService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Action</span>(name = <span class=\"string\">\"注解式拦截\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"function one show time!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>被拦截类2</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:42</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 被拦截类， 使用方法规则拦截</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncTwoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is func2 showtime\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is func2 showtime test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切面类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:19</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 切面类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Aspect</span> 声明切面</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Component</span> 声明Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Pointcut</span> 声明切点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@After</span> 声明一个建言，并使用<span class=\"doctag\">@Pointcut</span>声明的切点。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FuncAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用注解拦截-start</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.cactus.aopdemo.Action)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">annotationPointCut</span><span class=\"params\">()</span></span>&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可通过反射获得注解上的属性，然后做自定义操作</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"annotationPointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        Action action = method.getAnnotation(Action<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"FuncAspect after, action name : \"</span> + action.name());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"annotationPointCut()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"FuncAspect after, no operation, 注解式拦截\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用注解拦截-end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用方法规则拦截-start</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforef</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法规则拦截-before， methodName:\"</span> + method.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* com.cactus.aopdemo.FuncTwoService.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterf</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        MethodSignature signature = (MethodSignature)joinPoint.getSignature();</span><br><span class=\"line\">        Method method = signature.getMethod();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法规则拦截-after， methodName:\"</span> + method.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 使用方法规则拦截-end</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:38</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: AOP demo 配置类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@EnableAspectJAutoProxy</span> 开启Spring对AspectJ的支持</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.aopdemo\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AopConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.aopdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 15:37</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(AopConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        FuncOneService funcOneService = context.getBean(FuncOneService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        FuncTwoService funcTwoService = context.getBean(FuncTwoService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 注解式拦截</span></span><br><span class=\"line\">        funcOneService.show();</span><br><span class=\"line\">        <span class=\"comment\">// 方法规则式拦截</span></span><br><span class=\"line\">        funcTwoService.show();</span><br><span class=\"line\">        funcTwoService.test();</span><br><span class=\"line\"></span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191011162149201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Spring常用配置-EL及使用资源文件","date":"2020-01-10T03:21:41.000Z","_content":"#### 一、Spring EL是什么？\n> Spring表达式语言，支持在xml和注解中使用表达式，类似于JSP的el表达式语言。\n\n\n#### 二、怎么使用？\n> Spring主要在 @Value注解 使用表达式， 实现资源的注入。\n> 可以注入包括以下内容：\n> * 普通字符\n> * 操作系统属性\n> * 表达式运算结果\n> * 其他Bean的属性\n> * 文件内容\n> * 网址内容\n> * 属性文件\n\n#### 三、ELDemo\n\n**一个憨憨的Bean**\n```java\npackage com.cactus.demo.el;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:52\n * Description:\n * 通过@Value注入内容\n */\n\n@Component\npublic class Demo {\n    @Value(\"乱七八糟其他的\")\n    public String another;\n\n    public String getAnother() {\n        return another;\n    }\n\n    public void setAnother(String another) {\n        this.another = another;\n    }\n}\n\n```\n\n**一个傻傻的Config文件**\n```java\npackage com.cactus.demo.el;\n\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.Resource;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:56\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.el\")\n// 注意配置文件和文本文件要放到resources目录下，才可以获取到该文件\n@PropertySource(\"classpath:eldemo/test.properties\")\npublic class ELConfig {\n\n    @Value(\"hi 647\")\n    private String normal;\n\n    @Value(\"#{systemProperties['os.name']}\")\n    private String osName;\n\n    // bean名字若未命名，则默认首字母小写\n    @Value(\"#{demo.another}\")\n    private String demoAnother;\n\n    @Value(\"classpath:eldemo/test.txt\")\n    private Resource testFile;\n\n    @Value(\"http://www.baidu.com\")\n    private Resource testUrl;\n\n    @Value(\"${book.name}\")\n    private String bookName;\n\n    // 配置文件的数据同样可以通过Environment获取\n    @Autowired\n    private Environment environment;\n\n    @Bean\n    public static PropertySourcesPlaceholderConfigurer propertyConfigure() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n\n    public void output() {\n        try {\n            System.out.println(normal);\n            System.out.println(osName);\n            System.out.println(demoAnother);\n            System.out.println(IOUtils.toString(testFile.getInputStream()));\n            System.out.println(IOUtils.toString(testUrl.getInputStream()));\n            System.out.println(bookName);\n            //通过environment获取配置文件数据\n            System.out.println(\"env : \" + environment.getProperty(\"book.author\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.el;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-12 10:29\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ELConfig.class);\n        ELConfig elConfig = context.getBean(ELConfig.class);\n        elConfig.output();\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015161013551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","source":"_posts/Spring常用配置-EL及使用资源文件.md","raw":"---\ntitle: Spring常用配置-EL及使用资源文件\ndate: 2020-01-10 11:21:41\ntags:\n---\n#### 一、Spring EL是什么？\n> Spring表达式语言，支持在xml和注解中使用表达式，类似于JSP的el表达式语言。\n\n\n#### 二、怎么使用？\n> Spring主要在 @Value注解 使用表达式， 实现资源的注入。\n> 可以注入包括以下内容：\n> * 普通字符\n> * 操作系统属性\n> * 表达式运算结果\n> * 其他Bean的属性\n> * 文件内容\n> * 网址内容\n> * 属性文件\n\n#### 三、ELDemo\n\n**一个憨憨的Bean**\n```java\npackage com.cactus.demo.el;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:52\n * Description:\n * 通过@Value注入内容\n */\n\n@Component\npublic class Demo {\n    @Value(\"乱七八糟其他的\")\n    public String another;\n\n    public String getAnother() {\n        return another;\n    }\n\n    public void setAnother(String another) {\n        this.another = another;\n    }\n}\n\n```\n\n**一个傻傻的Config文件**\n```java\npackage com.cactus.demo.el;\n\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.io.Resource;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n/**\n * Created by liruigao\n * Date: 2019-10-11 20:56\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.el\")\n// 注意配置文件和文本文件要放到resources目录下，才可以获取到该文件\n@PropertySource(\"classpath:eldemo/test.properties\")\npublic class ELConfig {\n\n    @Value(\"hi 647\")\n    private String normal;\n\n    @Value(\"#{systemProperties['os.name']}\")\n    private String osName;\n\n    // bean名字若未命名，则默认首字母小写\n    @Value(\"#{demo.another}\")\n    private String demoAnother;\n\n    @Value(\"classpath:eldemo/test.txt\")\n    private Resource testFile;\n\n    @Value(\"http://www.baidu.com\")\n    private Resource testUrl;\n\n    @Value(\"${book.name}\")\n    private String bookName;\n\n    // 配置文件的数据同样可以通过Environment获取\n    @Autowired\n    private Environment environment;\n\n    @Bean\n    public static PropertySourcesPlaceholderConfigurer propertyConfigure() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n\n    public void output() {\n        try {\n            System.out.println(normal);\n            System.out.println(osName);\n            System.out.println(demoAnother);\n            System.out.println(IOUtils.toString(testFile.getInputStream()));\n            System.out.println(IOUtils.toString(testUrl.getInputStream()));\n            System.out.println(bookName);\n            //通过environment获取配置文件数据\n            System.out.println(\"env : \" + environment.getProperty(\"book.author\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.el;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-12 10:29\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ELConfig.class);\n        ELConfig elConfig = context.getBean(ELConfig.class);\n        elConfig.output();\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015161013551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","slug":"Spring常用配置-EL及使用资源文件","published":1,"updated":"2020-01-10T03:22:23.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2d9000a4sz0gmujdki9","content":"<h4 id=\"一、Spring-EL是什么？\"><a href=\"#一、Spring-EL是什么？\" class=\"headerlink\" title=\"一、Spring EL是什么？\"></a>一、Spring EL是什么？</h4><blockquote>\n<p>Spring表达式语言，支持在xml和注解中使用表达式，类似于JSP的el表达式语言。</p>\n</blockquote>\n<h4 id=\"二、怎么使用？\"><a href=\"#二、怎么使用？\" class=\"headerlink\" title=\"二、怎么使用？\"></a>二、怎么使用？</h4><blockquote>\n<p>Spring主要在 @Value注解 使用表达式， 实现资源的注入。<br>可以注入包括以下内容：</p>\n<ul>\n<li>普通字符</li>\n<li>操作系统属性</li>\n<li>表达式运算结果</li>\n<li>其他Bean的属性</li>\n<li>文件内容</li>\n<li>网址内容</li>\n<li>属性文件</li>\n</ul>\n</blockquote>\n<h4 id=\"三、ELDemo\"><a href=\"#三、ELDemo\" class=\"headerlink\" title=\"三、ELDemo\"></a>三、ELDemo</h4><p><strong>一个憨憨的Bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.el;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:52</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过<span class=\"doctag\">@Value</span>注入内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"乱七八糟其他的\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String another;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAnother</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> another;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAnother</span><span class=\"params\">(String another)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.another = another;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>一个傻傻的Config文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.el;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:56</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.el\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注意配置文件和文本文件要放到resources目录下，才可以获取到该文件</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(<span class=\"string\">\"classpath:eldemo/test.properties\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ELConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"hi 647\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String normal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;systemProperties['os.name']&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String osName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bean名字若未命名，则默认首字母小写</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;demo.another&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String demoAnother;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"classpath:eldemo/test.txt\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource testFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource testUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;book.name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bookName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置文件的数据同样可以通过Environment获取</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlaceholderConfigurer <span class=\"title\">propertyConfigure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(normal);</span><br><span class=\"line\">            System.out.println(osName);</span><br><span class=\"line\">            System.out.println(demoAnother);</span><br><span class=\"line\">            System.out.println(IOUtils.toString(testFile.getInputStream()));</span><br><span class=\"line\">            System.out.println(IOUtils.toString(testUrl.getInputStream()));</span><br><span class=\"line\">            System.out.println(bookName);</span><br><span class=\"line\">            <span class=\"comment\">//通过environment获取配置文件数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"env : \"</span> + environment.getProperty(<span class=\"string\">\"book.author\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.el;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-12 10:29</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ELConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ELConfig elConfig = context.getBean(ELConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        elConfig.output();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015161013551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Spring-EL是什么？\"><a href=\"#一、Spring-EL是什么？\" class=\"headerlink\" title=\"一、Spring EL是什么？\"></a>一、Spring EL是什么？</h4><blockquote>\n<p>Spring表达式语言，支持在xml和注解中使用表达式，类似于JSP的el表达式语言。</p>\n</blockquote>\n<h4 id=\"二、怎么使用？\"><a href=\"#二、怎么使用？\" class=\"headerlink\" title=\"二、怎么使用？\"></a>二、怎么使用？</h4><blockquote>\n<p>Spring主要在 @Value注解 使用表达式， 实现资源的注入。<br>可以注入包括以下内容：</p>\n<ul>\n<li>普通字符</li>\n<li>操作系统属性</li>\n<li>表达式运算结果</li>\n<li>其他Bean的属性</li>\n<li>文件内容</li>\n<li>网址内容</li>\n<li>属性文件</li>\n</ul>\n</blockquote>\n<h4 id=\"三、ELDemo\"><a href=\"#三、ELDemo\" class=\"headerlink\" title=\"三、ELDemo\"></a>三、ELDemo</h4><p><strong>一个憨憨的Bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.el;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:52</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过<span class=\"doctag\">@Value</span>注入内容</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"乱七八糟其他的\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String another;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getAnother</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> another;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAnother</span><span class=\"params\">(String another)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.another = another;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>一个傻傻的Config文件</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.el;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.PropertySourcesPlaceholderConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.env.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-11 20:56</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.el\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 注意配置文件和文本文件要放到resources目录下，才可以获取到该文件</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(<span class=\"string\">\"classpath:eldemo/test.properties\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ELConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"hi 647\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String normal;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;systemProperties['os.name']&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String osName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// bean名字若未命名，则默认首字母小写</span></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"#&#123;demo.another&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String demoAnother;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"classpath:eldemo/test.txt\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource testFile;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"http://www.baidu.com\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Resource testUrl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;book.name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bookName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 配置文件的数据同样可以通过Environment获取</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlaceholderConfigurer <span class=\"title\">propertyConfigure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">output</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(normal);</span><br><span class=\"line\">            System.out.println(osName);</span><br><span class=\"line\">            System.out.println(demoAnother);</span><br><span class=\"line\">            System.out.println(IOUtils.toString(testFile.getInputStream()));</span><br><span class=\"line\">            System.out.println(IOUtils.toString(testUrl.getInputStream()));</span><br><span class=\"line\">            System.out.println(bookName);</span><br><span class=\"line\">            <span class=\"comment\">//通过environment获取配置文件数据</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"env : \"</span> + environment.getProperty(<span class=\"string\">\"book.author\"</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.el;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-12 10:29</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ELConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ELConfig elConfig = context.getBean(ELConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        elConfig.output();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015161013551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"RocketMQ角色详解之Producer","date":"2020-01-09T12:33:44.000Z","_content":"### 一、常用Producer类\n最常用的producer类就是DefaultMQProducer，具体使用看下文\n\n### 二、DefaultMQProducer的消息发送步骤\n\n 1. 设置 ProducerGroupName\n 2. 设置 lnstanceName\n 3. 设置发送失败重试次数\n 4. 设置 NameServer 地址\n 5. 组装消息并发送\n\n**具体代码参考如下：**\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.setInstanceName(\"p1\");\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setNamesrvAddr(\"192.128.122.123:9876;192.128.122.124:9876;\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n\n```\n\n### 三、消息发送方式\n**1.同步发送**\nDefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：\n\n    SEND_OK\n    FLUSH_DISK_TIMEOUT\n    FLUSH_SLAVE_TIMEOUT\n    SLAVE_NOT_AVAILABLE\n    需要结合配置的刷盘策略、主从策略来理解其含义\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n```\n**2.异步发送**\nDefaultMQProducer异步发送消息可参考如下代码：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class AsyncProducer {\n    public static void main(\n        String[] args) throws MQClientException, InterruptedException, UnsupportedEncodingException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"Jodie_Daily_test\");\n        producer.start();\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n\n        int messageCount = 100;\n        final CountDownLatch countDownLatch = new CountDownLatch(messageCount);\n        for (int i = 0; i < messageCount; i++) {\n            try {\n                final int index = i;\n                Message msg = new Message(\"Jodie_topic_1023\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d OK %s %n\", index, sendResult.getMsgId());\n                    }\n\n                    @Override\n                    public void onException(Throwable e) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d Exception %s %n\", index, e);\n                        e.printStackTrace();\n                    }\n                });\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        producer.shutdown();\n    }\n}\n```\n**3.延迟发送**\nDefaultMQProducer延迟发送使用方法：\n\n    在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send\n\n注意：\n```java\n延迟发送仅支持预设值的时间长度：1s/5s/1Os/30s/Im/2m/3m/4m/5m/6m/ 7m/8m/9m/1Om/20m/30m/1h/2h\n如setDelayTimeLevel(3)表示延迟 10s\n```\n**4.事务消息发送**\nDefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。\n```java\n场景：\nA 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。\n\nTransactionMQProducer 处理流程是：\n1.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。\n2.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息\n3.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。\n若二次确认未到达RocketMQ，则发起回查请求\n```\n详细参考代码如下：\n\n**TransactionProducer**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.client.producer.TransactionMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class TransactionProducer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        TransactionListener transactionListener = new TransactionListenerImpl();\n        TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r);\n                thread.setName(\"client-transaction-msg-check-thread\");\n                return thread;\n            }\n        });\n\n        producer.setExecutorService(executorService);\n        producer.setTransactionListener(transactionListener);\n        producer.start();\n\n        String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n        for (int i = 0; i < 10; i++) {\n            try {\n                Message msg =\n                    new Message(\"TopicTest1234\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n                System.out.printf(\"%s%n\", sendResult);\n\n                Thread.sleep(10);\n            } catch (MQClientException | UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        for (int i = 0; i < 100000; i++) {\n            Thread.sleep(1000);\n        }\n        producer.shutdown();\n    }\n}\n```\n\n**TransactionListenerImpl**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.producer.LocalTransactionState;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class TransactionListenerImpl implements TransactionListener {\n    private AtomicInteger transactionIndex = new AtomicInteger(0);\n\n    private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\n    @Override\n    public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        int value = transactionIndex.getAndIncrement();\n        int status = value % 3;\n        localTrans.put(msg.getTransactionId(), status);\n        return LocalTransactionState.UNKNOW;\n    }\n\n    @Override\n    public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n        Integer status = localTrans.get(msg.getTransactionId());\n        if (null != status) {\n            switch (status) {\n                case 0:\n                    return LocalTransactionState.UNKNOW;\n                case 1:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n                case 2:\n                    return LocalTransactionState.ROLLBACK_MESSAGE;\n                default:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n            }\n        }\n        return LocalTransactionState.COMMIT_MESSAGE;\n    }\n}\n\n```\n\n### 四、自定义消息发送规则\n**背景：**\n```java\n一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。\n若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector\n```\n**解决思路：**\n```java\n发送消息的时候，将 MessageQueueSelector 的对象作为参数，\n在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。\n\n使用public SendResult send(Message msg, MessageQueueSelector selector, Object arg)函数发送消息\n```\n\n**具体参考代码如下：**\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\n\npublic class Producer {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        try {\n            MQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n            producer.start();\n\n            String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n            for (int i = 0; i < 100; i++) {\n                int orderId = i % 10;\n                Message msg =\n                    new Message(\"TopicTestjjj\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        Integer id = (Integer) arg;\n                        int index = id % mqs.size();\n                        return mqs.get(index);\n                    }\n                }, orderId);\n\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n            producer.shutdown();\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n","source":"_posts/RocketMQ角色详解之Producer.md","raw":"---\ntitle: RocketMQ角色详解之Producer\ndate: 2020-01-09 20:33:44\ntags:\n---\n### 一、常用Producer类\n最常用的producer类就是DefaultMQProducer，具体使用看下文\n\n### 二、DefaultMQProducer的消息发送步骤\n\n 1. 设置 ProducerGroupName\n 2. 设置 lnstanceName\n 3. 设置发送失败重试次数\n 4. 设置 NameServer 地址\n 5. 组装消息并发送\n\n**具体代码参考如下：**\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n        producer.setInstanceName(\"p1\");\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setNamesrvAddr(\"192.128.122.123:9876;192.128.122.124:9876;\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n\n```\n\n### 三、消息发送方式\n**1.同步发送**\nDefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：\n\n    SEND_OK\n    FLUSH_DISK_TIMEOUT\n    FLUSH_SLAVE_TIMEOUT\n    SLAVE_NOT_AVAILABLE\n    需要结合配置的刷盘策略、主从策略来理解其含义\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\");\n\n        producer.start();\n\n        for (int i = 0; i < 128; i++)\n            try {\n                {\n                    Message msg = new Message(\"TopicTest\",\n                        \"TagA\",\n                        \"OrderID188\",\n                        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                    SendResult sendResult = producer.send(msg);\n                    System.out.printf(\"%s%n\", sendResult);\n                }\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        producer.shutdown();\n    }\n}\n```\n**2.异步发送**\nDefaultMQProducer异步发送消息可参考如下代码：\n```java\npackage org.apache.rocketmq.example.simple;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class AsyncProducer {\n    public static void main(\n        String[] args) throws MQClientException, InterruptedException, UnsupportedEncodingException {\n\n        DefaultMQProducer producer = new DefaultMQProducer(\"Jodie_Daily_test\");\n        producer.start();\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n\n        int messageCount = 100;\n        final CountDownLatch countDownLatch = new CountDownLatch(messageCount);\n        for (int i = 0; i < messageCount; i++) {\n            try {\n                final int index = i;\n                Message msg = new Message(\"Jodie_topic_1023\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d OK %s %n\", index, sendResult.getMsgId());\n                    }\n\n                    @Override\n                    public void onException(Throwable e) {\n                        countDownLatch.countDown();\n                        System.out.printf(\"%-10d Exception %s %n\", index, e);\n                        e.printStackTrace();\n                    }\n                });\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        countDownLatch.await(5, TimeUnit.SECONDS);\n        producer.shutdown();\n    }\n}\n```\n**3.延迟发送**\nDefaultMQProducer延迟发送使用方法：\n\n    在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send\n\n注意：\n```java\n延迟发送仅支持预设值的时间长度：1s/5s/1Os/30s/Im/2m/3m/4m/5m/6m/ 7m/8m/9m/1Om/20m/30m/1h/2h\n如setDelayTimeLevel(3)表示延迟 10s\n```\n**4.事务消息发送**\nDefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。\n```java\n场景：\nA 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。\n\nTransactionMQProducer 处理流程是：\n1.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。\n2.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息\n3.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。\n若二次确认未到达RocketMQ，则发起回查请求\n```\n详细参考代码如下：\n\n**TransactionProducer**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.client.producer.TransactionMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class TransactionProducer {\n    public static void main(String[] args) throws MQClientException, InterruptedException {\n        TransactionListener transactionListener = new TransactionListenerImpl();\n        TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r);\n                thread.setName(\"client-transaction-msg-check-thread\");\n                return thread;\n            }\n        });\n\n        producer.setExecutorService(executorService);\n        producer.setTransactionListener(transactionListener);\n        producer.start();\n\n        String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n        for (int i = 0; i < 10; i++) {\n            try {\n                Message msg =\n                    new Message(\"TopicTest1234\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n                System.out.printf(\"%s%n\", sendResult);\n\n                Thread.sleep(10);\n            } catch (MQClientException | UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n\n        for (int i = 0; i < 100000; i++) {\n            Thread.sleep(1000);\n        }\n        producer.shutdown();\n    }\n}\n```\n\n**TransactionListenerImpl**\n```java\npackage org.apache.rocketmq.example.transaction;\n\nimport org.apache.rocketmq.client.producer.LocalTransactionState;\nimport org.apache.rocketmq.client.producer.TransactionListener;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class TransactionListenerImpl implements TransactionListener {\n    private AtomicInteger transactionIndex = new AtomicInteger(0);\n\n    private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\n    @Override\n    public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        int value = transactionIndex.getAndIncrement();\n        int status = value % 3;\n        localTrans.put(msg.getTransactionId(), status);\n        return LocalTransactionState.UNKNOW;\n    }\n\n    @Override\n    public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n        Integer status = localTrans.get(msg.getTransactionId());\n        if (null != status) {\n            switch (status) {\n                case 0:\n                    return LocalTransactionState.UNKNOW;\n                case 1:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n                case 2:\n                    return LocalTransactionState.ROLLBACK_MESSAGE;\n                default:\n                    return LocalTransactionState.COMMIT_MESSAGE;\n            }\n        }\n        return LocalTransactionState.COMMIT_MESSAGE;\n    }\n}\n\n```\n\n### 四、自定义消息发送规则\n**背景：**\n```java\n一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。\n若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector\n```\n**解决思路：**\n```java\n发送消息的时候，将 MessageQueueSelector 的对象作为参数，\n在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。\n\n使用public SendResult send(Message msg, MessageQueueSelector selector, Object arg)函数发送消息\n```\n\n**具体参考代码如下：**\n```java\npackage org.apache.rocketmq.example.ordermessage;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\n\npublic class Producer {\n    public static void main(String[] args) throws UnsupportedEncodingException {\n        try {\n            MQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n            producer.start();\n\n            String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n            for (int i = 0; i < 100; i++) {\n                int orderId = i % 10;\n                Message msg =\n                    new Message(\"TopicTestjjj\", tags[i % tags.length], \"KEY\" + i,\n                        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        Integer id = (Integer) arg;\n                        int index = id % mqs.size();\n                        return mqs.get(index);\n                    }\n                }, orderId);\n\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n            producer.shutdown();\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n","slug":"RocketMQ角色详解之Producer","published":1,"updated":"2020-01-09T12:33:53.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2da000b4sz0etredhjo","content":"<h3 id=\"一、常用Producer类\"><a href=\"#一、常用Producer类\" class=\"headerlink\" title=\"一、常用Producer类\"></a>一、常用Producer类</h3><p>最常用的producer类就是DefaultMQProducer，具体使用看下文</p>\n<h3 id=\"二、DefaultMQProducer的消息发送步骤\"><a href=\"#二、DefaultMQProducer的消息发送步骤\" class=\"headerlink\" title=\"二、DefaultMQProducer的消息发送步骤\"></a>二、DefaultMQProducer的消息发送步骤</h3><ol>\n<li>设置 ProducerGroupName</li>\n<li>设置 lnstanceName</li>\n<li>设置发送失败重试次数</li>\n<li>设置 NameServer 地址</li>\n<li>组装消息并发送</li>\n</ol>\n<p><strong>具体代码参考如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.setInstanceName(<span class=\"string\">\"p1\"</span>);</span><br><span class=\"line\">        producer.setRetryTimesWhenSendFailed(<span class=\"number\">3</span>);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">\"192.128.122.123:9876;192.128.122.124:9876;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、消息发送方式\"><a href=\"#三、消息发送方式\" class=\"headerlink\" title=\"三、消息发送方式\"></a>三、消息发送方式</h3><p><strong>1.同步发送</strong><br>DefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：</p>\n<pre><code>SEND_OK\nFLUSH_DISK_TIMEOUT\nFLUSH_SLAVE_TIMEOUT\nSLAVE_NOT_AVAILABLE\n需要结合配置的刷盘策略、主从策略来理解其含义</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.异步发送</strong><br>DefaultMQProducer异步发送消息可参考如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"Jodie_Daily_test\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        producer.setRetryTimesWhenSendAsyncFailed(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> messageCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(messageCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"Jodie_topic_1023\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                producer.send(msg, <span class=\"keyword\">new</span> SendCallback() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(SendResult sendResult)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d OK %s %n\"</span>, index, sendResult.getMsgId());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d Exception %s %n\"</span>, index, e);</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.延迟发送</strong><br>DefaultMQProducer延迟发送使用方法：</p>\n<pre><code>在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send</code></pre><p>注意：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟发送仅支持预设值的时间长度：<span class=\"number\">1</span>s/<span class=\"number\">5</span>s/<span class=\"number\">1</span>Os/<span class=\"number\">30</span>s/Im/<span class=\"number\">2</span>m/<span class=\"number\">3</span>m/<span class=\"number\">4</span>m/<span class=\"number\">5</span>m/<span class=\"number\">6</span>m/ <span class=\"number\">7</span>m/<span class=\"number\">8</span>m/<span class=\"number\">9</span>m/<span class=\"number\">1</span>Om/<span class=\"number\">20</span>m/<span class=\"number\">30</span>m/<span class=\"number\">1</span>h/<span class=\"number\">2</span>h</span><br><span class=\"line\">如setDelayTimeLevel(<span class=\"number\">3</span>)表示延迟 <span class=\"number\">10</span>s</span><br></pre></td></tr></table></figure>\n<p><strong>4.事务消息发送</strong><br>DefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：</span><br><span class=\"line\">A 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。</span><br><span class=\"line\"></span><br><span class=\"line\">TransactionMQProducer 处理流程是：</span><br><span class=\"line\"><span class=\"number\">1</span>.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。</span><br><span class=\"line\"><span class=\"number\">2</span>.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息</span><br><span class=\"line\"><span class=\"number\">3</span>.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。</span><br><span class=\"line\">若二次确认未到达RocketMQ，则发起回查请求</span><br></pre></td></tr></table></figure>\n<p>详细参考代码如下：</p>\n<p><strong>TransactionProducer</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        TransactionListener transactionListener = <span class=\"keyword\">new</span> TransactionListenerImpl();</span><br><span class=\"line\">        TransactionMQProducer producer = <span class=\"keyword\">new</span> TransactionMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">2000</span>), <span class=\"keyword\">new</span> ThreadFactory() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(r);</span><br><span class=\"line\">                thread.setName(<span class=\"string\">\"client-transaction-msg-check-thread\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.setExecutorService(executorService);</span><br><span class=\"line\">        producer.setTransactionListener(transactionListener);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest1234\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.sendMessageInTransaction(msg, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\"></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>TransactionListenerImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.LocalTransactionState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionListenerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger transactionIndex = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, Integer&gt; localTrans = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">executeLocalTransaction</span><span class=\"params\">(Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = transactionIndex.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> status = value % <span class=\"number\">3</span>;</span><br><span class=\"line\">        localTrans.put(msg.getTransactionId(), status);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">checkLocalTransaction</span><span class=\"params\">(MessageExt msg)</span> </span>&#123;</span><br><span class=\"line\">        Integer status = localTrans.get(msg.getTransactionId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、自定义消息发送规则\"><a href=\"#四、自定义消息发送规则\" class=\"headerlink\" title=\"四、自定义消息发送规则\"></a>四、自定义消息发送规则</h3><p><strong>背景：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。</span><br><span class=\"line\">若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector</span><br></pre></td></tr></table></figure>\n<p><strong>解决思路：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送消息的时候，将 MessageQueueSelector 的对象作为参数，</span><br><span class=\"line\">在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。</span><br><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"function\"><span class=\"keyword\">public</span> SendResult <span class=\"title\">send</span><span class=\"params\">(Message msg, MessageQueueSelector selector, Object arg)</span>函数发送消息</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>具体参考代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            MQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> orderId = i % <span class=\"number\">10</span>;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTestjjj\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg, <span class=\"keyword\">new</span> MessageQueueSelector() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> MessageQueue <span class=\"title\">select</span><span class=\"params\">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">                        Integer id = (Integer) arg;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> index = id % mqs.size();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> mqs.get(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, orderId);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            producer.shutdown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException | RemotingException | MQBrokerException | InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、常用Producer类\"><a href=\"#一、常用Producer类\" class=\"headerlink\" title=\"一、常用Producer类\"></a>一、常用Producer类</h3><p>最常用的producer类就是DefaultMQProducer，具体使用看下文</p>\n<h3 id=\"二、DefaultMQProducer的消息发送步骤\"><a href=\"#二、DefaultMQProducer的消息发送步骤\" class=\"headerlink\" title=\"二、DefaultMQProducer的消息发送步骤\"></a>二、DefaultMQProducer的消息发送步骤</h3><ol>\n<li>设置 ProducerGroupName</li>\n<li>设置 lnstanceName</li>\n<li>设置发送失败重试次数</li>\n<li>设置 NameServer 地址</li>\n<li>组装消息并发送</li>\n</ol>\n<p><strong>具体代码参考如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\">        producer.setInstanceName(<span class=\"string\">\"p1\"</span>);</span><br><span class=\"line\">        producer.setRetryTimesWhenSendFailed(<span class=\"number\">3</span>);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"string\">\"192.128.122.123:9876;192.128.122.124:9876;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、消息发送方式\"><a href=\"#三、消息发送方式\" class=\"headerlink\" title=\"三、消息发送方式\"></a>三、消息发送方式</h3><p><strong>1.同步发送</strong><br>DefaultMQProducer同步发送消息可参考如下代码，需要注意的是send方法的返回值：</p>\n<pre><code>SEND_OK\nFLUSH_DISK_TIMEOUT\nFLUSH_SLAVE_TIMEOUT\nSLAVE_NOT_AVAILABLE\n需要结合配置的刷盘策略、主从策略来理解其含义</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"ProducerGroupName\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                    SendResult sendResult = producer.send(msg);</span><br><span class=\"line\">                    System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>2.异步发送</strong><br>DefaultMQProducer异步发送消息可参考如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException, UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        DefaultMQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"Jodie_Daily_test\"</span>);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">        producer.setRetryTimesWhenSendAsyncFailed(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> messageCount = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(messageCount);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; messageCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = i;</span><br><span class=\"line\">                Message msg = <span class=\"keyword\">new</span> Message(<span class=\"string\">\"Jodie_topic_1023\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"TagA\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"OrderID188\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"Hello world\"</span>.getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                producer.send(msg, <span class=\"keyword\">new</span> SendCallback() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(SendResult sendResult)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d OK %s %n\"</span>, index, sendResult.getMsgId());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onException</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"%-10d Exception %s %n\"</span>, index, e);</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await(<span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>3.延迟发送</strong><br>DefaultMQProducer延迟发送使用方法：</p>\n<pre><code>在创建 Message对象时,调用 setDelayTimeLevel ( int level) 方法设置延迟时间,然后send</code></pre><p>注意：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">延迟发送仅支持预设值的时间长度：<span class=\"number\">1</span>s/<span class=\"number\">5</span>s/<span class=\"number\">1</span>Os/<span class=\"number\">30</span>s/Im/<span class=\"number\">2</span>m/<span class=\"number\">3</span>m/<span class=\"number\">4</span>m/<span class=\"number\">5</span>m/<span class=\"number\">6</span>m/ <span class=\"number\">7</span>m/<span class=\"number\">8</span>m/<span class=\"number\">9</span>m/<span class=\"number\">1</span>Om/<span class=\"number\">20</span>m/<span class=\"number\">30</span>m/<span class=\"number\">1</span>h/<span class=\"number\">2</span>h</span><br><span class=\"line\">如setDelayTimeLevel(<span class=\"number\">3</span>)表示延迟 <span class=\"number\">10</span>s</span><br></pre></td></tr></table></figure>\n<p><strong>4.事务消息发送</strong><br>DefaultMQProducer事务消息的发送，结合一个银行转账的场景来说更容易理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">场景：</span><br><span class=\"line\">A 银行的某账户要转一万元到 B 银行 的某账户 。 A 银 行发送“ B 银行账户增加 一万元” 这个消息，要和“从 A 银行账户扣除一万元” 这个操作同时成功或者同时失败 。</span><br><span class=\"line\"></span><br><span class=\"line\">TransactionMQProducer 处理流程是：</span><br><span class=\"line\"><span class=\"number\">1</span>.先发一个“准备从 B 银行账户增加一万元”的消息,发送成功后 ，进行“从 A 银行账户扣除一万元”的操作A。</span><br><span class=\"line\"><span class=\"number\">2</span>.根据操作A结果是否成功，向 RocketMQ发送二次确认( Commit或 是 Rollback) 消息</span><br><span class=\"line\"><span class=\"number\">3</span>.RocketMQ收到 Commit状态则将第一阶段消息标记为可投递，订阅方将能够收到该消息;收到 Rollback 状态则删除第一阶段的消息，订阅方接收不到该消息 。</span><br><span class=\"line\">若二次确认未到达RocketMQ，则发起回查请求</span><br></pre></td></tr></table></figure>\n<p>详细参考代码如下：</p>\n<p><strong>TransactionProducer</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MQClientException, InterruptedException </span>&#123;</span><br><span class=\"line\">        TransactionListener transactionListener = <span class=\"keyword\">new</span> TransactionListenerImpl();</span><br><span class=\"line\">        TransactionMQProducer producer = <span class=\"keyword\">new</span> TransactionMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">        ExecutorService executorService = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">100</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class=\"number\">2000</span>), <span class=\"keyword\">new</span> ThreadFactory() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable r)</span> </span>&#123;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(r);</span><br><span class=\"line\">                thread.setName(<span class=\"string\">\"client-transaction-msg-check-thread\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> thread;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        producer.setExecutorService(executorService);</span><br><span class=\"line\">        producer.setTransactionListener(transactionListener);</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTest1234\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.sendMessageInTransaction(msg, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\"></span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (MQClientException | UnsupportedEncodingException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        producer.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>TransactionListenerImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.transaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.LocalTransactionState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.TransactionListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionListenerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AtomicInteger transactionIndex = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcurrentHashMap&lt;String, Integer&gt; localTrans = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">executeLocalTransaction</span><span class=\"params\">(Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = transactionIndex.getAndIncrement();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> status = value % <span class=\"number\">3</span>;</span><br><span class=\"line\">        localTrans.put(msg.getTransactionId(), status);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LocalTransactionState <span class=\"title\">checkLocalTransaction</span><span class=\"params\">(MessageExt msg)</span> </span>&#123;</span><br><span class=\"line\">        Integer status = localTrans.get(msg.getTransactionId());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != status) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.UNKNOW;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.ROLLBACK_MESSAGE;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LocalTransactionState.COMMIT_MESSAGE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、自定义消息发送规则\"><a href=\"#四、自定义消息发送规则\" class=\"headerlink\" title=\"四、自定义消息发送规则\"></a>四、自定义消息发送规则</h3><p><strong>背景：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个 Topic会有多个 Message Queue，如果使用 Producer的默认配置，roducer 会轮流向各个 Message Queue 发送消息 。</span><br><span class=\"line\">若业务需要我们把消息发送到指定的 Message Queue里，可以使用MessageQueueSelector</span><br></pre></td></tr></table></figure>\n<p><strong>解决思路：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送消息的时候，将 MessageQueueSelector 的对象作为参数，</span><br><span class=\"line\">在 MessageQueueSelector 实现中，根据传入的 Object参 数，或者Message 消息内容确定把消息发往哪个 Message Queue，然后返回被选中的 Message Queue。</span><br><span class=\"line\"></span><br><span class=\"line\">使用<span class=\"function\"><span class=\"keyword\">public</span> SendResult <span class=\"title\">send</span><span class=\"params\">(Message msg, MessageQueueSelector selector, Object arg)</span>函数发送消息</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>具体参考代码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.apache.rocketmq.example.ordermessage;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MQProducer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.common.message.MessageQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            MQProducer producer = <span class=\"keyword\">new</span> DefaultMQProducer(<span class=\"string\">\"please_rename_unique_group_name\"</span>);</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\"></span><br><span class=\"line\">            String[] tags = <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"TagA\"</span>, <span class=\"string\">\"TagB\"</span>, <span class=\"string\">\"TagC\"</span>, <span class=\"string\">\"TagD\"</span>, <span class=\"string\">\"TagE\"</span>&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> orderId = i % <span class=\"number\">10</span>;</span><br><span class=\"line\">                Message msg =</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> Message(<span class=\"string\">\"TopicTestjjj\"</span>, tags[i % tags.length], <span class=\"string\">\"KEY\"</span> + i,</span><br><span class=\"line\">                        (<span class=\"string\">\"Hello RocketMQ \"</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">                SendResult sendResult = producer.send(msg, <span class=\"keyword\">new</span> MessageQueueSelector() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> MessageQueue <span class=\"title\">select</span><span class=\"params\">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</span><br><span class=\"line\">                        Integer id = (Integer) arg;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> index = id % mqs.size();</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> mqs.get(index);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;, orderId);</span><br><span class=\"line\"></span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"%s%n\"</span>, sendResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            producer.shutdown();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException | RemotingException | MQBrokerException | InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring常用配置-Bean的初始化和销毁","date":"2020-01-10T03:22:46.000Z","_content":"#### 一、如何Bean的生命周期进行操作\n> Spring对Bean的生命周期操作提供了支持\n> java配置方式： 使用Bean的initMethod和destoryMethod进行配置\n\n#### 二、BeanWayDemo\n**Bean**\n```java\npackage com.cactus.demo.beanway;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:19\n * Description:\n */\n\n\npublic class BeanWayService {\n    public void init() {\n        System.out.println(\"bean init!\");\n    }\n\n    public void destory() {\n        System.out.println(\"bean destory!\");\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.beanway;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:21\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.beanway\")\npublic class BeanWayConfig {\n    @Bean(initMethod = \"init\", destroyMethod = \"destory\")\n    public BeanWayService getBeanWayService() {\n        return new BeanWayService();\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.beanway;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:23\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(BeanWayConfig.class);\n        BeanWayService beanWayService = context.getBean(BeanWayService.class);\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101516111231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","source":"_posts/Spring常用配置-Bean的初始化和销毁.md","raw":"---\ntitle: Spring常用配置-Bean的初始化和销毁\ndate: 2020-01-10 11:22:46\ntags:\n---\n#### 一、如何Bean的生命周期进行操作\n> Spring对Bean的生命周期操作提供了支持\n> java配置方式： 使用Bean的initMethod和destoryMethod进行配置\n\n#### 二、BeanWayDemo\n**Bean**\n```java\npackage com.cactus.demo.beanway;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:19\n * Description:\n */\n\n\npublic class BeanWayService {\n    public void init() {\n        System.out.println(\"bean init!\");\n    }\n\n    public void destory() {\n        System.out.println(\"bean destory!\");\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.beanway;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:21\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.beanway\")\npublic class BeanWayConfig {\n    @Bean(initMethod = \"init\", destroyMethod = \"destory\")\n    public BeanWayService getBeanWayService() {\n        return new BeanWayService();\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.beanway;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:23\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(BeanWayConfig.class);\n        BeanWayService beanWayService = context.getBean(BeanWayService.class);\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101516111231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","slug":"Spring常用配置-Bean的初始化和销毁","published":1,"updated":"2020-01-10T03:23:01.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2dc000c4sz01au4075r","content":"<h4 id=\"一、如何Bean的生命周期进行操作\"><a href=\"#一、如何Bean的生命周期进行操作\" class=\"headerlink\" title=\"一、如何Bean的生命周期进行操作\"></a>一、如何Bean的生命周期进行操作</h4><blockquote>\n<p>Spring对Bean的生命周期操作提供了支持<br>java配置方式： 使用Bean的initMethod和destoryMethod进行配置</p>\n</blockquote>\n<h4 id=\"二、BeanWayDemo\"><a href=\"#二、BeanWayDemo\" class=\"headerlink\" title=\"二、BeanWayDemo\"></a>二、BeanWayDemo</h4><p><strong>Bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.beanway;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:19</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanWayService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"bean init!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"bean destory!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.beanway;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:21</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.beanway\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanWayConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(initMethod = <span class=\"string\">\"init\"</span>, destroyMethod = <span class=\"string\">\"destory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BeanWayService <span class=\"title\">getBeanWayService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanWayService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.beanway;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:23</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(BeanWayConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanWayService beanWayService = context.getBean(BeanWayService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/2019101516111231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、如何Bean的生命周期进行操作\"><a href=\"#一、如何Bean的生命周期进行操作\" class=\"headerlink\" title=\"一、如何Bean的生命周期进行操作\"></a>一、如何Bean的生命周期进行操作</h4><blockquote>\n<p>Spring对Bean的生命周期操作提供了支持<br>java配置方式： 使用Bean的initMethod和destoryMethod进行配置</p>\n</blockquote>\n<h4 id=\"二、BeanWayDemo\"><a href=\"#二、BeanWayDemo\" class=\"headerlink\" title=\"二、BeanWayDemo\"></a>二、BeanWayDemo</h4><p><strong>Bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.beanway;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:19</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanWayService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"bean init!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destory</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"bean destory!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.beanway;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:21</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.beanway\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanWayConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(initMethod = <span class=\"string\">\"init\"</span>, destroyMethod = <span class=\"string\">\"destory\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BeanWayService <span class=\"title\">getBeanWayService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BeanWayService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.beanway;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:23</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(BeanWayConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        BeanWayService beanWayService = context.getBean(BeanWayService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/2019101516111231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Spring常用配置-Event","date":"2020-01-10T03:24:07.000Z","_content":"#### 一、什么是Event？\n> Spring的Event(事件)为Bean与Bean之间的消息通信提供了支持。\n> 通俗来说，当BeanA处理完事情，我们希望BeanB知道BeanA处理了这件事情并作出相应处理，这个时候我们就要用到Event了\n\n\n#### 二、如何使用Event？\n> 1. 自定义事件，继承ApplicationEvent\n> 2. 定义事件监听器，实现ApplicationListener\n> 3. 使用容器发布事件\n\n\n#### 三、EventDemo\n**事件类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.ApplicationEvent;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:44\n * Description:\n */\n\n\npublic class DemoEvent extends ApplicationEvent {\n\n    private String msg;\n\n    public DemoEvent(Object source, String msg) {\n        super(source);\n        this.msg = msg;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n}\n\n```\n\n**监听器类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:45\n * Description:\n */\n\n@Component\npublic class EventListener implements ApplicationListener<DemoEvent> {\n\n    public void onApplicationEvent(DemoEvent demoEvent) {\n        String msg = demoEvent.getMsg();\n        System.out.println(\"I had recived some msgs from publisher : \" + msg);\n    }\n}\n\n```\n\n**容器发布类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:48\n * Description:\n */\n\n@Component\npublic class DemoPublisher {\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public void publish(String msg) {\n        applicationContext.publishEvent(new DemoEvent(this, msg));\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:51\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.event\")\npublic class EventConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:50\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(EventConfig.class);\n        DemoPublisher publisher = context.getBean(DemoPublisher.class);\n        publisher.publish(\"hi honey~\");\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015161321785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","source":"_posts/Spring常用配置-Event.md","raw":"---\ntitle: Spring常用配置-Event\ndate: 2020-01-10 11:24:07\ntags:\n---\n#### 一、什么是Event？\n> Spring的Event(事件)为Bean与Bean之间的消息通信提供了支持。\n> 通俗来说，当BeanA处理完事情，我们希望BeanB知道BeanA处理了这件事情并作出相应处理，这个时候我们就要用到Event了\n\n\n#### 二、如何使用Event？\n> 1. 自定义事件，继承ApplicationEvent\n> 2. 定义事件监听器，实现ApplicationListener\n> 3. 使用容器发布事件\n\n\n#### 三、EventDemo\n**事件类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.ApplicationEvent;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:44\n * Description:\n */\n\n\npublic class DemoEvent extends ApplicationEvent {\n\n    private String msg;\n\n    public DemoEvent(Object source, String msg) {\n        super(source);\n        this.msg = msg;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n}\n\n```\n\n**监听器类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:45\n * Description:\n */\n\n@Component\npublic class EventListener implements ApplicationListener<DemoEvent> {\n\n    public void onApplicationEvent(DemoEvent demoEvent) {\n        String msg = demoEvent.getMsg();\n        System.out.println(\"I had recived some msgs from publisher : \" + msg);\n    }\n}\n\n```\n\n**容器发布类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Component;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:48\n * Description:\n */\n\n@Component\npublic class DemoPublisher {\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    public void publish(String msg) {\n        applicationContext.publishEvent(new DemoEvent(this, msg));\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:51\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.event\")\npublic class EventConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.event;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:50\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(EventConfig.class);\n        DemoPublisher publisher = context.getBean(DemoPublisher.class);\n        publisher.publish(\"hi honey~\");\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015161321785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","slug":"Spring常用配置-Event","published":1,"updated":"2020-01-10T03:24:31.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2dd000d4sz04q2cfr44","content":"<h4 id=\"一、什么是Event？\"><a href=\"#一、什么是Event？\" class=\"headerlink\" title=\"一、什么是Event？\"></a>一、什么是Event？</h4><blockquote>\n<p>Spring的Event(事件)为Bean与Bean之间的消息通信提供了支持。<br>通俗来说，当BeanA处理完事情，我们希望BeanB知道BeanA处理了这件事情并作出相应处理，这个时候我们就要用到Event了</p>\n</blockquote>\n<h4 id=\"二、如何使用Event？\"><a href=\"#二、如何使用Event？\" class=\"headerlink\" title=\"二、如何使用Event？\"></a>二、如何使用Event？</h4><blockquote>\n<ol>\n<li>自定义事件，继承ApplicationEvent</li>\n<li>定义事件监听器，实现ApplicationListener</li>\n<li>使用容器发布事件</li>\n</ol>\n</blockquote>\n<h4 id=\"三、EventDemo\"><a href=\"#三、EventDemo\" class=\"headerlink\" title=\"三、EventDemo\"></a>三、EventDemo</h4><p><strong>事件类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:44</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationEvent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoEvent</span><span class=\"params\">(Object source, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(source);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>监听器类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:45</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">DemoEvent</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(DemoEvent demoEvent)</span> </span>&#123;</span><br><span class=\"line\">        String msg = demoEvent.getMsg();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I had recived some msgs from publisher : \"</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>容器发布类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:48</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoPublisher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        applicationContext.publishEvent(<span class=\"keyword\">new</span> DemoEvent(<span class=\"keyword\">this</span>, msg));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:51</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.event\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:50</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(EventConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        DemoPublisher publisher = context.getBean(DemoPublisher<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        publisher.publish(<span class=\"string\">\"hi honey~\"</span>);</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015161321785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、什么是Event？\"><a href=\"#一、什么是Event？\" class=\"headerlink\" title=\"一、什么是Event？\"></a>一、什么是Event？</h4><blockquote>\n<p>Spring的Event(事件)为Bean与Bean之间的消息通信提供了支持。<br>通俗来说，当BeanA处理完事情，我们希望BeanB知道BeanA处理了这件事情并作出相应处理，这个时候我们就要用到Event了</p>\n</blockquote>\n<h4 id=\"二、如何使用Event？\"><a href=\"#二、如何使用Event？\" class=\"headerlink\" title=\"二、如何使用Event？\"></a>二、如何使用Event？</h4><blockquote>\n<ol>\n<li>自定义事件，继承ApplicationEvent</li>\n<li>定义事件监听器，实现ApplicationListener</li>\n<li>使用容器发布事件</li>\n</ol>\n</blockquote>\n<h4 id=\"三、EventDemo\"><a href=\"#三、EventDemo\" class=\"headerlink\" title=\"三、EventDemo\"></a>三、EventDemo</h4><p><strong>事件类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:44</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoEvent</span> <span class=\"keyword\">extends</span> <span class=\"title\">ApplicationEvent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoEvent</span><span class=\"params\">(Object source, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(source);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>监听器类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:45</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">DemoEvent</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(DemoEvent demoEvent)</span> </span>&#123;</span><br><span class=\"line\">        String msg = demoEvent.getMsg();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I had recived some msgs from publisher : \"</span> + msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>容器发布类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:48</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoPublisher</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        applicationContext.publishEvent(<span class=\"keyword\">new</span> DemoEvent(<span class=\"keyword\">this</span>, msg));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:51</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.event\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.event;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:50</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(EventConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        DemoPublisher publisher = context.getBean(DemoPublisher<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        publisher.publish(<span class=\"string\">\"hi honey~\"</span>);</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015161321785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Spring常用配置-Profile","date":"2020-01-10T03:23:26.000Z","_content":"#### 一、Profile是什么？\n> 在企业开发中，项目开发环境和产品环境的配置是不同的（如数据库的配置）。 \n> Profile为不同环境下使用不同的配置提供了支持\n\n#### 二、如何使用profile\n> 1. 通过设定Environment的ActiceProfile来设定当前context（容器）需要使用的配置环境\n>    开发中通常使用@Profile注解，达到不同情况实例化不同Bean的目的\n\n#### 三、ProfileDemo\n**demobean**\n```java\npackage com.cactus.demo.profile;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:31\n * Description:\n */\n\n\npublic class DemoBean {\n    private String content;\n\n    public DemoBean() {\n    }\n\n    public DemoBean(String content) {\n        this.content = content;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.profile;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:32\n * Description:\n */\n\n@Configuration\npublic class ProfileConfig {\n    @Bean\n    @Profile(\"dev\")\n    public DemoBean getDemoBeanDev() {\n        return new DemoBean(\"this is dev env\");\n    }\n\n    @Bean\n    @Profile(\"prod\")\n    public DemoBean getDemoBeanProd() {\n        return new DemoBean(\"this is prod env\");\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.profile;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:34\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.getEnvironment().setActiveProfiles(\"prod\");\n        // 需要后置注册配置类，否则会报error\n        context.register(ProfileConfig.class);\n        context.refresh();\n        DemoBean bean = context.getBean(DemoBean.class);\n        System.out.println(bean.getContent());\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015161215275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","source":"_posts/Spring常用配置-Profile.md","raw":"---\ntitle: Spring常用配置-Profile\ndate: 2020-01-10 11:23:26\ntags:\n---\n#### 一、Profile是什么？\n> 在企业开发中，项目开发环境和产品环境的配置是不同的（如数据库的配置）。 \n> Profile为不同环境下使用不同的配置提供了支持\n\n#### 二、如何使用profile\n> 1. 通过设定Environment的ActiceProfile来设定当前context（容器）需要使用的配置环境\n>    开发中通常使用@Profile注解，达到不同情况实例化不同Bean的目的\n\n#### 三、ProfileDemo\n**demobean**\n```java\npackage com.cactus.demo.profile;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:31\n * Description:\n */\n\n\npublic class DemoBean {\n    private String content;\n\n    public DemoBean() {\n    }\n\n    public DemoBean(String content) {\n        this.content = content;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.profile;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:32\n * Description:\n */\n\n@Configuration\npublic class ProfileConfig {\n    @Bean\n    @Profile(\"dev\")\n    public DemoBean getDemoBeanDev() {\n        return new DemoBean(\"this is dev env\");\n    }\n\n    @Bean\n    @Profile(\"prod\")\n    public DemoBean getDemoBeanProd() {\n        return new DemoBean(\"this is prod env\");\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.profile;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-10-15 14:34\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n        context.getEnvironment().setActiveProfiles(\"prod\");\n        // 需要后置注册配置类，否则会报error\n        context.register(ProfileConfig.class);\n        context.refresh();\n        DemoBean bean = context.getBean(DemoBean.class);\n        System.out.println(bean.getContent());\n        context.close();\n    }\n}\n\n```\n\n**result**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191015161215275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n","slug":"Spring常用配置-Profile","published":1,"updated":"2020-01-10T03:23:45.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2de000e4sz0anujcize","content":"<h4 id=\"一、Profile是什么？\"><a href=\"#一、Profile是什么？\" class=\"headerlink\" title=\"一、Profile是什么？\"></a>一、Profile是什么？</h4><blockquote>\n<p>在企业开发中，项目开发环境和产品环境的配置是不同的（如数据库的配置）。<br>Profile为不同环境下使用不同的配置提供了支持</p>\n</blockquote>\n<h4 id=\"二、如何使用profile\"><a href=\"#二、如何使用profile\" class=\"headerlink\" title=\"二、如何使用profile\"></a>二、如何使用profile</h4><blockquote>\n<ol>\n<li>通过设定Environment的ActiceProfile来设定当前context（容器）需要使用的配置环境<br>开发中通常使用@Profile注解，达到不同情况实例化不同Bean的目的</li>\n</ol>\n</blockquote>\n<h4 id=\"三、ProfileDemo\"><a href=\"#三、ProfileDemo\" class=\"headerlink\" title=\"三、ProfileDemo\"></a>三、ProfileDemo</h4><p><strong>demobean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoBean</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:32</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DemoBean <span class=\"title\">getDemoBeanDev</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoBean(<span class=\"string\">\"this is dev env\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"prod\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DemoBean <span class=\"title\">getDemoBeanProd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoBean(<span class=\"string\">\"this is prod env\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:34</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">        context.getEnvironment().setActiveProfiles(<span class=\"string\">\"prod\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 需要后置注册配置类，否则会报error</span></span><br><span class=\"line\">        context.register(ProfileConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        context.refresh();</span><br><span class=\"line\">        DemoBean bean = context.getBean(DemoBean<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(bean.getContent());</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015161215275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Profile是什么？\"><a href=\"#一、Profile是什么？\" class=\"headerlink\" title=\"一、Profile是什么？\"></a>一、Profile是什么？</h4><blockquote>\n<p>在企业开发中，项目开发环境和产品环境的配置是不同的（如数据库的配置）。<br>Profile为不同环境下使用不同的配置提供了支持</p>\n</blockquote>\n<h4 id=\"二、如何使用profile\"><a href=\"#二、如何使用profile\" class=\"headerlink\" title=\"二、如何使用profile\"></a>二、如何使用profile</h4><blockquote>\n<ol>\n<li>通过设定Environment的ActiceProfile来设定当前context（容器）需要使用的配置环境<br>开发中通常使用@Profile注解，达到不同情况实例化不同Bean的目的</li>\n</ol>\n</blockquote>\n<h4 id=\"三、ProfileDemo\"><a href=\"#三、ProfileDemo\" class=\"headerlink\" title=\"三、ProfileDemo\"></a>三、ProfileDemo</h4><p><strong>demobean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:31</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoBean</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:32</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DemoBean <span class=\"title\">getDemoBeanDev</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoBean(<span class=\"string\">\"this is dev env\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"prod\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DemoBean <span class=\"title\">getDemoBeanProd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoBean(<span class=\"string\">\"this is prod env\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-10-15 14:34</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">        context.getEnvironment().setActiveProfiles(<span class=\"string\">\"prod\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 需要后置注册配置类，否则会报error</span></span><br><span class=\"line\">        context.register(ProfileConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        context.refresh();</span><br><span class=\"line\">        DemoBean bean = context.getBean(DemoBean<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        System.out.println(bean.getContent());</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>result</strong><br><img src=\"https://img-blog.csdnimg.cn/20191015161215275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Spring高级话题-Aware","date":"2020-01-10T03:24:58.000Z","_content":"#### 一、Aware是什么？\n> Spring Aware就是一些定义了Spring容器本身功能资源的接口\n\n##### Spring提供的Aware接口\n|接口|备注|\n| --- | --- |\n|BeanNameAware| 获得到容器中Bean的名称 |\n|BeanFactoryAware|获得当前 bean factory,这样可以调用容器的服务|\n|ApplicationContextaware*|当前的 application context,这样可以调用容器的服务|\n|MessageSourceAware|获得 message source,这样可以获得文本信息|\n|ApplicationEventPublisherAware|应用事件发布器,可以发布事件|\n|ResourceLoaderAware|获得资源加载器,可以获得外部资源文件|\n\n#### 二、什么时候用Aware\n\n> 当某一个Bean需要获得Spring容器的服务时，可以实现对应的Aware接口。\n> 注意: 这样会造成Bean与Spring框架的耦合性增加\n\n#### 三、AwareDemo\n\n**bean**\n\n```java\npackage com.cactus.demo.aware;\n\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 14:35\n * Description:\n */\n\n@Service\npublic class AwareDemo implements BeanNameAware, ResourceLoaderAware {\n    private String beanName;\n    private ResourceLoader resourceLoader;\n    public void setBeanName(String s) {\n        this.beanName = s;\n    }\n\n    public void setResourceLoader(ResourceLoader resourceLoader) {\n        this.resourceLoader = resourceLoader;\n    }\n\n    public void show() {\n        System.out.println(\"beanName : \" + beanName);\n        Resource resource = resourceLoader.getResource(\"classpath:awaredemo/awaredemo.txt\");\n        String desc = resource.getDescription();\n        System.out.println(\"resource desc : \" + desc);\n        try {\n            String streamStr = IOUtils.toString(resource.getInputStream(), \"utf-8\");\n            System.out.println(\"resource streamStr : \" + streamStr);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.aware;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 14:43\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.aware\")\npublic class AwareConfig {\n}\n\n```\n\n**awaredemo.txt**\n```txt\nthis is a awaredemo!\n```\n\n**Main**\n```java\npackage com.cactus.demo.aware;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 14:45\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AwareConfig.class);\n        AwareDemo awareDemo = context.getBean(AwareDemo.class);\n        awareDemo.show();\n        context.close();\n    }\n}\n```\n\n**Result**\n```\nbeanName : awareDemo\nresource desc : class path resource [awaredemo/awaredemo.txt]\nresource streamStr : this is a awaredemo!\n```\n","source":"_posts/Spring高级话题-Aware.md","raw":"---\ntitle: Spring高级话题-Aware\ndate: 2020-01-10 11:24:58\ntags:\n---\n#### 一、Aware是什么？\n> Spring Aware就是一些定义了Spring容器本身功能资源的接口\n\n##### Spring提供的Aware接口\n|接口|备注|\n| --- | --- |\n|BeanNameAware| 获得到容器中Bean的名称 |\n|BeanFactoryAware|获得当前 bean factory,这样可以调用容器的服务|\n|ApplicationContextaware*|当前的 application context,这样可以调用容器的服务|\n|MessageSourceAware|获得 message source,这样可以获得文本信息|\n|ApplicationEventPublisherAware|应用事件发布器,可以发布事件|\n|ResourceLoaderAware|获得资源加载器,可以获得外部资源文件|\n\n#### 二、什么时候用Aware\n\n> 当某一个Bean需要获得Spring容器的服务时，可以实现对应的Aware接口。\n> 注意: 这样会造成Bean与Spring框架的耦合性增加\n\n#### 三、AwareDemo\n\n**bean**\n\n```java\npackage com.cactus.demo.aware;\n\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 14:35\n * Description:\n */\n\n@Service\npublic class AwareDemo implements BeanNameAware, ResourceLoaderAware {\n    private String beanName;\n    private ResourceLoader resourceLoader;\n    public void setBeanName(String s) {\n        this.beanName = s;\n    }\n\n    public void setResourceLoader(ResourceLoader resourceLoader) {\n        this.resourceLoader = resourceLoader;\n    }\n\n    public void show() {\n        System.out.println(\"beanName : \" + beanName);\n        Resource resource = resourceLoader.getResource(\"classpath:awaredemo/awaredemo.txt\");\n        String desc = resource.getDescription();\n        System.out.println(\"resource desc : \" + desc);\n        try {\n            String streamStr = IOUtils.toString(resource.getInputStream(), \"utf-8\");\n            System.out.println(\"resource streamStr : \" + streamStr);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.aware;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 14:43\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.aware\")\npublic class AwareConfig {\n}\n\n```\n\n**awaredemo.txt**\n```txt\nthis is a awaredemo!\n```\n\n**Main**\n```java\npackage com.cactus.demo.aware;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 14:45\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AwareConfig.class);\n        AwareDemo awareDemo = context.getBean(AwareDemo.class);\n        awareDemo.show();\n        context.close();\n    }\n}\n```\n\n**Result**\n```\nbeanName : awareDemo\nresource desc : class path resource [awaredemo/awaredemo.txt]\nresource streamStr : this is a awaredemo!\n```\n","slug":"Spring高级话题-Aware","published":1,"updated":"2020-01-10T03:25:12.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2de000f4sz06s9e3l76","content":"<h4 id=\"一、Aware是什么？\"><a href=\"#一、Aware是什么？\" class=\"headerlink\" title=\"一、Aware是什么？\"></a>一、Aware是什么？</h4><blockquote>\n<p>Spring Aware就是一些定义了Spring容器本身功能资源的接口</p>\n</blockquote>\n<h5 id=\"Spring提供的Aware接口\"><a href=\"#Spring提供的Aware接口\" class=\"headerlink\" title=\"Spring提供的Aware接口\"></a>Spring提供的Aware接口</h5><table>\n<thead>\n<tr>\n<th>接口</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BeanNameAware</td>\n<td>获得到容器中Bean的名称</td>\n</tr>\n<tr>\n<td>BeanFactoryAware</td>\n<td>获得当前 bean factory,这样可以调用容器的服务</td>\n</tr>\n<tr>\n<td>ApplicationContextaware*</td>\n<td>当前的 application context,这样可以调用容器的服务</td>\n</tr>\n<tr>\n<td>MessageSourceAware</td>\n<td>获得 message source,这样可以获得文本信息</td>\n</tr>\n<tr>\n<td>ApplicationEventPublisherAware</td>\n<td>应用事件发布器,可以发布事件</td>\n</tr>\n<tr>\n<td>ResourceLoaderAware</td>\n<td>获得资源加载器,可以获得外部资源文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"二、什么时候用Aware\"><a href=\"#二、什么时候用Aware\" class=\"headerlink\" title=\"二、什么时候用Aware\"></a>二、什么时候用Aware</h4><blockquote>\n<p>当某一个Bean需要获得Spring容器的服务时，可以实现对应的Aware接口。<br>注意: 这样会造成Bean与Spring框架的耦合性增加</p>\n</blockquote>\n<h4 id=\"三、AwareDemo\"><a href=\"#三、AwareDemo\" class=\"headerlink\" title=\"三、AwareDemo\"></a>三、AwareDemo</h4><p><strong>bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.aware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 14:35</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwareDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanNameAware</span>, <span class=\"title\">ResourceLoaderAware</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String beanName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResourceLoader resourceLoader;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanName</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanName = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResourceLoader</span><span class=\"params\">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"beanName : \"</span> + beanName);</span><br><span class=\"line\">        Resource resource = resourceLoader.getResource(<span class=\"string\">\"classpath:awaredemo/awaredemo.txt\"</span>);</span><br><span class=\"line\">        String desc = resource.getDescription();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"resource desc : \"</span> + desc);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String streamStr = IOUtils.toString(resource.getInputStream(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"resource streamStr : \"</span> + streamStr);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.aware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 14:43</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.aware\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwareConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>awaredemo.txt</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a awaredemo!</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.aware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 14:45</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(AwareConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        AwareDemo awareDemo = context.getBean(AwareDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        awareDemo.show();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanName : awareDemo</span><br><span class=\"line\">resource desc : class path resource [awaredemo&#x2F;awaredemo.txt]</span><br><span class=\"line\">resource streamStr : this is a awaredemo!</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Aware是什么？\"><a href=\"#一、Aware是什么？\" class=\"headerlink\" title=\"一、Aware是什么？\"></a>一、Aware是什么？</h4><blockquote>\n<p>Spring Aware就是一些定义了Spring容器本身功能资源的接口</p>\n</blockquote>\n<h5 id=\"Spring提供的Aware接口\"><a href=\"#Spring提供的Aware接口\" class=\"headerlink\" title=\"Spring提供的Aware接口\"></a>Spring提供的Aware接口</h5><table>\n<thead>\n<tr>\n<th>接口</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BeanNameAware</td>\n<td>获得到容器中Bean的名称</td>\n</tr>\n<tr>\n<td>BeanFactoryAware</td>\n<td>获得当前 bean factory,这样可以调用容器的服务</td>\n</tr>\n<tr>\n<td>ApplicationContextaware*</td>\n<td>当前的 application context,这样可以调用容器的服务</td>\n</tr>\n<tr>\n<td>MessageSourceAware</td>\n<td>获得 message source,这样可以获得文本信息</td>\n</tr>\n<tr>\n<td>ApplicationEventPublisherAware</td>\n<td>应用事件发布器,可以发布事件</td>\n</tr>\n<tr>\n<td>ResourceLoaderAware</td>\n<td>获得资源加载器,可以获得外部资源文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"二、什么时候用Aware\"><a href=\"#二、什么时候用Aware\" class=\"headerlink\" title=\"二、什么时候用Aware\"></a>二、什么时候用Aware</h4><blockquote>\n<p>当某一个Bean需要获得Spring容器的服务时，可以实现对应的Aware接口。<br>注意: 这样会造成Bean与Spring框架的耦合性增加</p>\n</blockquote>\n<h4 id=\"三、AwareDemo\"><a href=\"#三、AwareDemo\" class=\"headerlink\" title=\"三、AwareDemo\"></a>三、AwareDemo</h4><p><strong>bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.aware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 14:35</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwareDemo</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanNameAware</span>, <span class=\"title\">ResourceLoaderAware</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String beanName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResourceLoader resourceLoader;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanName</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanName = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setResourceLoader</span><span class=\"params\">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"beanName : \"</span> + beanName);</span><br><span class=\"line\">        Resource resource = resourceLoader.getResource(<span class=\"string\">\"classpath:awaredemo/awaredemo.txt\"</span>);</span><br><span class=\"line\">        String desc = resource.getDescription();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"resource desc : \"</span> + desc);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String streamStr = IOUtils.toString(resource.getInputStream(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"resource streamStr : \"</span> + streamStr);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.aware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 14:43</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.aware\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AwareConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>awaredemo.txt</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this is a awaredemo!</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.aware;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 14:45</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(AwareConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        AwareDemo awareDemo = context.getBean(AwareDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        awareDemo.show();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanName : awareDemo</span><br><span class=\"line\">resource desc : class path resource [awaredemo&#x2F;awaredemo.txt]</span><br><span class=\"line\">resource streamStr : this is a awaredemo!</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring项目快速搭建","date":"2020-01-10T03:16:16.000Z","_content":"#### 一、Maven\n\n##### Maven简介\n>Apache Maven是一个软件项目管理工具。基于项目对象模型的概念，maven可用来管理项目的依赖、编译、文档等信息。\n>使用Maven管理项目时，项目依赖的jar包将不再包含在项目内，而是集中在用户目录下的.m2文件夹下\n\n\n##### Maven安装\n\n详情见https://maven.apache.org/download.cgi\n\n##### pom.xml\nMaven项目都有一个pom.xml用来管理项目的依赖以及项目的编译等功能\n\n**pom文件的一些重要元素**\n\n| 元素 | 作用 |\n| --- | --- |\n| dependencies | <dependencies></dependencies>,此元素包含多个项目依赖需要使用的<dependency> |\n| dependency | <dependency></dependency>通过groupId,artifactId,version来确定唯一的依赖。（groupId: 组织的唯一标识，artifactId:项目的唯一标识,version:版本号）|\n| 变量定义 | <properties></properties>可定义变量并在dependency中引用 |\n| 编译插件 | <build></build> |\n\n##### Maven运作方式\n\nMaven会根据dependency中的依赖配置，直接通过互联网在Maven中心库下载相关依赖包到.m2文件夹下。\n\n#### 二、Spring项目搭建\n\n##### 推荐方式\nhttps://start.spring.io/\n\n##### 手动方式\n基于IntelliJ Idea搭建\n1. File -> New -> Project -> Maven -> next\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161911635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n2. 填写groupId,artifactId,version\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161930711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n3. 选择项目路径\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101116194367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n4. 在pom文件中添加自己需要的依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161959160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n5. 开始自己的showtime\n\n","source":"_posts/Spring项目快速搭建.md","raw":"---\ntitle: Spring项目快速搭建\ndate: 2020-01-10 11:16:16\ntags:\n---\n#### 一、Maven\n\n##### Maven简介\n>Apache Maven是一个软件项目管理工具。基于项目对象模型的概念，maven可用来管理项目的依赖、编译、文档等信息。\n>使用Maven管理项目时，项目依赖的jar包将不再包含在项目内，而是集中在用户目录下的.m2文件夹下\n\n\n##### Maven安装\n\n详情见https://maven.apache.org/download.cgi\n\n##### pom.xml\nMaven项目都有一个pom.xml用来管理项目的依赖以及项目的编译等功能\n\n**pom文件的一些重要元素**\n\n| 元素 | 作用 |\n| --- | --- |\n| dependencies | <dependencies></dependencies>,此元素包含多个项目依赖需要使用的<dependency> |\n| dependency | <dependency></dependency>通过groupId,artifactId,version来确定唯一的依赖。（groupId: 组织的唯一标识，artifactId:项目的唯一标识,version:版本号）|\n| 变量定义 | <properties></properties>可定义变量并在dependency中引用 |\n| 编译插件 | <build></build> |\n\n##### Maven运作方式\n\nMaven会根据dependency中的依赖配置，直接通过互联网在Maven中心库下载相关依赖包到.m2文件夹下。\n\n#### 二、Spring项目搭建\n\n##### 推荐方式\nhttps://start.spring.io/\n\n##### 手动方式\n基于IntelliJ Idea搭建\n1. File -> New -> Project -> Maven -> next\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161911635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n2. 填写groupId,artifactId,version\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161930711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n3. 选择项目路径\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019101116194367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n4. 在pom文件中添加自己需要的依赖\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191011161959160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70)\n5. 开始自己的showtime\n\n","slug":"Spring项目快速搭建","published":1,"updated":"2020-01-10T03:18:55.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2df000g4sz0h0vsd535","content":"<h4 id=\"一、Maven\"><a href=\"#一、Maven\" class=\"headerlink\" title=\"一、Maven\"></a>一、Maven</h4><h5 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h5><blockquote>\n<p>Apache Maven是一个软件项目管理工具。基于项目对象模型的概念，maven可用来管理项目的依赖、编译、文档等信息。<br>使用Maven管理项目时，项目依赖的jar包将不再包含在项目内，而是集中在用户目录下的.m2文件夹下</p>\n</blockquote>\n<h5 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h5><p>详情见<a href=\"https://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/download.cgi</a></p>\n<h5 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h5><p>Maven项目都有一个pom.xml用来管理项目的依赖以及项目的编译等功能</p>\n<p><strong>pom文件的一些重要元素</strong></p>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dependencies</td>\n<td><dependencies></dependencies>,此元素包含多个项目依赖需要使用的<dependency></td>\n</tr>\n<tr>\n<td>dependency</td>\n<td><dependency></dependency>通过groupId,artifactId,version来确定唯一的依赖。（groupId: 组织的唯一标识，artifactId:项目的唯一标识,version:版本号）</td>\n</tr>\n<tr>\n<td>变量定义</td>\n<td><properties></properties>可定义变量并在dependency中引用</td>\n</tr>\n<tr>\n<td>编译插件</td>\n<td><build></build></td>\n</tr>\n</tbody></table>\n<h5 id=\"Maven运作方式\"><a href=\"#Maven运作方式\" class=\"headerlink\" title=\"Maven运作方式\"></a>Maven运作方式</h5><p>Maven会根据dependency中的依赖配置，直接通过互联网在Maven中心库下载相关依赖包到.m2文件夹下。</p>\n<h4 id=\"二、Spring项目搭建\"><a href=\"#二、Spring项目搭建\" class=\"headerlink\" title=\"二、Spring项目搭建\"></a>二、Spring项目搭建</h4><h5 id=\"推荐方式\"><a href=\"#推荐方式\" class=\"headerlink\" title=\"推荐方式\"></a>推荐方式</h5><p><a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener\">https://start.spring.io/</a></p>\n<h5 id=\"手动方式\"><a href=\"#手动方式\" class=\"headerlink\" title=\"手动方式\"></a>手动方式</h5><p>基于IntelliJ Idea搭建</p>\n<ol>\n<li>File -&gt; New -&gt; Project -&gt; Maven -&gt; next<br><img src=\"https://img-blog.csdnimg.cn/20191011161911635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>填写groupId,artifactId,version<br><img src=\"https://img-blog.csdnimg.cn/20191011161930711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>选择项目路径<br><img src=\"https://img-blog.csdnimg.cn/2019101116194367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>在pom文件中添加自己需要的依赖<br><img src=\"https://img-blog.csdnimg.cn/20191011161959160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>开始自己的showtime</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Maven\"><a href=\"#一、Maven\" class=\"headerlink\" title=\"一、Maven\"></a>一、Maven</h4><h5 id=\"Maven简介\"><a href=\"#Maven简介\" class=\"headerlink\" title=\"Maven简介\"></a>Maven简介</h5><blockquote>\n<p>Apache Maven是一个软件项目管理工具。基于项目对象模型的概念，maven可用来管理项目的依赖、编译、文档等信息。<br>使用Maven管理项目时，项目依赖的jar包将不再包含在项目内，而是集中在用户目录下的.m2文件夹下</p>\n</blockquote>\n<h5 id=\"Maven安装\"><a href=\"#Maven安装\" class=\"headerlink\" title=\"Maven安装\"></a>Maven安装</h5><p>详情见<a href=\"https://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">https://maven.apache.org/download.cgi</a></p>\n<h5 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h5><p>Maven项目都有一个pom.xml用来管理项目的依赖以及项目的编译等功能</p>\n<p><strong>pom文件的一些重要元素</strong></p>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dependencies</td>\n<td><dependencies></dependencies>,此元素包含多个项目依赖需要使用的<dependency></td>\n</tr>\n<tr>\n<td>dependency</td>\n<td><dependency></dependency>通过groupId,artifactId,version来确定唯一的依赖。（groupId: 组织的唯一标识，artifactId:项目的唯一标识,version:版本号）</td>\n</tr>\n<tr>\n<td>变量定义</td>\n<td><properties></properties>可定义变量并在dependency中引用</td>\n</tr>\n<tr>\n<td>编译插件</td>\n<td><build></build></td>\n</tr>\n</tbody></table>\n<h5 id=\"Maven运作方式\"><a href=\"#Maven运作方式\" class=\"headerlink\" title=\"Maven运作方式\"></a>Maven运作方式</h5><p>Maven会根据dependency中的依赖配置，直接通过互联网在Maven中心库下载相关依赖包到.m2文件夹下。</p>\n<h4 id=\"二、Spring项目搭建\"><a href=\"#二、Spring项目搭建\" class=\"headerlink\" title=\"二、Spring项目搭建\"></a>二、Spring项目搭建</h4><h5 id=\"推荐方式\"><a href=\"#推荐方式\" class=\"headerlink\" title=\"推荐方式\"></a>推荐方式</h5><p><a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener\">https://start.spring.io/</a></p>\n<h5 id=\"手动方式\"><a href=\"#手动方式\" class=\"headerlink\" title=\"手动方式\"></a>手动方式</h5><p>基于IntelliJ Idea搭建</p>\n<ol>\n<li>File -&gt; New -&gt; Project -&gt; Maven -&gt; next<br><img src=\"https://img-blog.csdnimg.cn/20191011161911635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>填写groupId,artifactId,version<br><img src=\"https://img-blog.csdnimg.cn/20191011161930711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>选择项目路径<br><img src=\"https://img-blog.csdnimg.cn/2019101116194367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>在pom文件中添加自己需要的依赖<br><img src=\"https://img-blog.csdnimg.cn/20191011161959160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NhY3R1c19Mcmc=,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n<li>开始自己的showtime</li>\n</ol>\n"},{"title":"Spring高级话题-元注解与组合注解","date":"2020-01-10T03:27:54.000Z","_content":"#### 一、什么是元注解、组合注解\n> 元注解：可以注解到别的注解上的注解\n> 组合注解： 被注解的注解\n\n\n#### 二、annotationCombineDemo\n\n**组合注解**\n```java\npackage com.cactus.demo.annotation_combine;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:16\n * Description:\n * 组合@Configuration与@ComponentScan\n * 一篇比较好的属性覆盖讲解文章（https://www.cnblogs.com/goodAndyxublog/p/11181200.html）\n */\n// 注解使用范围，TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明\n@Target(ElementType.TYPE)\n// 注解生命周期，RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在\n@Retention(RetentionPolicy.RUNTIME)\n// documented by javadoc\n@Documented\n@Configuration\n@ComponentScan\npublic @interface BriefConfiguration {\n    // 同名属性隐式覆盖\n    String[] value() default {};\n}\n\n```\n\n**方法bean**\n```java\npackage com.cactus.demo.annotation_combine;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:24\n * Description:\n */\n\n@Service\npublic class ACDemo {\n    public void show() {\n        System.out.println(\"I am created by @BriefConfiguration\");\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.annotation_combine;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:25\n * Description:\n */\n\n@BriefConfiguration(\"com.cactus.demo.annotation_combine\")\npublic class ACConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.annotation_combine;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:26\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ACConfig.class);\n        ACDemo acDemo = context.getBean(ACDemo.class);\n        acDemo.show();\n        context.close();\n    }\n}\n\n```\n\n**Result**\n```text\nI am created by @BriefConfiguration\n```\n","source":"_posts/Spring高级话题-元注解与组合注解.md","raw":"---\ntitle: Spring高级话题-元注解与组合注解\ndate: 2020-01-10 11:27:54\ntags:\n---\n#### 一、什么是元注解、组合注解\n> 元注解：可以注解到别的注解上的注解\n> 组合注解： 被注解的注解\n\n\n#### 二、annotationCombineDemo\n\n**组合注解**\n```java\npackage com.cactus.demo.annotation_combine;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:16\n * Description:\n * 组合@Configuration与@ComponentScan\n * 一篇比较好的属性覆盖讲解文章（https://www.cnblogs.com/goodAndyxublog/p/11181200.html）\n */\n// 注解使用范围，TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明\n@Target(ElementType.TYPE)\n// 注解生命周期，RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在\n@Retention(RetentionPolicy.RUNTIME)\n// documented by javadoc\n@Documented\n@Configuration\n@ComponentScan\npublic @interface BriefConfiguration {\n    // 同名属性隐式覆盖\n    String[] value() default {};\n}\n\n```\n\n**方法bean**\n```java\npackage com.cactus.demo.annotation_combine;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:24\n * Description:\n */\n\n@Service\npublic class ACDemo {\n    public void show() {\n        System.out.println(\"I am created by @BriefConfiguration\");\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.annotation_combine;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:25\n * Description:\n */\n\n@BriefConfiguration(\"com.cactus.demo.annotation_combine\")\npublic class ACConfig {\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.annotation_combine;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 11:26\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ACConfig.class);\n        ACDemo acDemo = context.getBean(ACDemo.class);\n        acDemo.show();\n        context.close();\n    }\n}\n\n```\n\n**Result**\n```text\nI am created by @BriefConfiguration\n```\n","slug":"Spring高级话题-元注解与组合注解","published":1,"updated":"2020-01-10T03:28:08.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2dg000h4sz00w1ib6ar","content":"<h4 id=\"一、什么是元注解、组合注解\"><a href=\"#一、什么是元注解、组合注解\" class=\"headerlink\" title=\"一、什么是元注解、组合注解\"></a>一、什么是元注解、组合注解</h4><blockquote>\n<p>元注解：可以注解到别的注解上的注解<br>组合注解： 被注解的注解</p>\n</blockquote>\n<h4 id=\"二、annotationCombineDemo\"><a href=\"#二、annotationCombineDemo\" class=\"headerlink\" title=\"二、annotationCombineDemo\"></a>二、annotationCombineDemo</h4><p><strong>组合注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合<span class=\"doctag\">@Configuration</span>与<span class=\"doctag\">@ComponentScan</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 一篇比较好的属性覆盖讲解文章（https://www.cnblogs.com/goodAndyxublog/p/11181200.html）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 注解使用范围，TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"comment\">// 注解生命周期，RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"comment\">// documented by javadoc</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> BriefConfiguration &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 同名属性隐式覆盖</span></span><br><span class=\"line\">    String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:24</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am created by @BriefConfiguration\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:25</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@BriefConfiguration</span>(<span class=\"string\">\"com.cactus.demo.annotation_combine\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:26</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ACConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ACDemo acDemo = context.getBean(ACDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        acDemo.show();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am created by @BriefConfiguration</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、什么是元注解、组合注解\"><a href=\"#一、什么是元注解、组合注解\" class=\"headerlink\" title=\"一、什么是元注解、组合注解\"></a>一、什么是元注解、组合注解</h4><blockquote>\n<p>元注解：可以注解到别的注解上的注解<br>组合注解： 被注解的注解</p>\n</blockquote>\n<h4 id=\"二、annotationCombineDemo\"><a href=\"#二、annotationCombineDemo\" class=\"headerlink\" title=\"二、annotationCombineDemo\"></a>二、annotationCombineDemo</h4><p><strong>组合注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Documented;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合<span class=\"doctag\">@Configuration</span>与<span class=\"doctag\">@ComponentScan</span></span></span><br><span class=\"line\"><span class=\"comment\"> * 一篇比较好的属性覆盖讲解文章（https://www.cnblogs.com/goodAndyxublog/p/11181200.html）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 注解使用范围，TYPE ： 类型上面  用于描述类、接口(包括注解类型) 或enum声明</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"comment\">// 注解生命周期，RUNTIME ：表示 一个注解可以在源码、字节码、及运行时期该注解都会存在</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"comment\">// documented by javadoc</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> BriefConfiguration &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 同名属性隐式覆盖</span></span><br><span class=\"line\">    String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:24</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am created by @BriefConfiguration\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:25</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@BriefConfiguration</span>(<span class=\"string\">\"com.cactus.demo.annotation_combine\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ACConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.annotation_combine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 11:26</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ACConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ACDemo acDemo = context.getBean(ACDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        acDemo.show();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am created by @BriefConfiguration</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring高级话题-@Enable*注解的工作原理","date":"2020-01-10T03:28:31.000Z","_content":"#### 一、@Enable*注解的工作原理\n> * 我们通过使用@Enable\\*来开启某一项功能的支持，从而避免配置大量增加，降低使用难度\n> * 通过观察源码，@Enable\\*注解都使用了@Import注解，@Import是用来导入配置类的，这就意味着@Enable\\*的实现是通过导入了一些自动配置的Bean来实现的\n\n\n#### 二、导入配置方式的三种类型\n##### 1. 直接导入配置类\n**如：@EnableScheduling**\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(SchedulingConfiguration.class)\n@Documented\npublic @interface EnableScheduling {\n\n}\n```\n```java\n@Configuration\n@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\npublic class SchedulingConfiguration {\n\n\t@Bean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic ScheduledAnnotationBeanPostProcessor scheduledAnnotationProcessor() {\n\t\treturn new ScheduledAnnotationBeanPostProcessor();\n\t}\n\n}\n```\n\n##### 2.依据条件选择配置类\n**如：@EnableAsync**\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(AsyncConfigurationSelector.class)\npublic @interface EnableAsync {\n\n\t/**\n\t * Indicate the 'async' annotation type to be detected at either class\n\t * or method level.\n\t * <p>By default, both Spring's @{@link Async} annotation and the EJB 3.1\n\t * {@code @javax.ejb.Asynchronous} annotation will be detected.\n\t * <p>This attribute exists so that developers can provide their own\n\t * custom annotation type to indicate that a method (or all methods of\n\t * a given class) should be invoked asynchronously.\n\t */\n\tClass<? extends Annotation> annotation() default Annotation.class;\n\n\t/**\n\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed\n\t * to standard Java interface-based proxies.\n\t * <p><strong>Applicable only if the {@link #mode} is set to {@link AdviceMode#PROXY}</strong>.\n\t * <p>The default is {@code false}.\n\t * <p>Note that setting this attribute to {@code true} will affect <em>all</em>\n\t * Spring-managed beans requiring proxying, not just those marked with {@code @Async}.\n\t * For example, other beans marked with Spring's {@code @Transactional} annotation\n\t * will be upgraded to subclass proxying at the same time. This approach has no\n\t * negative impact in practice unless one is explicitly expecting one type of proxy\n\t * vs. another &mdash; for example, in tests.\n\t */\n\tboolean proxyTargetClass() default false;\n\n\t/**\n\t * Indicate how async advice should be applied.\n\t * <p><b>The default is {@link AdviceMode#PROXY}.</b>\n\t * Please note that proxy mode allows for interception of calls through the proxy\n\t * only. Local calls within the same class cannot get intercepted that way; an\n\t * {@link Async} annotation on such a method within a local call will be ignored\n\t * since Spring's interceptor does not even kick in for such a runtime scenario.\n\t * For a more advanced mode of interception, consider switching this to\n\t * {@link AdviceMode#ASPECTJ}.\n\t */\n\tAdviceMode mode() default AdviceMode.PROXY;\n\n\t/**\n\t * Indicate the order in which the {@link AsyncAnnotationBeanPostProcessor}\n\t * should be applied.\n\t * <p>The default is {@link Ordered#LOWEST_PRECEDENCE} in order to run\n\t * after all other post-processors, so that it can add an advisor to\n\t * existing proxies rather than double-proxy.\n\t */\n\tint order() default Ordered.LOWEST_PRECEDENCE;\n\n}\n```\n```java\npublic class AsyncConfigurationSelector extends AdviceModeImportSelector<EnableAsync> {\n\n\tprivate static final String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME =\n\t\t\t\"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration\";\n\n\n\t/**\n\t * Returns {@link ProxyAsyncConfiguration} or {@code AspectJAsyncConfiguration}\n\t * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableAsync#mode()},\n\t * respectively.\n\t */\n\t@Override\n\t@Nullable\n\tpublic String[] selectImports(AdviceMode adviceMode) {\n\t\tswitch (adviceMode) {\n\t\t\tcase PROXY:\n\t\t\t\treturn new String[] {ProxyAsyncConfiguration.class.getName()};\n\t\t\tcase ASPECTJ:\n\t\t\t\treturn new String[] {ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME};\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n}\n```\n\n##### 3.动态注册Bean\n**如：@EnableAspectJAutoProxy**\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(AspectJAutoProxyRegistrar.class)\npublic @interface EnableAspectJAutoProxy {\n\n\t/**\n\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed\n\t * to standard Java interface-based proxies. The default is {@code false}.\n\t */\n\tboolean proxyTargetClass() default false;\n\n\t/**\n\t * Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}\n\t * for retrieval via the {@link org.springframework.aop.framework.AopContext} class.\n\t * Off by default, i.e. no guarantees that {@code AopContext} access will work.\n\t * @since 4.3.1\n\t */\n\tboolean exposeProxy() default false;\n\n}\n```\n```java\nclass AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t/**\n\t * Register, escalate, and configure the AspectJ auto proxy creator based on the value\n\t * of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing\n\t * {@code @Configuration} class.\n\t */\n\t@Override\n\tpublic void registerBeanDefinitions(\n\t\t\tAnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\n\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);\n\n\t\tAnnotationAttributes enableAspectJAutoProxy =\n\t\t\t\tAnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);\n\t\tif (enableAspectJAutoProxy != null) {\n\t\t\tif (enableAspectJAutoProxy.getBoolean(\"proxyTargetClass\")) {\n\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);\n\t\t\t}\n\t\t\tif (enableAspectJAutoProxy.getBoolean(\"exposeProxy\")) {\n\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n","source":"_posts/Spring高级话题-Enable-注解的工作原理.md","raw":"---\ntitle: Spring高级话题-@Enable*注解的工作原理\ndate: 2020-01-10 11:28:31\ntags:\n---\n#### 一、@Enable*注解的工作原理\n> * 我们通过使用@Enable\\*来开启某一项功能的支持，从而避免配置大量增加，降低使用难度\n> * 通过观察源码，@Enable\\*注解都使用了@Import注解，@Import是用来导入配置类的，这就意味着@Enable\\*的实现是通过导入了一些自动配置的Bean来实现的\n\n\n#### 二、导入配置方式的三种类型\n##### 1. 直接导入配置类\n**如：@EnableScheduling**\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Import(SchedulingConfiguration.class)\n@Documented\npublic @interface EnableScheduling {\n\n}\n```\n```java\n@Configuration\n@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\npublic class SchedulingConfiguration {\n\n\t@Bean(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n\tpublic ScheduledAnnotationBeanPostProcessor scheduledAnnotationProcessor() {\n\t\treturn new ScheduledAnnotationBeanPostProcessor();\n\t}\n\n}\n```\n\n##### 2.依据条件选择配置类\n**如：@EnableAsync**\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(AsyncConfigurationSelector.class)\npublic @interface EnableAsync {\n\n\t/**\n\t * Indicate the 'async' annotation type to be detected at either class\n\t * or method level.\n\t * <p>By default, both Spring's @{@link Async} annotation and the EJB 3.1\n\t * {@code @javax.ejb.Asynchronous} annotation will be detected.\n\t * <p>This attribute exists so that developers can provide their own\n\t * custom annotation type to indicate that a method (or all methods of\n\t * a given class) should be invoked asynchronously.\n\t */\n\tClass<? extends Annotation> annotation() default Annotation.class;\n\n\t/**\n\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed\n\t * to standard Java interface-based proxies.\n\t * <p><strong>Applicable only if the {@link #mode} is set to {@link AdviceMode#PROXY}</strong>.\n\t * <p>The default is {@code false}.\n\t * <p>Note that setting this attribute to {@code true} will affect <em>all</em>\n\t * Spring-managed beans requiring proxying, not just those marked with {@code @Async}.\n\t * For example, other beans marked with Spring's {@code @Transactional} annotation\n\t * will be upgraded to subclass proxying at the same time. This approach has no\n\t * negative impact in practice unless one is explicitly expecting one type of proxy\n\t * vs. another &mdash; for example, in tests.\n\t */\n\tboolean proxyTargetClass() default false;\n\n\t/**\n\t * Indicate how async advice should be applied.\n\t * <p><b>The default is {@link AdviceMode#PROXY}.</b>\n\t * Please note that proxy mode allows for interception of calls through the proxy\n\t * only. Local calls within the same class cannot get intercepted that way; an\n\t * {@link Async} annotation on such a method within a local call will be ignored\n\t * since Spring's interceptor does not even kick in for such a runtime scenario.\n\t * For a more advanced mode of interception, consider switching this to\n\t * {@link AdviceMode#ASPECTJ}.\n\t */\n\tAdviceMode mode() default AdviceMode.PROXY;\n\n\t/**\n\t * Indicate the order in which the {@link AsyncAnnotationBeanPostProcessor}\n\t * should be applied.\n\t * <p>The default is {@link Ordered#LOWEST_PRECEDENCE} in order to run\n\t * after all other post-processors, so that it can add an advisor to\n\t * existing proxies rather than double-proxy.\n\t */\n\tint order() default Ordered.LOWEST_PRECEDENCE;\n\n}\n```\n```java\npublic class AsyncConfigurationSelector extends AdviceModeImportSelector<EnableAsync> {\n\n\tprivate static final String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME =\n\t\t\t\"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration\";\n\n\n\t/**\n\t * Returns {@link ProxyAsyncConfiguration} or {@code AspectJAsyncConfiguration}\n\t * for {@code PROXY} and {@code ASPECTJ} values of {@link EnableAsync#mode()},\n\t * respectively.\n\t */\n\t@Override\n\t@Nullable\n\tpublic String[] selectImports(AdviceMode adviceMode) {\n\t\tswitch (adviceMode) {\n\t\t\tcase PROXY:\n\t\t\t\treturn new String[] {ProxyAsyncConfiguration.class.getName()};\n\t\t\tcase ASPECTJ:\n\t\t\t\treturn new String[] {ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME};\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n}\n```\n\n##### 3.动态注册Bean\n**如：@EnableAspectJAutoProxy**\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import(AspectJAutoProxyRegistrar.class)\npublic @interface EnableAspectJAutoProxy {\n\n\t/**\n\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed\n\t * to standard Java interface-based proxies. The default is {@code false}.\n\t */\n\tboolean proxyTargetClass() default false;\n\n\t/**\n\t * Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}\n\t * for retrieval via the {@link org.springframework.aop.framework.AopContext} class.\n\t * Off by default, i.e. no guarantees that {@code AopContext} access will work.\n\t * @since 4.3.1\n\t */\n\tboolean exposeProxy() default false;\n\n}\n```\n```java\nclass AspectJAutoProxyRegistrar implements ImportBeanDefinitionRegistrar {\n\n\t/**\n\t * Register, escalate, and configure the AspectJ auto proxy creator based on the value\n\t * of the @{@link EnableAspectJAutoProxy#proxyTargetClass()} attribute on the importing\n\t * {@code @Configuration} class.\n\t */\n\t@Override\n\tpublic void registerBeanDefinitions(\n\t\t\tAnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\n\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);\n\n\t\tAnnotationAttributes enableAspectJAutoProxy =\n\t\t\t\tAnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);\n\t\tif (enableAspectJAutoProxy != null) {\n\t\t\tif (enableAspectJAutoProxy.getBoolean(\"proxyTargetClass\")) {\n\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);\n\t\t\t}\n\t\t\tif (enableAspectJAutoProxy.getBoolean(\"exposeProxy\")) {\n\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n","slug":"Spring高级话题-Enable-注解的工作原理","published":1,"updated":"2020-01-10T03:29:00.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2dh000i4sz0ftg8erid","content":"<h4 id=\"一、-Enable-注解的工作原理\"><a href=\"#一、-Enable-注解的工作原理\" class=\"headerlink\" title=\"一、@Enable*注解的工作原理\"></a>一、@Enable*注解的工作原理</h4><blockquote>\n<ul>\n<li>我们通过使用@Enable*来开启某一项功能的支持，从而避免配置大量增加，降低使用难度</li>\n<li>通过观察源码，@Enable*注解都使用了@Import注解，@Import是用来导入配置类的，这就意味着@Enable*的实现是通过导入了一些自动配置的Bean来实现的</li>\n</ul>\n</blockquote>\n<h4 id=\"二、导入配置方式的三种类型\"><a href=\"#二、导入配置方式的三种类型\" class=\"headerlink\" title=\"二、导入配置方式的三种类型\"></a>二、导入配置方式的三种类型</h4><h5 id=\"1-直接导入配置类\"><a href=\"#1-直接导入配置类\" class=\"headerlink\" title=\"1. 直接导入配置类\"></a>1. 直接导入配置类</h5><p><strong>如：@EnableScheduling</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(SchedulingConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">Documented</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableScheduling</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulingConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class=\"line\">\t<span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ScheduledAnnotationBeanPostProcessor <span class=\"title\">scheduledAnnotationProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledAnnotationBeanPostProcessor();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-依据条件选择配置类\"><a href=\"#2-依据条件选择配置类\" class=\"headerlink\" title=\"2.依据条件选择配置类\"></a>2.依据条件选择配置类</h5><p><strong>如：@EnableAsync</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AsyncConfigurationSelector<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAsync</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate the 'async' annotation type to be detected at either class</span></span><br><span class=\"line\"><span class=\"comment\">\t * or method level.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;By default, both Spring's @&#123;<span class=\"doctag\">@link</span> Async&#125; annotation and the EJB 3.1</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@javax</span>.ejb.Asynchronous&#125; annotation will be detected.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This attribute exists so that developers can provide their own</span></span><br><span class=\"line\"><span class=\"comment\">\t * custom annotation type to indicate that a method (or all methods of</span></span><br><span class=\"line\"><span class=\"comment\">\t * a given class) should be invoked asynchronously.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;? extends Annotation&gt; annotation() <span class=\"keyword\">default</span> Annotation<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class=\"line\"><span class=\"comment\">\t * to standard Java interface-based proxies.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;&lt;strong&gt;Applicable only if the &#123;<span class=\"doctag\">@link</span> #mode&#125; is set to &#123;<span class=\"doctag\">@link</span> AdviceMode#PROXY&#125;&lt;/strong&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default is &#123;<span class=\"doctag\">@code</span> false&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Note that setting this attribute to &#123;<span class=\"doctag\">@code</span> true&#125; will affect &lt;em&gt;all&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring-managed beans requiring proxying, not just those marked with &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Async</span>&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * For example, other beans marked with Spring's &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Transactional</span>&#125; annotation</span></span><br><span class=\"line\"><span class=\"comment\">\t * will be upgraded to subclass proxying at the same time. This approach has no</span></span><br><span class=\"line\"><span class=\"comment\">\t * negative impact in practice unless one is explicitly expecting one type of proxy</span></span><br><span class=\"line\"><span class=\"comment\">\t * vs. another &amp;mdash; for example, in tests.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate how async advice should be applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;&lt;b&gt;The default is &#123;<span class=\"doctag\">@link</span> AdviceMode#PROXY&#125;.&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Please note that proxy mode allows for interception of calls through the proxy</span></span><br><span class=\"line\"><span class=\"comment\">\t * only. Local calls within the same class cannot get intercepted that way; an</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> Async&#125; annotation on such a method within a local call will be ignored</span></span><br><span class=\"line\"><span class=\"comment\">\t * since Spring's interceptor does not even kick in for such a runtime scenario.</span></span><br><span class=\"line\"><span class=\"comment\">\t * For a more advanced mode of interception, consider switching this to</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> AdviceMode#ASPECTJ&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">AdviceMode <span class=\"title\">mode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> AdviceMode.PROXY</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate the order in which the &#123;<span class=\"doctag\">@link</span> AsyncAnnotationBeanPostProcessor&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * should be applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default is &#123;<span class=\"doctag\">@link</span> Ordered#LOWEST_PRECEDENCE&#125; in order to run</span></span><br><span class=\"line\"><span class=\"comment\">\t * after all other post-processors, so that it can add an advisor to</span></span><br><span class=\"line\"><span class=\"comment\">\t * existing proxies rather than double-proxy.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">order</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableAsync</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Returns &#123;<span class=\"doctag\">@link</span> ProxyAsyncConfiguration&#125; or &#123;<span class=\"doctag\">@code</span> AspectJAsyncConfiguration&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * for &#123;<span class=\"doctag\">@code</span> PROXY&#125; and &#123;<span class=\"doctag\">@code</span> ASPECTJ&#125; values of &#123;<span class=\"doctag\">@link</span> EnableAsync#mode()&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t * respectively.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (adviceMode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;ProxyAsyncConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()&#125;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-动态注册Bean\"><a href=\"#3-动态注册Bean\" class=\"headerlink\" title=\"3.动态注册Bean\"></a>3.动态注册Bean</h5><p><strong>如：@EnableAspectJAutoProxy</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AspectJAutoProxyRegistrar<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAspectJAutoProxy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class=\"line\"><span class=\"comment\">\t * to standard Java interface-based proxies. The default is &#123;<span class=\"doctag\">@code</span> false&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate that the proxy should be exposed by the AOP framework as a &#123;<span class=\"doctag\">@code</span> ThreadLocal&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * for retrieval via the &#123;<span class=\"doctag\">@link</span> org.springframework.aop.framework.AopContext&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Off by default, i.e. no guarantees that &#123;<span class=\"doctag\">@code</span> AopContext&#125; access will work.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 4.3.1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">exposeProxy</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AspectJAutoProxyRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span></span><br><span class=\"line\"><span class=\"comment\">\t * of the @&#123;<span class=\"doctag\">@link</span> EnableAspectJAutoProxy#proxyTargetClass()&#125; attribute on the importing</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Configuration</span>&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tAnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAnnotationAttributes enableAspectJAutoProxy =</span><br><span class=\"line\">\t\t\t\tAnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy.getBoolean(<span class=\"string\">\"proxyTargetClass\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy.getBoolean(<span class=\"string\">\"exposeProxy\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、-Enable-注解的工作原理\"><a href=\"#一、-Enable-注解的工作原理\" class=\"headerlink\" title=\"一、@Enable*注解的工作原理\"></a>一、@Enable*注解的工作原理</h4><blockquote>\n<ul>\n<li>我们通过使用@Enable*来开启某一项功能的支持，从而避免配置大量增加，降低使用难度</li>\n<li>通过观察源码，@Enable*注解都使用了@Import注解，@Import是用来导入配置类的，这就意味着@Enable*的实现是通过导入了一些自动配置的Bean来实现的</li>\n</ul>\n</blockquote>\n<h4 id=\"二、导入配置方式的三种类型\"><a href=\"#二、导入配置方式的三种类型\" class=\"headerlink\" title=\"二、导入配置方式的三种类型\"></a>二、导入配置方式的三种类型</h4><h5 id=\"1-直接导入配置类\"><a href=\"#1-直接导入配置类\" class=\"headerlink\" title=\"1. 直接导入配置类\"></a>1. 直接导入配置类</h5><p><strong>如：@EnableScheduling</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Import</span>(SchedulingConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">Documented</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableScheduling</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SchedulingConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span>(name = TaskManagementConfigUtils.SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME)</span><br><span class=\"line\">\t<span class=\"meta\">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ScheduledAnnotationBeanPostProcessor <span class=\"title\">scheduledAnnotationProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledAnnotationBeanPostProcessor();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-依据条件选择配置类\"><a href=\"#2-依据条件选择配置类\" class=\"headerlink\" title=\"2.依据条件选择配置类\"></a>2.依据条件选择配置类</h5><p><strong>如：@EnableAsync</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AsyncConfigurationSelector<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAsync</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate the 'async' annotation type to be detected at either class</span></span><br><span class=\"line\"><span class=\"comment\">\t * or method level.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;By default, both Spring's @&#123;<span class=\"doctag\">@link</span> Async&#125; annotation and the EJB 3.1</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@javax</span>.ejb.Asynchronous&#125; annotation will be detected.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;This attribute exists so that developers can provide their own</span></span><br><span class=\"line\"><span class=\"comment\">\t * custom annotation type to indicate that a method (or all methods of</span></span><br><span class=\"line\"><span class=\"comment\">\t * a given class) should be invoked asynchronously.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tClass&lt;? extends Annotation&gt; annotation() <span class=\"keyword\">default</span> Annotation<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class=\"line\"><span class=\"comment\">\t * to standard Java interface-based proxies.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;&lt;strong&gt;Applicable only if the &#123;<span class=\"doctag\">@link</span> #mode&#125; is set to &#123;<span class=\"doctag\">@link</span> AdviceMode#PROXY&#125;&lt;/strong&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default is &#123;<span class=\"doctag\">@code</span> false&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Note that setting this attribute to &#123;<span class=\"doctag\">@code</span> true&#125; will affect &lt;em&gt;all&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring-managed beans requiring proxying, not just those marked with &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Async</span>&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t * For example, other beans marked with Spring's &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Transactional</span>&#125; annotation</span></span><br><span class=\"line\"><span class=\"comment\">\t * will be upgraded to subclass proxying at the same time. This approach has no</span></span><br><span class=\"line\"><span class=\"comment\">\t * negative impact in practice unless one is explicitly expecting one type of proxy</span></span><br><span class=\"line\"><span class=\"comment\">\t * vs. another &amp;mdash; for example, in tests.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate how async advice should be applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;&lt;b&gt;The default is &#123;<span class=\"doctag\">@link</span> AdviceMode#PROXY&#125;.&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t * Please note that proxy mode allows for interception of calls through the proxy</span></span><br><span class=\"line\"><span class=\"comment\">\t * only. Local calls within the same class cannot get intercepted that way; an</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> Async&#125; annotation on such a method within a local call will be ignored</span></span><br><span class=\"line\"><span class=\"comment\">\t * since Spring's interceptor does not even kick in for such a runtime scenario.</span></span><br><span class=\"line\"><span class=\"comment\">\t * For a more advanced mode of interception, consider switching this to</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@link</span> AdviceMode#ASPECTJ&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\">AdviceMode <span class=\"title\">mode</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> AdviceMode.PROXY</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate the order in which the &#123;<span class=\"doctag\">@link</span> AsyncAnnotationBeanPostProcessor&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * should be applied.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;The default is &#123;<span class=\"doctag\">@link</span> Ordered#LOWEST_PRECEDENCE&#125; in order to run</span></span><br><span class=\"line\"><span class=\"comment\">\t * after all other post-processors, so that it can add an advisor to</span></span><br><span class=\"line\"><span class=\"comment\">\t * existing proxies rather than double-proxy.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">order</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfigurationSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">AdviceModeImportSelector</span>&lt;<span class=\"title\">EnableAsync</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME =</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"org.springframework.scheduling.aspectj.AspectJAsyncConfiguration\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Returns &#123;<span class=\"doctag\">@link</span> ProxyAsyncConfiguration&#125; or &#123;<span class=\"doctag\">@code</span> AspectJAsyncConfiguration&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * for &#123;<span class=\"doctag\">@code</span> PROXY&#125; and &#123;<span class=\"doctag\">@code</span> ASPECTJ&#125; values of &#123;<span class=\"doctag\">@link</span> EnableAsync#mode()&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">\t * respectively.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (adviceMode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> PROXY:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;ProxyAsyncConfiguration<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getName</span>()&#125;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> ASPECTJ:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[] &#123;ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME&#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-动态注册Bean\"><a href=\"#3-动态注册Bean\" class=\"headerlink\" title=\"3.动态注册Bean\"></a>3.动态注册Bean</h5><p><strong>如：@EnableAspectJAutoProxy</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import</span>(AspectJAutoProxyRegistrar<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">public</span> @<span class=\"title\">interface</span> <span class=\"title\">EnableAspectJAutoProxy</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class=\"line\"><span class=\"comment\">\t * to standard Java interface-based proxies. The default is &#123;<span class=\"doctag\">@code</span> false&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">proxyTargetClass</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Indicate that the proxy should be exposed by the AOP framework as a &#123;<span class=\"doctag\">@code</span> ThreadLocal&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * for retrieval via the &#123;<span class=\"doctag\">@link</span> org.springframework.aop.framework.AopContext&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Off by default, i.e. no guarantees that &#123;<span class=\"doctag\">@code</span> AopContext&#125; access will work.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@since</span> 4.3.1</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">exposeProxy</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"keyword\">false</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AspectJAutoProxyRegistrar</span> <span class=\"keyword\">implements</span> <span class=\"title\">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Register, escalate, and configure the AspectJ auto proxy creator based on the value</span></span><br><span class=\"line\"><span class=\"comment\">\t * of the @&#123;<span class=\"doctag\">@link</span> EnableAspectJAutoProxy#proxyTargetClass()&#125; attribute on the importing</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> <span class=\"doctag\">@Configuration</span>&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tAnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAnnotationAttributes enableAspectJAutoProxy =</span><br><span class=\"line\">\t\t\t\tAnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy.getBoolean(<span class=\"string\">\"proxyTargetClass\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (enableAspectJAutoProxy.getBoolean(<span class=\"string\">\"exposeProxy\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tAopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring高级话题-多线程","date":"2020-01-10T03:25:32.000Z","_content":"#### 一、Spring中的多线程如何使用\n> * Spring通过TaskExecutor(任务执行器)来实现多线程和并发编程，通过ThreadPoolTaskExecutor实现以基于线程池的TaskExecutor。\n> * 在实际使用中，我们需要通过@EnableAsync来开启对异步任务的支持，通过@Async来声明一个异步任务\n\n\n#### 二、AsyncDemo\n> 实现一个基于线程池的异步任务demo\n\n**配置类**\n```java\npackage com.cactus.demo.async;\n\nimport org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:21\n * Description:\n * @EnableAsync 声明开启异步支持\n * 实现AsyncConfigurer接口并重写对应方法，获得需要的任务执行器\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.async\")\n@EnableAsync\npublic class AsyncConfig implements AsyncConfigurer {\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n        threadPoolTaskExecutor.setCorePoolSize(10);\n        threadPoolTaskExecutor.setMaxPoolSize(20);\n        threadPoolTaskExecutor.setQueueCapacity(30);\n        threadPoolTaskExecutor.initialize();\n        return threadPoolTaskExecutor;\n    }\n\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return null;\n    }\n}\n\n```\n\n**方法bean**\n```java\npackage com.cactus.demo.async;\n\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:28\n * Description:\n * @Async 声明funcTwo为异步方法，此方法自动注入使用配置类获得任务执行器\n * @Async若置于类上，则此类所有方法均为异步执行\n */\n\n@Service\npublic class AsyncDemo {\n    public void funcOne(Integer i) {\n        System.out.println(Thread.currentThread().getName() + \" - funcOne : \" + i);\n    }\n\n    @Async\n    public void funcTwo(Integer i) {\n        try {\n            Thread.sleep(50 - i);\n            System.out.println(Thread.currentThread().getName() + \" - funcTwo : \" + i);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.async;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:30\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AsyncConfig.class);\n        AsyncDemo asyncDemo = context.getBean(AsyncDemo.class);\n        for (int i = 0; i < 5; i++) {\n            asyncDemo.funcOne(i);\n        }\n        for (int i = 0; i < 5; i++) {\n            asyncDemo.funcTwo(i);\n        }\n        context.close();\n    }\n}\n\n```\n\n**Result**\n```text\nmain - funcOne : 0\nmain - funcOne : 1\nmain - funcOne : 2\nmain - funcOne : 3\nmain - funcOne : 4\nThreadPoolTaskExecutor-5 - funcTwo : 4\nThreadPoolTaskExecutor-4 - funcTwo : 3\nThreadPoolTaskExecutor-3 - funcTwo : 2\nThreadPoolTaskExecutor-2 - funcTwo : 1\nThreadPoolTaskExecutor-1 - funcTwo : 0\n```\n\n","source":"_posts/Spring高级话题-多线程.md","raw":"---\ntitle: Spring高级话题-多线程\ndate: 2020-01-10 11:25:32\ntags:\n---\n#### 一、Spring中的多线程如何使用\n> * Spring通过TaskExecutor(任务执行器)来实现多线程和并发编程，通过ThreadPoolTaskExecutor实现以基于线程池的TaskExecutor。\n> * 在实际使用中，我们需要通过@EnableAsync来开启对异步任务的支持，通过@Async来声明一个异步任务\n\n\n#### 二、AsyncDemo\n> 实现一个基于线程池的异步任务demo\n\n**配置类**\n```java\npackage com.cactus.demo.async;\n\nimport org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:21\n * Description:\n * @EnableAsync 声明开启异步支持\n * 实现AsyncConfigurer接口并重写对应方法，获得需要的任务执行器\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.async\")\n@EnableAsync\npublic class AsyncConfig implements AsyncConfigurer {\n    public Executor getAsyncExecutor() {\n        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n        threadPoolTaskExecutor.setCorePoolSize(10);\n        threadPoolTaskExecutor.setMaxPoolSize(20);\n        threadPoolTaskExecutor.setQueueCapacity(30);\n        threadPoolTaskExecutor.initialize();\n        return threadPoolTaskExecutor;\n    }\n\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return null;\n    }\n}\n\n```\n\n**方法bean**\n```java\npackage com.cactus.demo.async;\n\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:28\n * Description:\n * @Async 声明funcTwo为异步方法，此方法自动注入使用配置类获得任务执行器\n * @Async若置于类上，则此类所有方法均为异步执行\n */\n\n@Service\npublic class AsyncDemo {\n    public void funcOne(Integer i) {\n        System.out.println(Thread.currentThread().getName() + \" - funcOne : \" + i);\n    }\n\n    @Async\n    public void funcTwo(Integer i) {\n        try {\n            Thread.sleep(50 - i);\n            System.out.println(Thread.currentThread().getName() + \" - funcTwo : \" + i);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.async;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:30\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AsyncConfig.class);\n        AsyncDemo asyncDemo = context.getBean(AsyncDemo.class);\n        for (int i = 0; i < 5; i++) {\n            asyncDemo.funcOne(i);\n        }\n        for (int i = 0; i < 5; i++) {\n            asyncDemo.funcTwo(i);\n        }\n        context.close();\n    }\n}\n\n```\n\n**Result**\n```text\nmain - funcOne : 0\nmain - funcOne : 1\nmain - funcOne : 2\nmain - funcOne : 3\nmain - funcOne : 4\nThreadPoolTaskExecutor-5 - funcTwo : 4\nThreadPoolTaskExecutor-4 - funcTwo : 3\nThreadPoolTaskExecutor-3 - funcTwo : 2\nThreadPoolTaskExecutor-2 - funcTwo : 1\nThreadPoolTaskExecutor-1 - funcTwo : 0\n```\n\n","slug":"Spring高级话题-多线程","published":1,"updated":"2020-01-10T03:26:04.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2di000j4sz0a5ye57ik","content":"<h4 id=\"一、Spring中的多线程如何使用\"><a href=\"#一、Spring中的多线程如何使用\" class=\"headerlink\" title=\"一、Spring中的多线程如何使用\"></a>一、Spring中的多线程如何使用</h4><blockquote>\n<ul>\n<li>Spring通过TaskExecutor(任务执行器)来实现多线程和并发编程，通过ThreadPoolTaskExecutor实现以基于线程池的TaskExecutor。</li>\n<li>在实际使用中，我们需要通过@EnableAsync来开启对异步任务的支持，通过@Async来声明一个异步任务</li>\n</ul>\n</blockquote>\n<h4 id=\"二、AsyncDemo\"><a href=\"#二、AsyncDemo\" class=\"headerlink\" title=\"二、AsyncDemo\"></a>二、AsyncDemo</h4><blockquote>\n<p>实现一个基于线程池的异步任务demo</p>\n</blockquote>\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.async;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:21</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@EnableAsync</span> 声明开启异步支持</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现AsyncConfigurer接口并重写对应方法，获得需要的任务执行器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.async\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">AsyncConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">getAsyncExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        threadPoolTaskExecutor.setCorePoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">        threadPoolTaskExecutor.setMaxPoolSize(<span class=\"number\">20</span>);</span><br><span class=\"line\">        threadPoolTaskExecutor.setQueueCapacity(<span class=\"number\">30</span>);</span><br><span class=\"line\">        threadPoolTaskExecutor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadPoolTaskExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"title\">getAsyncUncaughtExceptionHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.async;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:28</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Async</span> 声明funcTwo为异步方法，此方法自动注入使用配置类获得任务执行器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Async</span>若置于类上，则此类所有方法均为异步执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">funcOne</span><span class=\"params\">(Integer i)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" - funcOne : \"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">funcTwo</span><span class=\"params\">(Integer i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span> - i);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" - funcTwo : \"</span> + i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.async;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:30</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(AsyncConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        AsyncDemo asyncDemo = context.getBean(AsyncDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            asyncDemo.funcOne(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            asyncDemo.funcTwo(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main - funcOne : 0</span><br><span class=\"line\">main - funcOne : 1</span><br><span class=\"line\">main - funcOne : 2</span><br><span class=\"line\">main - funcOne : 3</span><br><span class=\"line\">main - funcOne : 4</span><br><span class=\"line\">ThreadPoolTaskExecutor-5 - funcTwo : 4</span><br><span class=\"line\">ThreadPoolTaskExecutor-4 - funcTwo : 3</span><br><span class=\"line\">ThreadPoolTaskExecutor-3 - funcTwo : 2</span><br><span class=\"line\">ThreadPoolTaskExecutor-2 - funcTwo : 1</span><br><span class=\"line\">ThreadPoolTaskExecutor-1 - funcTwo : 0</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、Spring中的多线程如何使用\"><a href=\"#一、Spring中的多线程如何使用\" class=\"headerlink\" title=\"一、Spring中的多线程如何使用\"></a>一、Spring中的多线程如何使用</h4><blockquote>\n<ul>\n<li>Spring通过TaskExecutor(任务执行器)来实现多线程和并发编程，通过ThreadPoolTaskExecutor实现以基于线程池的TaskExecutor。</li>\n<li>在实际使用中，我们需要通过@EnableAsync来开启对异步任务的支持，通过@Async来声明一个异步任务</li>\n</ul>\n</blockquote>\n<h4 id=\"二、AsyncDemo\"><a href=\"#二、AsyncDemo\" class=\"headerlink\" title=\"二、AsyncDemo\"></a>二、AsyncDemo</h4><blockquote>\n<p>实现一个基于线程池的异步任务demo</p>\n</blockquote>\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.async;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.AsyncConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:21</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@EnableAsync</span> 声明开启异步支持</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现AsyncConfigurer接口并重写对应方法，获得需要的任务执行器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.async\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">AsyncConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">getAsyncExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        threadPoolTaskExecutor.setCorePoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">        threadPoolTaskExecutor.setMaxPoolSize(<span class=\"number\">20</span>);</span><br><span class=\"line\">        threadPoolTaskExecutor.setQueueCapacity(<span class=\"number\">30</span>);</span><br><span class=\"line\">        threadPoolTaskExecutor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> threadPoolTaskExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AsyncUncaughtExceptionHandler <span class=\"title\">getAsyncUncaughtExceptionHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法bean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.async;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:28</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Async</span> 声明funcTwo为异步方法，此方法自动注入使用配置类获得任务执行器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Async</span>若置于类上，则此类所有方法均为异步执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">funcOne</span><span class=\"params\">(Integer i)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" - funcOne : \"</span> + i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">funcTwo</span><span class=\"params\">(Integer i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">50</span> - i);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">\" - funcTwo : \"</span> + i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.async;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:30</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(AsyncConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        AsyncDemo asyncDemo = context.getBean(AsyncDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            asyncDemo.funcOne(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            asyncDemo.funcTwo(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main - funcOne : 0</span><br><span class=\"line\">main - funcOne : 1</span><br><span class=\"line\">main - funcOne : 2</span><br><span class=\"line\">main - funcOne : 3</span><br><span class=\"line\">main - funcOne : 4</span><br><span class=\"line\">ThreadPoolTaskExecutor-5 - funcTwo : 4</span><br><span class=\"line\">ThreadPoolTaskExecutor-4 - funcTwo : 3</span><br><span class=\"line\">ThreadPoolTaskExecutor-3 - funcTwo : 2</span><br><span class=\"line\">ThreadPoolTaskExecutor-2 - funcTwo : 1</span><br><span class=\"line\">ThreadPoolTaskExecutor-1 - funcTwo : 0</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Spring高级话题-测试","date":"2020-01-10T03:29:39.000Z","_content":"#### 一、关于Spring中的测试\n> 在开发过程中开发人员会经常使用到两种测试方式，单元测试和集成测试\n> * 单元测试：只针对单一的类或方法，对运行环境没有依赖\n> * 集成测试：需要来自不同层的不同对象的交互，如数据库，网络连接，ioc容器等\n> Spring通过Spring TestContext Framework对集成测试提供了顶级的支持\n\n\n> 补充： 基于Maven构建的项目结构默认有关于测试的目录：\n    > 测试代码：src/test/java\n    > 测试资源：src/text/resources\n\n#### 二、如何使用Spring提供的测试功能\n> 1. 使用@RunWith注解，让代码运行于Spring测试环境(@RunWith就是一个运行器，SpringJUnit4ClassRunner.class提供了Spring TestContext Framework的功能)\n> 2. 使用@ContextConfiguration注解来配置应用容器\n> 3. 使用@ActiveProfiles来确定profile\n\n#### 三、testDemo\n\n**实体类**\n```java\npackage com.cactus.demo.test;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 14:04\n * Description:\n */\n\n\npublic class TestDemo {\n    private String content;\n\n    public TestDemo() {\n    }\n\n    public TestDemo(String content) {\n        this.content = content;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.test;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 14:05\n * Description:\n */\n\n@Configuration\npublic class TestConfig {\n    @Bean\n    @Profile(\"dev\")\n    public TestDemo getDevBean() {\n        return new TestDemo(\"I am dev testDemo\");\n    }\n\n    @Bean\n    @Profile(\"prod\")\n    public TestDemo getProdBean() {\n        return new TestDemo(\"I am prod testDemo\");\n    }\n}\n\n```\n\n**测试运行类**\n```java\npackage testdemo;\n\nimport com.cactus.demo.test.TestConfig;\nimport com.cactus.demo.test.TestDemo;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 14:10\n * Description:\n */\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {TestConfig.class})\n@ActiveProfiles(\"prod\")\npublic class DemoTest {\n    @Autowired\n    private TestDemo testBean;\n\n    @Test\n    public void test() {\n        String content = testBean.getContent();\n        System.out.println(content);\n    }\n}\n\n```\n\n**Result**\n```text\nI am prod testDemo\n```\n","source":"_posts/Spring高级话题-测试.md","raw":"---\ntitle: Spring高级话题-测试\ndate: 2020-01-10 11:29:39\ntags:\n---\n#### 一、关于Spring中的测试\n> 在开发过程中开发人员会经常使用到两种测试方式，单元测试和集成测试\n> * 单元测试：只针对单一的类或方法，对运行环境没有依赖\n> * 集成测试：需要来自不同层的不同对象的交互，如数据库，网络连接，ioc容器等\n> Spring通过Spring TestContext Framework对集成测试提供了顶级的支持\n\n\n> 补充： 基于Maven构建的项目结构默认有关于测试的目录：\n    > 测试代码：src/test/java\n    > 测试资源：src/text/resources\n\n#### 二、如何使用Spring提供的测试功能\n> 1. 使用@RunWith注解，让代码运行于Spring测试环境(@RunWith就是一个运行器，SpringJUnit4ClassRunner.class提供了Spring TestContext Framework的功能)\n> 2. 使用@ContextConfiguration注解来配置应用容器\n> 3. 使用@ActiveProfiles来确定profile\n\n#### 三、testDemo\n\n**实体类**\n```java\npackage com.cactus.demo.test;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 14:04\n * Description:\n */\n\n\npublic class TestDemo {\n    private String content;\n\n    public TestDemo() {\n    }\n\n    public TestDemo(String content) {\n        this.content = content;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n}\n\n```\n\n**配置类**\n```java\npackage com.cactus.demo.test;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 14:05\n * Description:\n */\n\n@Configuration\npublic class TestConfig {\n    @Bean\n    @Profile(\"dev\")\n    public TestDemo getDevBean() {\n        return new TestDemo(\"I am dev testDemo\");\n    }\n\n    @Bean\n    @Profile(\"prod\")\n    public TestDemo getProdBean() {\n        return new TestDemo(\"I am prod testDemo\");\n    }\n}\n\n```\n\n**测试运行类**\n```java\npackage testdemo;\n\nimport com.cactus.demo.test.TestConfig;\nimport com.cactus.demo.test.TestDemo;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n/**\n * Created by liruigao\n * Date: 2019-12-09 14:10\n * Description:\n */\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {TestConfig.class})\n@ActiveProfiles(\"prod\")\npublic class DemoTest {\n    @Autowired\n    private TestDemo testBean;\n\n    @Test\n    public void test() {\n        String content = testBean.getContent();\n        System.out.println(content);\n    }\n}\n\n```\n\n**Result**\n```text\nI am prod testDemo\n```\n","slug":"Spring高级话题-测试","published":1,"updated":"2020-01-10T03:30:04.479Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2dj000k4sz049cjfi4p","content":"<h4 id=\"一、关于Spring中的测试\"><a href=\"#一、关于Spring中的测试\" class=\"headerlink\" title=\"一、关于Spring中的测试\"></a>一、关于Spring中的测试</h4><blockquote>\n<p>在开发过程中开发人员会经常使用到两种测试方式，单元测试和集成测试</p>\n<ul>\n<li>单元测试：只针对单一的类或方法，对运行环境没有依赖</li>\n<li>集成测试：需要来自不同层的不同对象的交互，如数据库，网络连接，ioc容器等<br>Spring通过Spring TestContext Framework对集成测试提供了顶级的支持</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>补充： 基于Maven构建的项目结构默认有关于测试的目录：<br>测试代码：src/test/java<br>测试资源：src/text/resources</p>\n</blockquote>\n<h4 id=\"二、如何使用Spring提供的测试功能\"><a href=\"#二、如何使用Spring提供的测试功能\" class=\"headerlink\" title=\"二、如何使用Spring提供的测试功能\"></a>二、如何使用Spring提供的测试功能</h4><blockquote>\n<ol>\n<li>使用@RunWith注解，让代码运行于Spring测试环境(@RunWith就是一个运行器，SpringJUnit4ClassRunner.class提供了Spring TestContext Framework的功能)</li>\n<li>使用@ContextConfiguration注解来配置应用容器</li>\n<li>使用@ActiveProfiles来确定profile</li>\n</ol>\n</blockquote>\n<h4 id=\"三、testDemo\"><a href=\"#三、testDemo\" class=\"headerlink\" title=\"三、testDemo\"></a>三、testDemo</h4><p><strong>实体类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 14:04</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDemo</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 14:05</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TestDemo <span class=\"title\">getDevBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestDemo(<span class=\"string\">\"I am dev testDemo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"prod\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TestDemo <span class=\"title\">getProdBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestDemo(<span class=\"string\">\"I am prod testDemo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试运行类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> testdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.cactus.demo.test.TestConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.cactus.demo.test.TestDemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ActiveProfiles;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 14:10</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ContextConfiguration</span>(<span class=\"title\">classes</span> </span>= &#123;TestConfig<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\">@ActiveProfiles(\"prod\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDemo testBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String content = testBean.getContent();</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am prod testDemo</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、关于Spring中的测试\"><a href=\"#一、关于Spring中的测试\" class=\"headerlink\" title=\"一、关于Spring中的测试\"></a>一、关于Spring中的测试</h4><blockquote>\n<p>在开发过程中开发人员会经常使用到两种测试方式，单元测试和集成测试</p>\n<ul>\n<li>单元测试：只针对单一的类或方法，对运行环境没有依赖</li>\n<li>集成测试：需要来自不同层的不同对象的交互，如数据库，网络连接，ioc容器等<br>Spring通过Spring TestContext Framework对集成测试提供了顶级的支持</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>补充： 基于Maven构建的项目结构默认有关于测试的目录：<br>测试代码：src/test/java<br>测试资源：src/text/resources</p>\n</blockquote>\n<h4 id=\"二、如何使用Spring提供的测试功能\"><a href=\"#二、如何使用Spring提供的测试功能\" class=\"headerlink\" title=\"二、如何使用Spring提供的测试功能\"></a>二、如何使用Spring提供的测试功能</h4><blockquote>\n<ol>\n<li>使用@RunWith注解，让代码运行于Spring测试环境(@RunWith就是一个运行器，SpringJUnit4ClassRunner.class提供了Spring TestContext Framework的功能)</li>\n<li>使用@ContextConfiguration注解来配置应用容器</li>\n<li>使用@ActiveProfiles来确定profile</li>\n</ol>\n</blockquote>\n<h4 id=\"三、testDemo\"><a href=\"#三、testDemo\" class=\"headerlink\" title=\"三、testDemo\"></a>三、testDemo</h4><p><strong>实体类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 14:04</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDemo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDemo</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getContent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Profile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 14:05</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"dev\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TestDemo <span class=\"title\">getDevBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestDemo(<span class=\"string\">\"I am dev testDemo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Profile</span>(<span class=\"string\">\"prod\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TestDemo <span class=\"title\">getProdBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestDemo(<span class=\"string\">\"I am prod testDemo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>测试运行类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> testdemo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.cactus.demo.test.TestConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.cactus.demo.test.TestDemo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.runner.RunWith;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ActiveProfiles;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-09 14:10</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">@<span class=\"title\">ContextConfiguration</span>(<span class=\"title\">classes</span> </span>= &#123;TestConfig<span class=\"class\">.<span class=\"keyword\">class</span>&#125;)</span></span><br><span class=\"line\">@ActiveProfiles(\"prod\")</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDemo testBean;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String content = testBean.getContent();</span><br><span class=\"line\">        System.out.println(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I am prod testDemo</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring高级话题-计划任务","date":"2020-01-10T03:26:29.000Z","_content":"#### 一、什么是计划任务\n> 就相当于一个定时器，可以使代码在固定的日期时间执行\n\n#### 二、在Spring中如何使用计划任务\n> 使用@EnableScheduling开启对计划任务的支持\n> 使用@Scheduled声明一个计划任务 （支持多类型，包括cron, fixDelay, fixRate）\n\n#### 三、scheduleDemo\n\n**配置类**\n```java\npackage com.cactus.demo.schedule;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:48\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.schedule\")\n@EnableScheduling\npublic class ScheduleConfig {\n}\n\n```\n**执行类**\n```java\npackage com.cactus.demo.schedule;\n\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:45\n * Description:\n */\n\n@Service\npublic class ScheduleDemo {\n    @Scheduled(fixedDelay = 3000)\n    public void taskOne() {\n        System.out.println(\"taskOne - \" + new Date());\n    }\n\n    @Scheduled(cron = \"0 53 15 ? * *\")\n    public void taskTwo() {\n        System.out.println(\"taskTwo - \" + new Date());\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.schedule;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:49\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScheduleConfig.class);\n        ScheduleDemo scheduleDemo = context.getBean(ScheduleDemo.class);\n    }\n}\n```\n\n**Result**\n```text\ntaskOne - Mon Dec 09 15:04:53 CST 2019\ntaskOne - Mon Dec 09 15:04:56 CST 2019\ntaskOne - Mon Dec 09 15:04:59 CST 2019\ntaskTwo - Mon Dec 09 15:05:00 CST 2019\ntaskOne - Mon Dec 09 15:05:02 CST 2019\ntaskOne - Mon Dec 09 15:05:05 CST 2019\n```\n","source":"_posts/Spring高级话题-计划任务.md","raw":"---\ntitle: Spring高级话题-计划任务\ndate: 2020-01-10 11:26:29\ntags:\n---\n#### 一、什么是计划任务\n> 就相当于一个定时器，可以使代码在固定的日期时间执行\n\n#### 二、在Spring中如何使用计划任务\n> 使用@EnableScheduling开启对计划任务的支持\n> 使用@Scheduled声明一个计划任务 （支持多类型，包括cron, fixDelay, fixRate）\n\n#### 三、scheduleDemo\n\n**配置类**\n```java\npackage com.cactus.demo.schedule;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.EnableScheduling;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:48\n * Description:\n */\n\n@Configuration\n@ComponentScan(\"com.cactus.demo.schedule\")\n@EnableScheduling\npublic class ScheduleConfig {\n}\n\n```\n**执行类**\n```java\npackage com.cactus.demo.schedule;\n\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:45\n * Description:\n */\n\n@Service\npublic class ScheduleDemo {\n    @Scheduled(fixedDelay = 3000)\n    public void taskOne() {\n        System.out.println(\"taskOne - \" + new Date());\n    }\n\n    @Scheduled(cron = \"0 53 15 ? * *\")\n    public void taskTwo() {\n        System.out.println(\"taskTwo - \" + new Date());\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.schedule;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 15:49\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScheduleConfig.class);\n        ScheduleDemo scheduleDemo = context.getBean(ScheduleDemo.class);\n    }\n}\n```\n\n**Result**\n```text\ntaskOne - Mon Dec 09 15:04:53 CST 2019\ntaskOne - Mon Dec 09 15:04:56 CST 2019\ntaskOne - Mon Dec 09 15:04:59 CST 2019\ntaskTwo - Mon Dec 09 15:05:00 CST 2019\ntaskOne - Mon Dec 09 15:05:02 CST 2019\ntaskOne - Mon Dec 09 15:05:05 CST 2019\n```\n","slug":"Spring高级话题-计划任务","published":1,"updated":"2020-01-10T03:26:44.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2dk000l4sz03uqk5h74","content":"<h4 id=\"一、什么是计划任务\"><a href=\"#一、什么是计划任务\" class=\"headerlink\" title=\"一、什么是计划任务\"></a>一、什么是计划任务</h4><blockquote>\n<p>就相当于一个定时器，可以使代码在固定的日期时间执行</p>\n</blockquote>\n<h4 id=\"二、在Spring中如何使用计划任务\"><a href=\"#二、在Spring中如何使用计划任务\" class=\"headerlink\" title=\"二、在Spring中如何使用计划任务\"></a>二、在Spring中如何使用计划任务</h4><blockquote>\n<p>使用@EnableScheduling开启对计划任务的支持<br>使用@Scheduled声明一个计划任务 （支持多类型，包括cron, fixDelay, fixRate）</p>\n</blockquote>\n<h4 id=\"三、scheduleDemo\"><a href=\"#三、scheduleDemo\" class=\"headerlink\" title=\"三、scheduleDemo\"></a>三、scheduleDemo</h4><p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.schedule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:48</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.schedule\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.schedule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:45</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(fixedDelay = <span class=\"number\">3000</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">taskOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"taskOne - \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 53 15 ? * *\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">taskTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"taskTwo - \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.schedule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:49</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ScheduleConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ScheduleDemo scheduleDemo = context.getBean(ScheduleDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskOne - Mon Dec 09 15:04:53 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:04:56 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:04:59 CST 2019</span><br><span class=\"line\">taskTwo - Mon Dec 09 15:05:00 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:05:02 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:05:05 CST 2019</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、什么是计划任务\"><a href=\"#一、什么是计划任务\" class=\"headerlink\" title=\"一、什么是计划任务\"></a>一、什么是计划任务</h4><blockquote>\n<p>就相当于一个定时器，可以使代码在固定的日期时间执行</p>\n</blockquote>\n<h4 id=\"二、在Spring中如何使用计划任务\"><a href=\"#二、在Spring中如何使用计划任务\" class=\"headerlink\" title=\"二、在Spring中如何使用计划任务\"></a>二、在Spring中如何使用计划任务</h4><blockquote>\n<p>使用@EnableScheduling开启对计划任务的支持<br>使用@Scheduled声明一个计划任务 （支持多类型，包括cron, fixDelay, fixRate）</p>\n</blockquote>\n<h4 id=\"三、scheduleDemo\"><a href=\"#三、scheduleDemo\" class=\"headerlink\" title=\"三、scheduleDemo\"></a>三、scheduleDemo</h4><p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.schedule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:48</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(<span class=\"string\">\"com.cactus.demo.schedule\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableScheduling</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleConfig</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>执行类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.schedule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:45</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScheduleDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(fixedDelay = <span class=\"number\">3000</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">taskOne</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"taskOne - \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0 53 15 ? * *\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">taskTwo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"taskTwo - \"</span> + <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.schedule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 15:49</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ScheduleConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        ScheduleDemo scheduleDemo = context.getBean(ScheduleDemo<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">taskOne - Mon Dec 09 15:04:53 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:04:56 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:04:59 CST 2019</span><br><span class=\"line\">taskTwo - Mon Dec 09 15:05:00 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:05:02 CST 2019</span><br><span class=\"line\">taskOne - Mon Dec 09 15:05:05 CST 2019</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring高级话题-条件注解","date":"2020-01-10T03:27:18.000Z","_content":"#### 一、什么是条件注解\n> 根据特定的条件来控制Bean的创建行为\n> 使用到的注解 @Conditional\n\n#### 二、如何使用条件注解\n> 1. 通过实现Condition接口并重写matches方法（构造判断条件）来实现一个条件判断类\n> 2. 在配置Bean时使用@Conditional注解，并指定条件判断类，实现有条件地创建Bean\n\n#### 三、conditionDemo\n> 通过判断程序在什么系统下运行，来创建对应的Bean，并输出该系统下列表展示命令\n\n**条件判断类**\n```java\npackage com.cactus.demo.conditional;\n\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:08\n * Description:\n */\n\n\npublic class MacCondition implements Condition {\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        String osName = context.getEnvironment().getProperty(\"os.name\");\n        System.out.println(\"osName : \" + osName);\n        return osName.contains(\"Mac\");\n    }\n}\n\n```\n\n**条件判断类**\n```java\npackage com.cactus.demo.conditional;\n\n\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:13\n * Description:\n */\n\n\npublic class WindowsCondition implements Condition {\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        String osName = context.getEnvironment().getProperty(\"os.name\");\n        System.out.println(\"osName : \" + osName);\n        return osName.contains(\"windows\");\n    }\n}\n\n```\n\n**demoBean接口类**\n```java\npackage com.cactus.demo.conditional;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:15\n * Description:\n */\n\n\npublic interface IListService {\n    public void list();\n}\n\n```\n**demoBean**\n```java\npackage com.cactus.demo.conditional;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:16\n * Description:\n */\n\n\npublic class MacListService implements IListService {\n    public void list() {\n        System.out.println(\"mac command:  ls\");\n    }\n}\n\n```\n**demoBean**\n```java\npackage com.cactus.demo.conditional;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:16\n * Description:\n */\n\n\npublic class WindowsListService implements IListService {\n    public void list() {\n        System.out.println(\"windows command : dir\");\n    }\n}\n```\n\n**配置类**\n```java\npackage com.cactus.demo.conditional;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:04\n * Description:\n */\n\n@Configuration\npublic class ConditionalConifg {\n\n    @Bean\n    @Conditional(WindowsCondition.class)\n    public IListService windowsListService() {\n        return new WindowsListService();\n    }\n\n    @Bean\n    @Conditional(MacCondition.class)\n    public IListService macListService() {\n        return new MacListService();\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.conditional;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:02\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConditionalConifg.class);\n        IListService listService = context.getBean(IListService.class);\n        listService.list();\n        context.close();\n    }\n}\n\n```\n\n**Result**\n```text\nWindowsCondition --> osName : Mac OS X\nMacCondition --> osName : Mac OS X\nmac command:  ls\n```\n","source":"_posts/Spring高级话题-条件注解.md","raw":"---\ntitle: Spring高级话题-条件注解\ndate: 2020-01-10 11:27:18\ntags:\n---\n#### 一、什么是条件注解\n> 根据特定的条件来控制Bean的创建行为\n> 使用到的注解 @Conditional\n\n#### 二、如何使用条件注解\n> 1. 通过实现Condition接口并重写matches方法（构造判断条件）来实现一个条件判断类\n> 2. 在配置Bean时使用@Conditional注解，并指定条件判断类，实现有条件地创建Bean\n\n#### 三、conditionDemo\n> 通过判断程序在什么系统下运行，来创建对应的Bean，并输出该系统下列表展示命令\n\n**条件判断类**\n```java\npackage com.cactus.demo.conditional;\n\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:08\n * Description:\n */\n\n\npublic class MacCondition implements Condition {\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        String osName = context.getEnvironment().getProperty(\"os.name\");\n        System.out.println(\"osName : \" + osName);\n        return osName.contains(\"Mac\");\n    }\n}\n\n```\n\n**条件判断类**\n```java\npackage com.cactus.demo.conditional;\n\n\nimport org.springframework.context.annotation.Condition;\nimport org.springframework.context.annotation.ConditionContext;\nimport org.springframework.core.type.AnnotatedTypeMetadata;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:13\n * Description:\n */\n\n\npublic class WindowsCondition implements Condition {\n    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n        String osName = context.getEnvironment().getProperty(\"os.name\");\n        System.out.println(\"osName : \" + osName);\n        return osName.contains(\"windows\");\n    }\n}\n\n```\n\n**demoBean接口类**\n```java\npackage com.cactus.demo.conditional;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:15\n * Description:\n */\n\n\npublic interface IListService {\n    public void list();\n}\n\n```\n**demoBean**\n```java\npackage com.cactus.demo.conditional;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:16\n * Description:\n */\n\n\npublic class MacListService implements IListService {\n    public void list() {\n        System.out.println(\"mac command:  ls\");\n    }\n}\n\n```\n**demoBean**\n```java\npackage com.cactus.demo.conditional;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:16\n * Description:\n */\n\n\npublic class WindowsListService implements IListService {\n    public void list() {\n        System.out.println(\"windows command : dir\");\n    }\n}\n```\n\n**配置类**\n```java\npackage com.cactus.demo.conditional;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:04\n * Description:\n */\n\n@Configuration\npublic class ConditionalConifg {\n\n    @Bean\n    @Conditional(WindowsCondition.class)\n    public IListService windowsListService() {\n        return new WindowsListService();\n    }\n\n    @Bean\n    @Conditional(MacCondition.class)\n    public IListService macListService() {\n        return new MacListService();\n    }\n}\n\n```\n\n**Main**\n```java\npackage com.cactus.demo.conditional;\n\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\n/**\n * Created by liruigao\n * Date: 2019-12-05 16:02\n * Description:\n */\n\n\npublic class Main {\n    public static void main(String[] args) {\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConditionalConifg.class);\n        IListService listService = context.getBean(IListService.class);\n        listService.list();\n        context.close();\n    }\n}\n\n```\n\n**Result**\n```text\nWindowsCondition --> osName : Mac OS X\nMacCondition --> osName : Mac OS X\nmac command:  ls\n```\n","slug":"Spring高级话题-条件注解","published":1,"updated":"2020-01-10T03:27:33.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck57lu2eg000m4sz07vkvbp59","content":"<h4 id=\"一、什么是条件注解\"><a href=\"#一、什么是条件注解\" class=\"headerlink\" title=\"一、什么是条件注解\"></a>一、什么是条件注解</h4><blockquote>\n<p>根据特定的条件来控制Bean的创建行为<br>使用到的注解 @Conditional</p>\n</blockquote>\n<h4 id=\"二、如何使用条件注解\"><a href=\"#二、如何使用条件注解\" class=\"headerlink\" title=\"二、如何使用条件注解\"></a>二、如何使用条件注解</h4><blockquote>\n<ol>\n<li>通过实现Condition接口并重写matches方法（构造判断条件）来实现一个条件判断类</li>\n<li>在配置Bean时使用@Conditional注解，并指定条件判断类，实现有条件地创建Bean</li>\n</ol>\n</blockquote>\n<h4 id=\"三、conditionDemo\"><a href=\"#三、conditionDemo\" class=\"headerlink\" title=\"三、conditionDemo\"></a>三、conditionDemo</h4><blockquote>\n<p>通过判断程序在什么系统下运行，来创建对应的Bean，并输出该系统下列表展示命令</p>\n</blockquote>\n<p><strong>条件判断类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:08</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">        String osName = context.getEnvironment().getProperty(<span class=\"string\">\"os.name\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"osName : \"</span> + osName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> osName.contains(<span class=\"string\">\"Mac\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>条件判断类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:13</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowsCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">        String osName = context.getEnvironment().getProperty(<span class=\"string\">\"os.name\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"osName : \"</span> + osName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> osName.contains(<span class=\"string\">\"windows\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>demoBean接口类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:15</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IListService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>demoBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacListService</span> <span class=\"keyword\">implements</span> <span class=\"title\">IListService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mac command:  ls\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>demoBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowsListService</span> <span class=\"keyword\">implements</span> <span class=\"title\">IListService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"windows command : dir\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Conditional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:04</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConditionalConifg</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Conditional</span>(WindowsCondition<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">IListService</span> <span class=\"title\">windowsListService</span>() </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WindowsListService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Conditional</span>(MacCondition<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">IListService</span> <span class=\"title\">macListService</span>() </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MacListService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:02</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ConditionalConifg<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        IListService listService = context.getBean(IListService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        listService.list();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WindowsCondition --&gt; osName : Mac OS X</span><br><span class=\"line\">MacCondition --&gt; osName : Mac OS X</span><br><span class=\"line\">mac command:  ls</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、什么是条件注解\"><a href=\"#一、什么是条件注解\" class=\"headerlink\" title=\"一、什么是条件注解\"></a>一、什么是条件注解</h4><blockquote>\n<p>根据特定的条件来控制Bean的创建行为<br>使用到的注解 @Conditional</p>\n</blockquote>\n<h4 id=\"二、如何使用条件注解\"><a href=\"#二、如何使用条件注解\" class=\"headerlink\" title=\"二、如何使用条件注解\"></a>二、如何使用条件注解</h4><blockquote>\n<ol>\n<li>通过实现Condition接口并重写matches方法（构造判断条件）来实现一个条件判断类</li>\n<li>在配置Bean时使用@Conditional注解，并指定条件判断类，实现有条件地创建Bean</li>\n</ol>\n</blockquote>\n<h4 id=\"三、conditionDemo\"><a href=\"#三、conditionDemo\" class=\"headerlink\" title=\"三、conditionDemo\"></a>三、conditionDemo</h4><blockquote>\n<p>通过判断程序在什么系统下运行，来创建对应的Bean，并输出该系统下列表展示命令</p>\n</blockquote>\n<p><strong>条件判断类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:08</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">        String osName = context.getEnvironment().getProperty(<span class=\"string\">\"os.name\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"osName : \"</span> + osName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> osName.contains(<span class=\"string\">\"Mac\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>条件判断类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Condition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:13</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowsCondition</span> <span class=\"keyword\">implements</span> <span class=\"title\">Condition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class=\"line\">        String osName = context.getEnvironment().getProperty(<span class=\"string\">\"os.name\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"osName : \"</span> + osName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> osName.contains(<span class=\"string\">\"windows\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>demoBean接口类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:15</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IListService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>demoBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacListService</span> <span class=\"keyword\">implements</span> <span class=\"title\">IListService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mac command:  ls\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>demoBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:16</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowsListService</span> <span class=\"keyword\">implements</span> <span class=\"title\">IListService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"windows command : dir\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>配置类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Conditional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:04</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConditionalConifg</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Conditional</span>(WindowsCondition<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">IListService</span> <span class=\"title\">windowsListService</span>() </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WindowsListService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Conditional</span>(MacCondition<span class=\"class\">.<span class=\"keyword\">class</span>)</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">IListService</span> <span class=\"title\">macListService</span>() </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MacListService();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Main</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cactus.demo.conditional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by liruigao</span></span><br><span class=\"line\"><span class=\"comment\"> * Date: 2019-12-05 16:02</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AnnotationConfigApplicationContext context = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext(ConditionalConifg<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        IListService listService = context.getBean(IListService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">        listService.list();</span><br><span class=\"line\">        context.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Result</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WindowsCondition --&gt; osName : Mac OS X</span><br><span class=\"line\">MacCondition --&gt; osName : Mac OS X</span><br><span class=\"line\">mac command:  ls</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/RocketMQ概述/rocketmq.jpeg","post":"ck57lu2ct00014sz0eki16l63","slug":"rocketmq.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Spring-概述/spring.jpeg","post":"ck57lu2d500074sz08c0j85ww","slug":"spring.jpeg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}